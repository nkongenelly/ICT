var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        var Assets = /** @class */ (function () {
            function Assets() {
            }
            Assets.navigationBackiOS = "iVBORw0KGgoAAAANSUhEUgAAACcAAAA/BAMAAACRCMzwAAAAAXNSR0IArs4c6QAAABJQTFRFAAAAAKf/AKP/AKL/AKL/AKH/S2WhQAAAAAV0Uk5TACBAwOB5MxF5AAAAU0lEQVQ4y2NgQAXCAgwYgNHVEVNQJDREAFNhaKgjpsJQDKUghRhKQQrRBSEK0bSPKhyWChlMwYIKhFMFdjNHlY5ApY5ElDbYyyWsJRj2sg5SKgIAZD9xjxU9CiMAAAAASUVORK5CYII=";
            Assets.navigationBackAndroid = "iVBORw0KGgoAAAANSUhEUgAAADAAAAAwBAMAAAClLOS0AAAAAXNSR0IArs4c6QAAABJQTFRFAAAAALP/AKb/AKH/AKH/AKH/jAPDRgAAAAV0Uk5TAAoUgNF8rpdwAAAAU0lEQVQ4y2NgQABmAwbswDQYuzhzaCh2LaahocE4NISGCGDXEOqES4PCqAZ6asACwBqwSpiSLIHTKJyW43YuTg+OaqGbFgFSCgDcRQbOQga1WAIAxPhlI6IvlcwAAAAASUVORK5CYII=";
            Assets.like = "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";
            Assets.unlike = "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";
            Assets.comment = "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAABABJREFUeAHtWltIFFEYPjN7aW9u6noptbDERKgHe8qXXgp6q15SKs2Hki5KF0otKLGXQMgK6sXMIESjslgKocIIinqxki4SKnYzBctk0/W2rjvNvzgyszvt7tk9xZnZmZc95z8z//zf9//n/OfM/gxauDiOY+qvtDR45317Xe7JhDmPhxHG1PBrMBq5RJt1Qq9jm2sqS48zDMMBLj/IuvqmLEbPdo/9Hk9RA9hwGJKX2kc5r6+grqb8OwuejyfwQA44GjADdp05JefCzzHXpnCsqW18enbW8ran366HOS8Gl5+bjYq3bkaJdptYrPi2a9yNbt3vRB/7vyxiAewsLHiLEr6hRvCADxwK2MQXYGcDV3u1eV4MOBAbYGfFN8RjWyMgHr0uxqxFgJiNeGxrERCPXhdj1iJAzEY8tvW4oN+870XtHU/R1PQM7qP//H7+jI9yV2Whfbu2IaMhMmjYU8D56BmV4IFd/niL+j4NInBSpBc2AZEqVsp92ARs37IRWcwmKvHBFFizegVavy4vYvsimygidaAc5wWiR6lsYkcAlShiMEojIAbyVPGoFgGqcGMMILQIiIE8VTyKvQ8gfRYQNi+wfzfodf+dVOwpQPosAPv33oFvqPtD5Pt3kixhE0Dy5TTowiaA9FkApkBezkpUsDby/TtJ4rDXAO0sQJJ+CnRhTwEKbCZqgkYAUToVqEyLAAU6jajJWgQQpVOByrQIgApKseOgmkqtVyA2wM5C+agYMJSSBd4oHldqWyiTE9vvL52F2lleeEwYgDq6uoZrQjfo99LZo0EyOQF8N2i5+9D/d5XcOA0yo8HYxELhMNTOkjRo4OsQanM+pho8YK46tLOK5Y+jHBQOkyJhZHQMNd98gLzeeZKcEtUlFEsDdv9xGKqm+S8zabGWy0+4p1Bji5PKf49DlsuHovdI7UVJlvjbGuCZ86LL1++gweERibqM9JTWmorSEomQog72BxE52+G73o3bHUHgM5envao+uJta8ICFyEYIKkZ6+j5LuFmWmjyU7TBskAgp7MRMQOfzLvSi650EmiPJ7v41w+QVFRXRuxIuWBwTAZDrO568lIC3J1jnfB5f/vmqPZOSAUo7Ua8BcrnebFriMzBMYS2fVSjFG2RWVATI5XqdTsdZbdbiM4fLXge9hWIBNgHyuZ7h0hxJp09WlrZTjFXWNGwCrrY60ZhrXKIsI93Rxuf6cxKhQjrYBAwO/5BAy0xP7aquKKE610sMDujElAX8uT7VWBigU1HdqAlQUq4P5ZGoCFBarg9FAPYaoMRcH4qAsBGQYLV4BQWsns/1ZvOO2hPlisr1gv1yv2EjwGo17ecfbOQYxNkspgOnKsvuySlSquwPlhhldlRdYNwAAAAASUVORK5CYII=";
            Assets.mycomment = "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAAA4NJREFUeAHtWztvE0EQntnYPJQICYkCIUIHjQV2h6ipQGlIAQ0FUiANtDxDFxr4BYCSDokCUSKqFFRUKDQWEuIVsIA8kEOwCXHOPmb8uLuNze3ZnHO759si3pf35vtmZmfOmiA0m23bmLrz+iIATtgAGQB7pLUWj08sIUCecM1at3MziEgwCS3/Gb6X3/+nsvmISDjJ47g3Aj+3a0f6fPla5rtgzQ8SeFYuK7qJGXFoev4S2cLDuGu9Ez4y/8kU+zxx4q7v3gP23lGwU2l3LgY9tDYBi18A1tc8aHBCNC48dy6O4BkdK5SxeRtjF7Qk3fZx07wEuM2q7REiYLBbQsBg6x8gsYDEAgacgYF3AcoE/dupA5QnnwA4OOy/T7fVQpny3JcAz7/6S6a0ABPBM2RWGMuuakoCVAeYvq4kgM2Izcm01nIBldzKO4B9aPSp6hhz15UWYC60YJInBATjKb67EguIr26DIUssIBhP8d2lzAP6/S7QSlhUOXu/VKB0gX6/CwTN2SMjoF8P1uVcpQX0+12g5QJREaK8A5J3gahUs03PVbrANskR2WMSAiKjXpMHJxagiSIiEyOxgMio1+TBiQVooojIxEgsgKrESl76uZoqrq0dG5ZEo3zUhcylZO0b3XVTe06ZnAcAY6e3QXuW5o4781RHh+v5Rg2tM+l2aody7sCnh+VVwB8LtMNTg+izP5IlgTOiWTg8F6YAuFEm8J+1Bs/1wtatY7OCq6a5cJgnwiABrQ3A5Y90VC2M4/pyRqtYmrGTGzRa0HJ5PxfAqgW4+BbAqrSO1ejTp1zeT0oxPS858b8IQLtG4N8BVH7Lxwm8UZvK3ZUn9RmFkgewGeEKXXhbwKPABzqDZzWEQ0CxQFXYPyW1kn89Gz+cvSxNajj4bwJwbQng14oEDQFf7duJ556cxaq0oOFA+auwn8z1WL/6Td6C+Imiytji1YwRhTU9W0DHWI9YTKWHTvP/4sis6DvqiYDOsR4rQogzletH3+gLt12yrl2gHuuX3lOeY7mn1RMKvECZ1Qt30oxe9wQsf2hPdBBuVqeyj82ALEvZvQtsjfWI93WP9TJkedQ9AZ7v12P9kewVz5Rx3Z4JMCnW+2ml6zugfphhsT5cAlCUUmlhVKz3IyCAC2DBOQCFLQSOmRbrHfk7dJQEoBCT9K5XoN/IFlCkx02M9R1wO1N/AdbeDi2ziqzrAAAAAElFTkSuQmCC";
            Assets.editImage = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAAXNSR0IArs4c6QAAAbtJREFUSA21lU1OAkEQhV8Pmrj25xaCegVw58KdJgr+nMAVLryAMe5dGBMDKIkcwSBnULwCO4GVG6NYvtK0TM8I0zLaSaemuqe+V11T6QH+YogYVOUEFelwlsNIE3YmehYJUMUFY/e/4w2OsWOO1E8vUJVLCPa+4fYhwClK5nDK+hNbg1vGliiScRjvKLNsz+lPoNSabFDgmtNN2KATOKqTOiXTYOgm52sEcRbxPdyKrLBTmmjIbOztiqyzLC/cF9pz3f9dia5lGW+4Y5zC7zlXsWt6tMNRkzWWqogZzg0z8Bdw4RbYxjQK2DJduxC1ft9A4QM0GRwtS44naqEu81Gw9ZMFarL0CRfM2SDHCrIUuXHWQs54AYULaz4K/gV6ojkIMZ3H0d/AB27QRYA8iubRoYacn09Ql1xi5h5w1YkLKFxbcVxZPOEq4JboSrJ4Z1cIRnYFI7q8ELQ12wpIGkMBP3iP8LwvXMW/SuQLN/6Z25Ppn2iRJWlxYcEuxqxBj6Up8H5/iO0lLAT/CVdtvb/HZ57hhbb9+8ztweJtaneAPv9RCtdbc+IxSqD/2Yop4ZrVTwJ9rqfO3B75A7THlDrp4UmvAAAAAElFTkSuQmCC";
            Assets.chevron = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAkCAYAAACTz/ouAAAAAXNSR0IArs4c6QAAAVRJREFUSA21109qwkAUBvAkSnGhiyx6AekNFIorRbxQl93NzqX36B0KWXoIEXqBLoq40sR8wRma+EzmvXkZkJA3me/nnzi8RBExPsz2DS9iil0aNFfcg6dlPV2sNvE++/5tXsM5rwH/wm1GMOIAIlwFSZBijBkOkuGrTSSOU+lvEtswY75eTsnP7JpfJrZGHI8783kg6k9LDsAVfSA1oA/kAdBGSEATeQpoIa2ABtIJhCJeQAjiDUgRFiBB2AAXEQEcpNpNsUAy8vza+QY7L6BgbIp/0XFeRMWYmr/Xqp2XDXDCAbEAbjgLkIR7A9JwLyAkvBMIDW8FNMIBkH80hKPD8LnPEdI2Hm5TG67VvtQA7XB8Mgf0EQ6g6k3ROp6S81zra0GwHRWQZVn+vlyPymJqJxpHdsto17vuGs8BeB4gEHE4EAfghECCwpFJDrTq0na9GXgDuCcssrft97EAAAAASUVORK5CYII=";
            Assets.emptyState = KASClient.Assets.emptyState;
            Assets.cancel = "iVBORw0KGgoAAAANSUhEUgAAACoAAAAqCAYAAADFw8lbAAAAAXNSR0IArs4c6QAAAY1JREFUWAndmd2SwiAMhTvO7AP6lnqzD7g33RNs3FgB8wfaZQahkOR8BrRMuyyirOt6Rr2gfonhqV3S3hjOVWFMEuQPKpVv1OmwpLlpoyksj7AYlJBkRGUqLPQkZAHAByXuBkudbQDNU5kCC9UaJMPcYHF15ZFGOxQWmj1IRrosSsMhsGZts0P152gbdGu6HW18xTqsFQ6ggE7TSAtUgU6PnR4Q0CNi5uwjkdFhkKyRIZARg3m6bUQo4tuFak16BD0+LX3TuEXYYmuC0BobAOiW2ytDbskP3wPqmkPEeyGZOAA7PpMMya0Ddj6kAzYMeWLRf9seYukdkHApJbwF1CsPuc//e1JCUtao9sq4zEJVk8kCYLFVL6XG0CPs8dGwNG0ighHfJlBtIkMoI0aN7T6WKZAZ6w5InRGB02OmBxQpSIudFkjA7bthjXCAPVHn2q3lduzAvJoya5odXhEY5k3aMD7Mg9xjPBqnlUJWa7DjTjiV7dHYBn8vG9hnBzsVUjDIE9ozpDCkzH7kC7Ff3A9D7M5G9BsAAAAASUVORK5CYII=";
            Assets.dropDownTick = "iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAAAXNSR0IArs4c6QAABPBJREFUaAXVWltoHFUY/ibbSzYaYYtFrVpbTLVCX6xKFTVNtKn6oDUopdLog6UICgo+CL4FBB8qxAcRQRBBW8EomiI0mqBtY1rRFqogEjFQW2hrqzViarrVxvH79uy6M7Ozc9udzeaHszNzLv/5/vNfzm0t1IMG7SwuoAc2usluNVMHU46pnUk0zTTFNMk0AQt7sRij2Gyd53dNZCVuvcvOYRab2H4TgW/ksy0mrxkKMsI2u5Fh2mpJwNgUX4BP7DaO5fME/QJ7K41w7I49DaYpzA7qbAAPWjOessDP6AIM2hmayTYC72e6KpBr0kILpyhIP83rLZrXbBQ20QQYtK9GHkMEfmsUpjXXsXAYrXiYQpwI4xUuwDv2OjL5OLVRr4ZQ2gB68YT1dbUqym8JKsROu4/A9zUcvEDJTNW3MARQdQ2o4SzeDWjbuKIMHkeftdOvQ38BZDaSHrTE5qA8nbvLz5wqBTAOe2hOzCZosOQTrbjN69huH1CoNNEmnTAZBDCsTD4hbMLoILcAJs43JlQ6QER+VRgXRgeVTcjMsJNNZzoOsIVXmVKOa63ijF3WgFkeNJ/peAWQKQlrkYwGtDC7iGPMq9fapsQ/rec0FuA6LQCNBsyqcr6A16C0F1fC/8/EWhY3nBZx+LasSNxtAbPFsJTFefxGNnHX84l7VsNLFgAfdQEblwGvTwDPfgP8G4/jDLK4vKWwk2ow+CWLgM97DHhhfoZ7uF13AwvLMTGKKG3C3sKw2R2ldr3qXEM9j98PrFvq5rhlJbVwkzsv9IvYqcjCHja0bj0q3HgZMLIBWH5pJbc3fgRe/aEyPyRntaJQR0iluhTfsgT4kiPvB/6l74CnueqP6QPC1SEN6PQgVbrnSmCIhtq+0N2NbQPPHQJeoxMnpJw0kCj+5+iI73cCN9AsguiR5cCeeyvB/8Ph7huvCby6bTcTWRACn7JlWWDsPmDzCuOQa2kefrR9lRFysWv9CMxc5FnMF8B7R/1axcuTADp0ikyrqK8DDwBrioa3lFuefRSm+wo3ixfXAG/eAWQ8QzR1AdgwCgyfdNdP+DUt9rEOlG7maCsUOkm2Pczo0nstuHECBrggf3mts4Z5P8kTn87PgK9+rSxLmDMlJ9ZxX0dUBoPHgHM0gQ/XA1m1LpLM5APmjZ8B1tNpvfTTn5y4OPI//+Utqel7UhqIHQP2nAB6COaPv92dy1z8wB85C9z1ad3Bq/OJFup8rxtGtK8DNINOgjoVchC4/xegiyegZ/LR+MaqRew1L+ZWclYd7QGu9wnGQ8eBx8aAPENmClRczOmI25wSJ+rj6DngzmHg29/dzd+mZz26PzXwihYjOp6XD4h2m0ey39M0jy5Gl7HTpv0r3wNPHgRm7WT8IrYqYFbU41q2PlvKVg7HQwylilQpk2dLqcsFnc/XSLL1BoCX+ewoXYiUTEhLugEW6ES4uckcqwyUQJYF0DmLhf5SQdM+hdFxi1MWQIh1M6LLhWYlYRNGBxkndmRwk6/bmHl6uCtBzLVOL9/SmDudQxXnXVh6vSfTYuA2oRJLXetksL30OedPYaly1eQvgBDrRkQ3I3OriXwBQ5XbGcGs9AHlOqnJL/nCBZAwTXzNWt2EnFqQY7fidnrMU6lOdpqk1If6inBHLIjRNOAUZt7+1cAphN7n7Z89vILoew7/bvMfy2FbsoAtOD4AAAAASUVORK5CYII=";
            Assets.excelIcon = "iVBORw0KGgoAAAANSUhEUgAAAGAAAABgCAMAAADVRocKAAABO1BMVEUAAAAhc0Yhc0YgckUid0kgcUUhc0YgcUUhdEchdEYgc0Uhdkchc0UhdEYid0gid0ggckYieEkhckYfbUMhdEcgbkMidkggcEQgcUUfbUMhdEcgbkMhc0YhdEcjeEkgb0MidkggcEQidUchdEYhc0YhdUcgcUQgcUX///8hc0YfbkMhckUieEkhdUcgb0QgcEQid0gidkcfbUMjeUkjeUrn8OvT5NrT49rQ4ti/18pTk3Azf1YldEn3+vn1+Pbe6+Ta6ODI3dJ8q5JhnX1cmXcldUn8/f3N4NXG28/C2cyhxbGBsJZ/rpRln39im3xZlnQse1ApeEzu9fHq8u7l7+nl7um61Ma00MCnybeYv6mSuqSGs5p5qY9yqItLj2old0qxzr6Mt6BvpYhem3pQkG1NjWlDiGI/h18+hV4W4wn1AAAAKHRSTlMAxFpnzJhSMyasj3VhSD8XD/Xv6eTe2tTMv7mzpZ+ZiYN8bzkuHgf5UPCBkAAAAlJJREFUaN7tmmdT6kAUhgXsXsu91967WWEVWyJGQKUpKsXee/v/v8D1nMUZJx/Q8ZzRaN4vkOFln5wk2+ZNhSc3arwmUN/1v4JFo/6BnrZJpdlZ6qZrq4d6O6aUVOvEgObG4arOieC0EjWgZSRQ5fsXBFEDav7Ud7dKoRSkBtRWD9a1SxA1YKyxoa8yHJ5RogY0NwX6K/+GQqFwmAcwPzcXAn0AIMrJ52cEoPzcAN+nAEY5qf96AA/wvscU2nojD+ABvg3ARR0tF7GsFcO4JwPYG6YZN4zjEmAF7BHCClbh990UApJovyO8yQk0JBBwAAcbpE8RXpQDADyl4WCJFHAOhrT9AjjWBZACLvfAcaoAxRgWQNzRNsERV4Az+LZO3ZMLO3jeQuDtyJMPFSdgORJ5+Fyl78l29MUSK16BNUkPkFnwbMOlWuQYix7T0DQ4cxwAeQgmoPDMBxevgBwPQEa0z+Ka0c6174QLsK59C0UeQN4oaZMFgAVgCSkOQBLnSSyBox/AtBld0iXQA7CAQxGHzy16QEYP11tYwjI14BYcGSkKMSyB+ibjIHcjhcjqEmgBCVwYXSrAA5rXaAFYwDUsWyKlEsgXXlEbANu6BEqAiROyBEAKn9T9ZTqAPucLBIhTXQIdIGuae2olITWgENMlsO0P1jKWFTWMM+4dju3eLdSP3cZ6gF8AcH9H8wBfD3hPfuDyBKRMhkMdcw1zxFzODLChlyGoc0bG9FGjU+McYalTLU1Mca8zQ+10ADgi9zqGyN2ZY/O8NOBM4tVrD55co2etzmYR6uGwSQAAAABJRU5ErkJggg==";
            Assets.pdfIcon = "iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAAAXNSR0IArs4c6QAABlBJREFUaN7tWVtsVFUUXefcx7xnmA5TSqEUKKJWChHBNtpKHzwCQohRI+iHr5io+EMkPrAmGCUhNQqUDzUhRhQkBkJCKRgFFUQlRIFYCUWU0iKMFKHMdNqZuWfuvduPQsvQTt8MbcL+vHc/Zp2z1zr7ngFu220bkLGeHCorKz/Pzs7OMU1z4MUYQyAQiAeDwYqVK1fuSQnC6urqWhpEO3z4MO3evTuycePGxwfj9/GeHIhIDOaCxONxlJSU2CZNmvTp+vXrH7npAAbbiAgAMGvWLGdeXt5na9asWTSsAADANT6VlJS48/PzN61evXr+sAJwvRUXF3sLCgq+WLVq1dxhCQAASktLfUVFRZvLy8tn9zVWHip6Xlpa6ieiLUKIJRUVFT8MOwAAUFZWlk5EW4UQS9atW7d/2AEAgNmzZ49ijG01DGPJhg0bDgw5AIZhIBaLQZaTly4sLMyIRqNbZVleunbt2gNDCoDf70dNTU23ABhjSEtLG52Tk/MBgBlDCkBubi5yc3N75RsKhdQhJaOR2mOInqpJeBY78ycu7/4S2vn6rtqNhhQHgj9UgVussE2eCgBoOfYzLn71ESxjc2CfnNevnCkFwBQVTOnoiuD+arjzyzDykWdTPQsRSGgds00sCtLjXXvGBcxY9CqCjnKmFoMpNHC7E6YWA8hM3Q4Y0QjOffg6fPOXInz0IKJ/HQdXLUh7+Cm4C0qvjZ24sm8Hgge/BgkNjrz7YbSEwP0ZoLjA+cq3ET1TCxGoR/Mve5H5YjnU0eNSswOMCHrTf2j6djtcM4sx7q0N8BQtQOMXaxE7U9vWHgeq0fTNNqQ/8SLGvVkJZWQGIiePgXEZTFaQ+VI5bOPvhHfOo8h6tQJK+pjUTqNEBE/hPDinFUB2e+Gd+yhsd+Sh+dB3ABGC3++Eb+FTcNwzA7LHi7R5j8N+170gXQCMQXJ6wGQV3OaA5B4BJkmpA0AAuKzAMmZCwnPFNwpGaxhmtAV6OATr+DsT3ksuD0CUmIloQMLQ/3OACGQaidxoaQa32cFkpY3oce0GQsd7c4+QAg4AMI04wr/92P5M/HsWkT9/hzMvH0y1Qk0fg9ChfR3vG88jcuIomKIMKoB+nwNctUIE6hH46F1whxORE0fgmv4g7FNmAgBGLn4agU/ew7krl6Ck+WGEQ5A83jbJvLYjQgMZeuoB0NUW8i1+BvrlC9ACDUhfugzOqQUAa2sRe+50jHtzPcJHfgKTOHwLnoS4eO5qcJt55z0GxZ95a3YARGBcgmtmMVxJXNSMLPgeXtpRzJee8N5130O3roVgmm1EbeNEownofeQRY8AIAPabDaCTQEuKAqs/A6rVBiKACa3on/dX6JKs9ErMLRZAc2c1ZT6/vIIDz/eldp8BEJMaTMCZKPgWZL72oUGMcYMQF3UnROTv4/tkhrG66OEijzGQ046mf/e+4H56ecApo6G72r1RxKR28rk5mbJnhN3icLCul1GDJkvkvth84VJL46kR0wpGO/JLEybOG3mjhy4jumsTwq3Rl93Zk7bJEvNqmtalu9baSnooGLnr072B/u0Ao52sJTS1NXQlKXoCYo2yMp3rum6deDcsWRMRPLCns96bBO5wwVu2GJE9W2Ayam0+W7fCLkvLI7rRZX5F4gCjGgAz+weASGGAyhi6A0DcMNs9onUncanqc3CrvRPpZV86PA/MuT6BxFj3+UGk9J8DjBEhQbqTHgvtIZIEbrGBW6ydAHDV0mUwdZeYMRryV4s3TUYJpCicd6sAwjRVZpjty0SG0fYFxjqfG6aI3RgvKZxD4V0vssI5hGn0v4UY8VpdjwuhxynpUAcmYnFJWECMTBPu6YXIfqsSuHG+J4CrFnC782os44bQzgoyj4ok8xCTFcaIn+63jALA9l277li0cKEtqYMANW+uqL908OvTnqwJfiV7cvs43VVTG5EwcPIIgqGWZb6P9+902eBLlnpXdXX0sUWL/hrQQWYBdqjAlKRtpiDumLUgp/H7nYfCZ06N0k/90eME73I4EK6v/XusijdU4JVuah8HkDfQUcLs4WCFLWfKlAmbf36n18yLAxkAUySMHkjtwboXUgDssfc1IlVfZIwx9VZJZG9q97gDdXV1v1ZVVTUNxh/dfVpZztHQ0HAat+223Vz7HwL8sXv5FT6mAAAAAElFTkSuQmCC";
            Assets.pptIcon = "iVBORw0KGgoAAAANSUhEUgAAAGAAAABgCAMAAADVRocKAAABHVBMVEUAAAC3Ryq2Rim3Rim5SCu4Ryq2Rim2RSm3Ryq4Ryq5SSu2Rim5SSu6SSu1RSm2Rim4SCq2RimzQyi4SCq0RCi5SSu1RSm6Siy2Rim6SiyzRCi4SCu0RCi5SSu3Riq6Siy3Ryq0RCi5SSu1RSm6Siy2Rim7Siy4SCu3Ryq5SSu2Riq7Syz///+3Ryq0RCi2RSm6Siy5SSu2Riq7Syy4SSy8UzjBYEb+/Pu5Sy/89vXGbFS5TTL04t3x2tTqyMDnwbfhsaXeqJrPhXHMe2XKdF7EZk6+WD7z39rv1c7ry8Pow7nboZLZn4/XmYn68/H57+z36uf25+P15uLcpZfTjXrRiXbOf2vKd2LCYkq/W0G7Ujbx29XmvrPeq57TkX/f2JYOAAAALHRSTlMAw1oE8KCJZlMi+vZKQzYwEQvq5N/b1tDMx725s66om5eRg3x3dG5gPSkbFTvvlIoAAAINSURBVGje7dpna+NAEIBhy04vl+R67zW3k1xs+VTce0/v7f//jDgTEWwTZ9arXdDCvp8WBHpAgpXEKGbSsbUns1/ePo2pKLESn3n/fAOLSW5+7tvHl4ubG5hcYH35x/TrxU1MMrD6e/azNZXEJANrK79m3j0DTDKQ+DP39cOLBbsfyAbml75Pv1rYwiQDf5d/fnoz9e+2LSVAKpXqnztiAFBZcZUAFlcNWKEARgUABjBANAC3XintqwTgtuOsAmC3WK6dBQC4B/IBPBwA/cqObAAGABRUA1ASAOx0hh9ws/xAqXiZbzZ2PcaYk7s65QPgmB9gwxVdLgD2RAGWt7mAkjDAulxARRzwznmAswmBnVbhggVd8wDuhAD0q2UZ1h4DDCcAwKmD631lAORx7TwM/B+oJggE+2SGfC+qCwI9XqAqCHSCS0QCXUGggOs9GsiJAWkP1wUS8JkQ4LYZdkgCrcmBw+pJr8Gw7QwFHLGJgNF6SQKoeaGApk0A/g4LAzTSxAfIkcfCAO3z5KOA32JMHHDyJw8/9HOdat2269VuTniz8yvlip8hXh3D76YGiC4AYzLAfenhbAjS5yaHAjrFQjO7HY3vZI0BGJMBSECfm2wAA2gAAJ2l+fzAikd8hhOtMRcxqFMwarRpIOzQe3RYqtu4d7D1JWJgLaUEjtyTo4BOPw0MtHr324NJm24AUs+j6lq9JIEAAAAASUVORK5CYII=";
            Assets.wordIcon = "iVBORw0KGgoAAAANSUhEUgAAAGAAAABgCAMAAADVRocKAAACFlBMVEUAAAAkWJwlWJwlWJwlWJwlWJwlWJwlWJwlWJwlWJwlWJwlWJwlWJwlWJwlWJwlWJwlWJwlWJwlWJwlWJwlWJwlWJwlWJwlWJwlWJwlWJwlWJwlWJwlWJwlWJwlWJwlWJwlWJwlWJwlWJwlWJwlWJwlWJwlWJwlWJwlWJwlWJwlWJwlWJwlWJwlWJz///8jV5sZUJfCyN8bUZhDYqP9/P7IzOMiVpsUTpb+/f44ZaQkWJwYT5fKzuQgVZoUTJW8w95EbalDbKlGbqo4XJ8dU5nL0OW0utiqs9NDaKc6ZqUzYqK/xt8wYaHQ0+e3v9vN0OVNc61JbKnf5vDF0+W7wNxZdrBKZ6ZEY6MqWp4eVJnz8/n5+PzS1eg+ZqXw8Pfr7PTV1+koWZ2SnsguXZ8wWZ329fpuhLg/aacgUJj6+v3JzuQ7ZaQ/YaLu7/bn6vPg4e7EyeGnrtKaqc6eqM6Yo8uBncZyi71oibplg7dkfLRSeLA7YKEyW5/l5vHd3+3X2euBkL97jL1cfrNac64pWJ0pVJokU5kJRZDj5PDP0uajtNSkrdGWosl+msWNmcVqgLVheLFSdK5Sb6slVZvd4u/Z3ezU3OvP2OjEz+O6xt61vtuss9WbpcyJnsded7BFZ6YSSpTN1eewwtuvvNivtdabrM+Urc6TrM6UqMyOo8qJnMWFl8N7lMFzk79Oca1NaqlBZaXAxuBhZct4AAAALXRSTlMA40jdM7tGEDmSBfVM+cn96NiqaywL7tTEYyYgFIp0Pxrlzb2zr6Wfg3laVkecfjRlAAAGVklEQVRo3u2Z91cTQRDHwUSKgCKg9Govy54nnMmFCyVHL3ZNIJGQ0AWk994Updt77/0/NDdHIrDkDuHyfD75/BKWS/a7u7Mzs3vjtcUWf4kdexKifL08RozPkZDd+9ReHiHsaOz2naq9CHn7Kd63b3yo/4EIVQACdisrEBUY5x+yMxgBCgv4qo/F+R8ID0IrCQ9TYrNE+x0L9d/ujdbAO9RHguM+UbIDj/ILjDuUFITcEJSokiRELTHwmCh14OH9KiQF5mkJTCzav7aj7ImJ9ov037l3F5KGrSjQuie/oAKp1KR7+ibEx4WoAgKCkCz81Sfp7mm29WHv4yt73xF9LHafKjgAhi4PlZGq0aS4Q1N4Entv8/pNQuShiPBE0YXWK5CWLMGJVQLxScTA5WfwJwKBwcizAtu8/z8BXZbVswJ8/tvzBA/ulyojADAkp7JOKyeAaR3B9Zo0xQTYCnsRAeotVkyArnl9jqSpTLltmmX+F/2A5RisnADLcA54jhVbOr3+Ra3BUInEtm4jS8RyPM/TFI2hgSodGPKuVoitro6OmY+5bT1GZinhtJ0gKMy+4l4AsqDFYslbyDAKCqYCW/v0dFuOrUFoMYb78MOqYSMnzsjYcJnA0GOWEsDjc29yc3OmWvJ4R6P2mbjlpsYYFrF40QqtpkWnFTBNEVyvyZYUqP0CD6+NnkKIGx8WBQarORZhXH0NWvfsvNPRtPkE9lHJGSD9aDk8/aoXVuhJHTSuPOVZxKDP8KjsppFDAG9pK/xZuIr0NOlgR50RQ8mnWoyomuZkQPOKxohj31YJjfJhxCxL+iTSu4i3PIan7ZUc0vc6egQeGDDLofMaWL15hCWTvrQAVzkLT3PyTLi22vld6xjGzI87ogkaGHYTjubsNXWB5vptzune6GQ4PAY21jxCjCsWFW/A0XS9YMqhUZqG1QJKPzImVD0gGhw7BUza2VyClpJy6VBBZTZrhH6+6nVnYICilU200VYKJqh2CbAVBpKJizL5gNe2pAiPP1C6bugRuN9PGx/B/83fMUZLYOoUgWxG4/pnwbtyKyc/C58poqs9o+0v4a+HlZh19m/MOEOQ2TUkLcDcrgbvetTX3yYszhAsafkI97wJ3KyVd02Ar8ktNhev4vRQlZQABGEIh2ln89IdH3XtJwSTVLWOz5eL+4ljfyec+o3kA1pbqIFo1HtXWKGRadB7aB+BT/MYs1kBU1GbYITGrq46YQa984PgXnntMPX0Pow2KcAZh0uFobd+ghFnNkD4vTOXA7a/SSNgo6ECrNzTCEa4IMg81k4+hLW33dAIxv5CLb9C2XII3hQ2ygiwtZnwlVJhzctm7bqb0DLDfrX28MgFNlryCPp6rBICAF300hVyy+YmqRnQEym8xKHfYN0ajpYve3Q02VsFewJN32jOOSQwwQRePoPnZwks3UNyAlzFiDNeaeq1FPcd0g5Q1qFfcY1tv0BQ0ixxqnBa+dmAs8NbRSY88dolMNhNrTjZZW/o4MVykFrAtMIJRf8e7AtecNaE0Kb8ADAZHyxZuXH+NoOoTmFCwK1+Bm3WD8AITisPaGmH3oIrMz6tZZU4/DJopAm+UlciHIG4hpxkkfIuHVoGb2lJy05bRapZ/o6G8digaAKbcATCk63JIqnfKLQMbKzJIsjvtsoKsEzfXfHAVQ0JXj+zZOWWPhNaDqPTE8g7GpxQuzpmOj7kTj+HI5Cu2zrQJIRW2wSzYgb2xYsEi513ZQXgJvBCP2HoHxeNfrW7s7Pj/bt3C5Psyjtay2mCNOu678mYc+YWhqYoYTVMq+9oU//iHY1wNM/OIGUNlBKAaFpCkNN8RcFXCUUFBBW9ZgUEJF7MvsjMVkwAGy9fImiYsypnA8utbIJ6q3IvpHT/5suQTbyY3ethgXh4n+9BAd/AIwfDg/cGeSoWQfEgxi/UUZgICNql/AxcIr4Jjjrcfu9d6/OD1PpUd0w9aXAKkPWb6DDHeiUFyHqyJTMj0x1Z+UYosbhjT7R6m6O8lSipQFMS8BgdlKumJqgDQ2MPhLtbr4Cd2yXYt91/XYW8PWE+oYdDkoIRiSpSLUmM17qJ9omMDYlQrdrD4WplK7F+Rw+HROwOJoqlSpdkD0XsTgwiBJQtKjvqhI5yG1J5SAAKhmEOkQi11xZbiPwCUCn0Bis071YAAAAASUVORK5CYII=";
            Assets.documentIcon = "iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAADOSURBVGhD7dLBCQMxDERRN5TU6JMbci1uJCkgQWBBEDoskkcLYR7o6t2P1IjAeu8fwDz283jywZPkvTHGuywCEbDWkohXSQQiQJRFoAJESQQyQMAj0AECGlERIH4invvTZ1QFCEhEZYA4HuF9cM55eSx57+rsX8iRh+7AAPWXAd6tZ8fiBhQDgqAB3g1nx+IGFAOCoAHeDWfH4gYUA4KgAd4NZ8fiBhQDgqAB3g1nx+IGFAOCoAHeDWfH4gYUA4IYoBgQdDTgrtm/QITT2heochvXFQEVrQAAAABJRU5ErkJggg==";
            Assets.crossButtonBlack = "iVBORw0KGgoAAAANSUhEUgAAAC0AAAAtCAMAAAANxBKoAAAAeFBMVEUAAAAAAAAAAAD09PR5eXkAAABKSkoODg79/f3V1dUAAADCwsIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADQ0NC8vLwAAAAAAAAAAAAAAAAAAABhYWFCQkLw8PDb29unp6cyMjL5+fnn5+evr68jIyP///95Va5FAAAAJ3RSTlOAAAX0p3eVg/zaV84dDEdkPjIQJBd618ptUU83Kp2S8d+9jvjpwonujrEgAAABeklEQVRIx63V6XKCMBSG4WNstKZJgIDK5tqF+7/DBgn5hAZoZ/r+Y3xGzoThQKu/9B9aZak07BeapTqnLi4SNatNuadBUTqplYaFl2Fdww4qWEDHNFWkxpoJmo7LkQYOcgONMSbL2ZOuaSkBrfZT6Ou0pa7Ka02u++5y3BJ6eW/WZzc6c9pQ36Fpmt0W+NVeH91F7HRJfR9Nx4GhOXtohqlvjePA6zu5kodOCb05DrzBsTy0pgAH9nHW6pwCHBjJVhMCbzxGidWKQhwYxVZnFOLASBOOBL10+rqlYcJqSQjnjHNHpdUmgMHHk7AQXh8CvLJ6xQN4g8eE6laLEKYAV61OcL3x2PMDXv1VqxX0zWPwk384VtsiDNJjcOis0yn5Pi/XM6Hj0ySify8jmuqMG2W9lrRcgX1SLGJuoFm0pOXzZlN8HifDrSlnuR7vb5Mv/DM0Nnh4e0OjKjhNYSa+aSz+4UU2871kieCgUQwLPYjJJNai1FWtxj99A9QhJkgUTQV3AAAAAElFTkSuQmCC";
            Assets.tapToDownload = "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";
            Assets.retry = "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";
            Assets.audioPlay = "iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAMAAABg3Am1AAAATlBMVEUAAAAAof8Aov8Ao/8Ar/8Aov8Aov8Aov8Aov8Aov8Aov8Aov8Ao/8Ao/8Aov8Aqv8Apf8Aof////+q3/8+uP/j9P+/5/9qyP+O1f8cq/+oiUAQAAAAEXRSTlMA9eZeCezby7evj3xmTjcbEUzq1cEAAAEPSURBVEjHlZZbjsMgDEVtXgFS0jgzncf+N1qpqkqLicHn+x4lgLEBhis5Bo/oQ8zFwYDdJqQ3MNldiLsViYHr6WcuhrqYC/S4LnTKcgXGZkjAbNBgkUTQNnka8mFsOBZwe1uvoQlMXflCUyyv/adJnufhzKxg3ENYaZr1UW/NDv0LAu6dI/j6+ZYPI7XCcZwrCcAhF84VdFCIC4JSIHcEQckQO4KgRAgdQVACeEngigccCMftw8CRcPtt9lX6pRqveGnRNV4JvW2tcU7sHVyNc3KvNGqcUzrFJ8QJHS/vvxrnJH6BZCy7ojK4a5uAus1oG5m2VaqbsbbdaweKfmTph6J+7OoHu/7poH+cqJ8/d8Q2dr8BWOcuAAAAAElFTkSuQmCC";
            Assets.leftArrowAlbum = "iVBORw0KGgoAAAANSUhEUgAAAF0AAACoCAMAAAC18BJbAAAAflBMVEUAAAAAAAAAAAAiIiIAAAC+vr4AAAAAAAAMDAwAAAAAAAAYGBgAAADm5uYAAAAAAAAAAAAAAAAAAAAAAADk5OQAAAAAAAAAAADa2toAAAAAAADKysoAAADi4uLe3t7z8/PW1tbS0tLFxcXOzs7CwsKxsbGKioru7u6ZmZn///9O5EpjAAAAKXRSTlOAAHeJb8sHRYJlDoY+6E9VITRqKuZbFwveXhrTOeTh9NvYz9bNw6/vtuRNAs8AAAJ4SURBVGje1dtPc9MwEAXwJ6FKsSpsyyJ2HQwppSnk+39BOAB7aGij2m+m+44+/A47mrH+7CK03b4ZnAWsG5p914bcR7NRcDG26VKJDF3i2hIZumRoiyfoEtv2DF1iw8jQJU32RB2wyVN0KdDE0CUhUnTxPVOHK0wd2EemDiSqDndg6kCm6thPFTqjOliVhaqjo+qYPVNHMzF1uMjUYUemDtszddiRqcNGpg43MXU0nqljpupoqToyVceBqjvP1NFRdWSqjpGqD1QdC1W3kamjo+roqbqj6khU3U5MHYmqW8/Ukai69Uwdmapbqo5C1Weqjlirf3g4/vhZtygr8I/n33mq+klV4ue7qs1NBV6nB9Gvxs9PVUu+Er+p+0cxcFk1NByN6NvjgDeGgUvhGbisSQYuhWfgUngGLoUn4siGiCOYl/BP63DsDRGHM0QcMEwcIxNHYeJYmDgCE0fLxNEycXTPvtz+xR+xOjOe5eaP/uV2td6AyQ+4kMeteAcm78DkB1zOwyZ8g1f4r2v4GUy+A5Nv8f98Xs0HMPkAJr/gKv7ubXwBkx/B5A1eye4fv9twtyT8d+Hrd3pEPhhU8PeVfDYg8r3BVfy3N/HegMHLqaySP9WdKCv547anYeFrdV+hY3cvldnuFkL40/F42tXdoNDSM3VrmHqg6gemPhimnt7XLfP7uSEvel8mst4XoaT3JS7pfQFNel+ee7Uv/jaq7bQY9Ha4ZLWdRc6r7ejKajvpZrUdjG7S2jlqR60du3bU2indTFo71DutkwHuoHUiY9E6CZOUTiC5onTyK0SVE3c2eY2TjjaMCidMh7Z4XZO9W00lcyeqfwHtlV0Td5FCKAAAAABJRU5ErkJggg==";
            Assets.rightArrowAlbum = "iVBORw0KGgoAAAANSUhEUgAAAF0AAACoCAMAAAC18BJbAAAAeFBMVEUAAAAAAAAAAAAAAAAAAAAiIiK+vr4AAAAQEBAAAAAAAAAAAAAAAAAAAAAAAADm5uYAAAAAAAAAAAAAAAAAAAAAAADY2NjOzs4bGxvm5uYAAAAAAADDw8Pk5OTg4ODc3NzT09MAAADy8vLHx8exsbGPj4/29vb///8OoutaAAAAJ3RSTlOAAHN9EInLQ4QKY09JLiLnVnluGGld3dWG6DkHzubj4Nkn89HDsvYAZ7aHAAACyUlEQVRo3tXb23LaMBSF4b9bSoyPNWDSFJI2UNq8/xu2F8loih0QQWvG2g/wXXhsg7XX4kui8d22qftNNdjSObOh2vR1QQK3LfrBMTHGrXJtQUupl229AlDo+94BEn3dGCDRy+0K0OhlsQSR7hsHIt3XDkR62QAqvTVk+roClb4rHDK9M5DpBch0X6HTO0OnFyDTdxt0elmh0/0Knb42dHq3RKfvHTq9c+j09RKd7g2dXq7Q6bsKob5BqBcI9Q6h7k2pVwj1AqHeIdR3ptQLhPraKfUKod4i1EtT6g1C3aPUa6XunVJvQKeXDnR6Acj0cgnI9C2ATF8BqPQ1kjGuux1/H/483V2rWyz++m++312n74mch9fAR+t9vB74WL10RF+ZwMfqLdFzH/hYvSY9H/QVyfmge0jOB73lc/zXuxi9Jj0fdCM5H3QPyfmgt6Tng16Qng96T3o+6APp+aA7ZLzhQcYbHTre2KLjjQYdb9ToeKMnDf88wRsbdLxRoeONgZvn6Z1/HOl2M/74/KbfM9KXOhzD3Yr/CHhqPeBPTOlLHY5hOhxj0OEYlQBP8SZY/HzDf/Gh3utwjFqHYzQ6HGN7G/6Ns3qnwzH8Z/CHS3j4tyTAgz4I8KD3AjzohQAPeivAg+5F+PVfZYuXN/wFgMRflMd3fAGQ+mv4EPBY3V+jBzz9KcQx4IITlMXxcDguuEpvEY0hOmEen7qJ9D2aGZ92ik9qcztl/v+Byux0/2QzkdVW5fR5zWqbNdrE5bRFHP9EZbS9HW+eM9qajzb+WaUVxu+DjFIio4RLTumcs/fN7FNRUZd+rmm0mCTdfFOAlxOMM05fXkyOzjr1eiGxO/O08dmk9OxT3mcS6hmk6z98peXRaphuZOTSJpm8Ovm0eKYaSBm1pyaaXzm11saNu7zagqdNx9xamqcN0/zasVHN3lm3ki80qv8CjPJbs/3U474AAAAASUVORK5CYII=";
            Assets.tapToDownloadDark = "iVBORw0KGgoAAAANSUhEUgAAAIQAAACECAMAAABmmnOVAAAAV1BMVEUAAAAAo/8Ao/8Auf8Ao/8Aof8Aov8Aov8Apv8Aov8Ao/8Apf8Aov8Aof8Aov8Aov8Aov8Aov8Aov8Aov8Aov8Aov8ApP8Aov8Aov8Aof8ApP8Aov8Aof/O4IyYAAAAHHRSTlMATlUGevXZxhPvPByK5c3Ar21gKXioSNa6gEOWmOVToAAAAwFJREFUeNrs1lmygyAQhWGUYjI44pyz/3Xe96BGFNr7kH8FX3W3FuzXr1/R00Vnm7qSpYAoZVU3tis0o4sXS22wlamXgrP0uX4WOErMvWMp063CmVSbbDNjg/M1I4sfzyuEVeU8MqGbEN7UxWSsEteSayzCa8D1hleUTbQCdxItvz8Ghbupu8PIDO5nslursIiTvb4SrRArpa+eg0S85LXDcCViVjoWXmEQN1OEGwRiJ0IVziB+xoXdZIkUlSHXqSXSJPVpA1dIleJnERbpsicNGVKWnTtKg5SZ17WDoD+LFqlrvy9DIHXi60IGpG9gx60IzY4Woa3HVykR2Jsx9kZg8vA2O4SWM8ZyhNYdDWJCaNmlv9t0MIocRAjk+4iKDFHtGkaQITDuIRpCRLNj0CBEQG8jWlJEu41QpAi1aXAgRcBtIXpiRL+FmIkRM/PjghghuI8oQIxA4SMWcsTiI2pyRO0jDDnCeAYNcgS0d5f0CP8yO3qE/8izDyCs/5agRzTeF0qP8L/Rih7hPzTlAwj5iSgfQJSfCPEAQnwi8AAC/3ISf8zaywqDMBCFYUjSRqW1IqEXnPd/zlI3ZzFQhp8sIrgMfAtNMmdmiG/iGlhz1DCiHnfwd6yhNLYEESWUCq9ux4zt9C2EaO40iu2YWzBpKgFEC6ZfGzhFkxR/ESWaddzAfUIKh0AG28HNSgqHQAZbwB1TCodwBpgOzEAhBDHMoO5wCiGQwR68ApNCCGSwD69FpRACGWzhVbkUQiDDJfN8QgohiMHeJKnxCiGAwRrKrLxCCBlQZqWnEsWJIIaKc0yvOBHOwHPMyYDiRACDTTjb9or8e4Fhoym/V/BeybNXvyNxw9qv85P4yo49sAQNr9yzG5iQwfa+fdFEDNc8fId4jF75GFMDQ8xPjDFJMsRMzbd9O6YBAABgEObf9VwsPUAHNe4i47MyjjPivTMuROPHNM5U49E1bmXj2zYOduPlN1QD4jsM6WKYH0Q/IQ7MEHGIDVSUJOJFFTmrGOKqqncDCztVWUv854kAAAAASUVORK5CYII=";
            Assets.whiteEditIcon = "iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAYAAAAeP4ixAAAAAXNSR0IArs4c6QAAAAlwSFlzAAALEwAACxMBAJqcGAAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAAv9JREFUaAXtmc1u1DAUhSdDi5BYgOBx4AEQ25bpdIp4KVawLz9CPABiiRAbWADiRZCQ+CmEc517pJOMx+0oGtuVYslzHdtNzudrX7vJbDalaQSmEUiNQJNqzN3Wtu0VPLNFNl1t0zT/cmsY/TyH6N0nVtfrUNsFBcPeR36L/BT5lumE3atNb1QPhcKukDV9xcXlgIHQuY/6iRD8QvmnX3+Dve196vQMBBJi6aLNnEnZgCzVCwNxYXRh75pSTwrBOoXhNLPIVj5B4Rw5hH3Ya8inyJZ+d2btlzC6ZoI3i9FAYlQA6p+5/E0wXDNPTDz6lvMKHr7vIh6h/Am5N1Vw/RzZUgyGXnnj94gOiLXtNEEcIQ6D1O7nM8xNezBsGGHYF11TD0bXzj3tv1PRw5tDWAyCU+UL2m+oOFyrZxTiWPsNn7PTa4F4gDITxXEKmWeGMFwz/JuiEAyxR1QDSwhWpWAYzY7cE/k3RKgkxDEVRyDYRBibZmHNuHALzXe8nH9x4+GEWFEp7NAT0hSKhLFpFqIZ5zyuLw0EoRgAProXGjQUnU7beIIQ6rGHNUyni6wJiqdViIOSENwnNp1iKThmYxDhflwjWSyUESIVYmMAVqcQh+6JohCxzW6TeNYrxKIGCD07qTgKjlntt6wB4kBUqjipXitqPx47ioRYromxnigKwR17IeOsIyzVa0XtVwXE2BDLNVFkOtETYze7Kk6xY48dDLFFPTEWouhmF47OWLJjIXh2KrJj80XA2IVdDsJ3Wb48e+9BlK9i1mLqoEJDbHaI1H9fPwwM6SIvw/5KvwU+0LwG5D7sn3CHDD8pELbZF6RUUoglxL/KDWHiKDYlNNWmECtAvATEXk5PUNwYEIU4gXh7sWYQZ7x5TpvaoEyoJdruqvtQaXVXvcIg7IVaMQgK61kIYtT6gPJ5qdwBsKd6Nkt55J33/Q6rkcs+GV9HfgxP2EvnujzhorcygBizxrZ61nmdwzSKdYLIjW3efw6PDNdP7FZT3TQC0whUMAL/AceaBRYh0iS9AAAAAElFTkSuQmCC";
            Assets.videoPlayIcon = "iVBORw0KGgoAAAANSUhEUgAAAGwAAABsCAMAAAC4uKf/AAAAdVBMVEUAAAD////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////li2ZAAAAAJnRSTlMA+BdeKhDyvpoIxgTqoIPV245tMyM9Lt+liezkQwuTd81jS0mpqAbcCrAAAANjSURBVGje7VrZdqMwDLXNZpZQloadJE1a//8nTufFpgSE7ACTOc19hcO1rhbLFuSFF174xQhzq/4MkoYKQZsk+KytPCSb4BgHVNyBBvFxbaaON2IWDe/WY3LOpVhAcnZWoWInKhBwU/a4VSkVSND6Qes+IqGB6IOY490TmvDejc1yhTZcy4jKP0xlFc9uNvMJ8Zl9y/hU5nHfIAgvYoQy7fy7FXVpK0YItMPSbkc2HY6zpeVAR6uy9bjy5qcnYgaqEP/0bpRrcblAAiHS0dVgsxsgnFFpEqGVZO3QrIwgkdGh3xgy5odxmGg4u0iGMYnb6Q5DCR2tQjqUkqPqhlA4hJpbeSUULISj3eHitMEHIbkcWN7ALmKAgW2ehoheaNQUeWghnUjFoWO43SYq2+BPpCq/bGKIQuVbDaazei+bTEFcdqsVQ6l9WnDuG85c5bYUkFsaRqfDVlALVSepDP95r52XxP6bD1JKlOvPZA7l0oLENzBSOq6M6dkeW64nJvNkKClj+anjUqmhDCBDScnoUslrVJ0CyHBSVjKxZxoXZTpEhpNSfSyHdS4JRIaUsoX9H8hMBMmQUp7A8hBKn3YgGVLKm3wtnGrf5FMfJENK2cu1FxNPLdmqEJAMK+UF2tVqmRkwGVZKDkXIp9xckGRKSnijqaBgvMFkWCmvkFvkbm7DZFgpC7kaqFgxmAwrJYMKlgxVHybDStlLy6EPEZgMK2X4NGTbybhrgOwa+rsm9a7latdCvOsWs+vmuX1bcFVtwZ4ND9zKteu2cts3qZ1qUv99+73RwWL7I1O97JJkrcMgU4dBxDE3feyYe0Iccx13nQO8jTnAk3Sdq4lAKbTjpYvLcFFEC2KInKqo3vyiTA3b2v55rgB/XG5WJmRfg9U+17UtsYRCpXsh/SVQIirwHa/aiR8IhaTQiPlSf4hAWLn9eETBjvQHP3YgBojejUdaqaM5zG4KrZITaQ3r6tGwTrPU2eWoz65mt9yuGo8htefHLBAjtKdbT0borydgwIpHyMUd6IVn14L1Ydiz4prxy9ToOCQmsIyG4v/DuP8bVqRD1VrkITg1RSsY9+RRsNTd/ucTBeec7PBbjcKRA86L+JGsjDz2JtxHvTgnmyAsrLgK3iL6jegtqGKrCMkLL7zwe/EHCuOTkKLCajgAAAAASUVORK5CYII=";
            Assets.dropDownExpand = "iVBORw0KGgoAAAANSUhEUgAAACQAAAAYBAMAAABglkJ9AAAAElBMVEUAAAAAof8Aof8Apv8As/8Aof8yAeP/AAAABXRSTlMAgNEUCm0C0cYAAABqSURBVBjTbcuxCYBAEETREy3AxArEXKzAFk6Y/ltxL/nfwA0GdnjTfu/+PsuIaf9W11qxPafNfPRCSTFQsrYtKQZKelWDidJrKCs0hjBQg4lgIJgIJpKBZCAZSAaSgWAgmEgGkolkIBnoBY3bKrSdHeJoAAAAAElFTkSuQmCC";
            Assets.addImageGridAlbum = "iVBORw0KGgoAAAANSUhEUgAAANgAAADYCAMAAAC+/t3fAAAAbFBMVEUAAADh4+cAcPMAcPLh5Ofh5Oji5ejn7PHj7Ozh5Ojh5Ojh5Ojl8v/g5Ojh5Ofh4+fg4+fg4+fg4+ji4+jh5Ojg5Ojh4+nh5Ori5ejj4+jk5OoAdfEAdPQAcPIAb/MAb/EAb/EAdP/g4+cAb/FofRcCAAAAInRSTlMAgEDA9+VjERrbsI4J8uzLwLemnIZ8XFNONzAlLunPpZUL09duaQAAAyNJREFUeNrt28tu4kAQheFK0r7fjQ02ITfz/u843W2sMcQoI0Ua5VTOv2iH5aeqdtggn8qHrElKM4FkyqTJhly+KApTGNI6k4aR3C/viwm2or87tjCYoAtC2SqupqWkbrMHkLK2TqalKpZPjcFqW8H6+2YIRrlpb2ZWB6e62LoLYH/jmsG7WGCLd7PhSjYarz0IdIdZMa6wgd/Po4B3nB2xLFX+M/AaXk+okkuhnyD8vFxHv42h+HLPBL9fSwe/fLm4ev8+FCX5d2Mvtqhwi6jggs3FbhmLaLlhnaipW25Z6gYG+n1jq8iNLBXJ56ei/KRyGebJKcrfrUEy91C0iSKRE2XS2DMRVSWW1PizFlXVflalPVtRVWtJpRi/kKrKLMnIZHsQVT04E2FAEYYWYWgRhhZhaBGGFmFoEYYWYWgRhhZhaBGGFmFoEYYWYWgRhhZhaBGGFmFoEYYWYWgRhhZhaBGGFmFo/XfY87NsBw57P5/fZTNs2PPZtj0zbNijgz3KVoQRRhhhhK0jjDDCCCNsHWGEEUYYYesII4wwwghbRxhhhP1y2Ont6X6vDvb6dL+300+Ffbycv9XLxw+Fnc7f7PRDYWonpvaO6X0rEnYTYYQRRhhh6wgjjDDCCFtHGGGEEUbYOsIII4ywXwhT+6MdtT+z0vvDuHsRRhhhYBGGFmFoEYYWYWgRhhZhaBGGFmFoEYYWYWgRhhZhaBGGFmFoEYYWYWgRhhZhaBGGFmFoEYYWYWgRhtYMM/bIRFWZJRkp7dmKqlpLKiWxZy2qqi0pkcafqnKzaiSbbJEoKnKiTAb3CEVRoRMNkhv7SEVRqQWZ/PJUtIuRn9QyuU7U1C13KyrcyGJRUuwGVvgN7B1xJ0raOU0vrjxwfx9ERQdnCfLV+9EcRUFHc/Xfq/JMBdcs9stX3XwO4Gd2DG4nNPoJGvB7dpgVo6zaT74d8DrGu9mwl6v2ZvLcDvQ7SNRdAHu5aQxmsElDOFsUpmbyBePGKKtpKanb7AGkrK2TaamKZaswmKALQrlT3hcTbEWff7WtgP3LmyEfsiYpYXimTJps+DysP5WX8GBdowDwAAAAAElFTkSuQmCC";
            Assets.addCameraImageEmptyGridAlbum = "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";
            Assets.addImageEmptyGridAlbum = "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";
            Assets.removeImageGridAlbum = "iVBORw0KGgoAAAANSUhEUgAAABwAAAAcBAMAAACAI8KnAAAAJ1BMVEUAAAAAAADCwsIAAAAAAACYmJgAAAAAAAAAAAAAAAA6OjoAAAD///+kPjRLAAAADHRSTlOAAM5fF7V6bUs8kAnyGvPrAAAAnElEQVQY02MQRAFgrsjksnRLRxhXxIABCJgdodwGBjDggHA3M0CBNZhrAOMyg7gSDHDQCOQ6ILgsQC5Q7aIABgZWLZBqBhGgqM4hCGZwZJAEkjFnFJjOHAUyJjIIA0mmM4d0zigAGYYM4gwg1WfOHALRhQxiDGBpsCRDIhoXTTGaUWgWoTkD1ZFoXkDzIJr3MQMHEXQYAYsZ7CgAAG3zLuOOx7CuAAAAAElFTkSuQmCC";
            Assets.gridAlbumImagePlaceHolder = "iVBORw0KGgoAAAANSUhEUgAAAJAAAACQCAMAAADQmBKKAAAAQlBMVEUAAADg5Ofq6ur////h5Ojg5Ojh5Ofg5Ofg5Ojg5Oji5Ofi5unj5un5+fng4+fr7O/l6Ovx8vP09fXi5en29vft7/HqBcC3AAAADXRSTlMAlhgG9PLj2ce/gkctAN5a7wAAAmFJREFUeNrs1stuwjAQRmGHhDs+Htvx+79qm8iitCxckIJnMWfN4tP8CON+Gq/D+Tjx4abjebiO7rndsKdb+2H3hzNeJro2XcZf5zkBSIjJf7wUgwCcHo50OwASfbeiAIfb/T6Lp/iulUVUbzSeIEffuZjhNLqlC9Dd8y0CLutgU/e97qtNy2gDiFeRwODcuFcxWB1tP7qrmgOtJ7ouiwWvpLBsdlaz2LrZ2R0heSUlOLoJvJpgcugCYSADGegxA7UyUCsDtTJQKwO1MlArA7UyUCsDtTJQKwO1MlArAz1VMi+Xy2agJLyVpI1AwpvJNqACEF4OoGwCysDsX24G8iYgIPg3CoCBDPQPUCoSiiJQYClHLaBALekARSCHAIgOUACprlkFSKDUz0QtoFCfiaQCVIDoZwF0fIfmTC3oAPlYPaLld6j+nSy+MyiFB0JK3d+yBIiixzWxJGpACdZECeirnTtGYRgGgihapTRYOLn/VQOK4DdLBhVrBjy/2+61tmCm55oiC9DP8x5TZABanuOoRJ9xNwhPJTq57wLhQYSHux1UeBDh4e4GVR5EeLibQbUH0fIM7n4QnkK0PNz9IDyVaHkQtoPwlKLlQdQNwlOJ8CBqBuEpRXgQtYJOPLWIT2lEnSA8MkRXFwjPpqgLhGdH1AjCsyXqBeHZEz3jt7Ddj3O7pwW/xxe756m6vCj+KSBVQKqAVAGpAlIFpApIFZAqIFVAqoBUAakCUgWkegbIbADg5TeRYDciYTezYTdEYjfVYjdm4zf3YzeI5DcZZTeq5Tc75jfM5jdd5zfu5zN/+AWNDiBPxVvT9AAAAABJRU5ErkJggg==";
            return Assets;
        }());
        UI.Assets = Assets;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        var KASFormAccessibilityRole = /** @class */ (function () {
            function KASFormAccessibilityRole() {
            }
            KASFormAccessibilityRole.None = "none";
            KASFormAccessibilityRole.Text = "text";
            KASFormAccessibilityRole.Button = "button";
            KASFormAccessibilityRole.Image = "img";
            KASFormAccessibilityRole.Checkbox = "checkbox";
            KASFormAccessibilityRole.Radio = "radio";
            KASFormAccessibilityRole.TextBox = "textbox";
            KASFormAccessibilityRole.Option = "option";
            KASFormAccessibilityRole.ListBox = "listbox";
            return KASFormAccessibilityRole;
        }());
        UI.KASFormAccessibilityRole = KASFormAccessibilityRole;
        var KASFormAccessibilityKey = /** @class */ (function () {
            function KASFormAccessibilityKey() {
            }
            KASFormAccessibilityKey.Role = "role"; // Traits  of element.. value should be from KASFormAccessibilityRole
            KASFormAccessibilityKey.Hidden = "aria-hidden";
            KASFormAccessibilityKey.Label = "aria-label";
            KASFormAccessibilityKey.RoleDescription = "aria-roledescription";
            KASFormAccessibilityKey.Disabled = "aria-disabled";
            KASFormAccessibilityKey.Checked = "aria-checked";
            KASFormAccessibilityKey.Selected = "aria-selected";
            KASFormAccessibilityKey.LabelledBy = "aria-labelledby";
            return KASFormAccessibilityKey;
        }());
        UI.KASFormAccessibilityKey = KASFormAccessibilityKey;
        function setAccessibilityBasic(element, isHidden, role, label) {
            if (isHidden === void 0) { isHidden = true; }
            if (role === void 0) { role = null; }
            if (label === void 0) { label = null; }
            setAccessibilityAttribute(element, KASFormAccessibilityKey.Hidden, isHidden ? "true" : "false");
            if (role != null) {
                setAccessibilityAttribute(element, KASFormAccessibilityKey.Role, role);
            }
            if (label != null) {
                setAccessibilityAttribute(element, KASFormAccessibilityKey.Label, label);
            }
        }
        UI.setAccessibilityBasic = setAccessibilityBasic;
        function setAccessibilityAttribute(element, key, value) {
            element.setAttribute(key, value);
        }
        UI.setAccessibilityAttribute = setAccessibilityAttribute;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        var KASFormModule = /** @class */ (function () {
            function KASFormModule() {
                this.header = null;
                this.footer = null;
                this.footerAction = null;
                this.contentView = null;
                this.showLeftBar = false;
                this.footerTopPadding = false;
                this.disableShadow = false;
                this.fillParent = false;
                this.attributes = null;
                this.customizations = [];
                this.view = null;
            }
            KASFormModule.prototype.getView = function () {
                if (this.view == null) {
                    var moduleContent = UI.getVerticalDiv(this.getChildViews(), this.getModuleContentAttributes());
                    var leftBar = UI.getDiv(this.getModuleLeftBarAttributes());
                    this.view = UI.getHorizontalDiv([leftBar, moduleContent], this.getModuleAttributes());
                    UI.setAccessibilityAttribute(this.view, UI.KASFormAccessibilityKey.Role, UI.KASFormAccessibilityRole.None);
                }
                if (this.customizations && this.customizations.length > 0) {
                    KASClient.Customise.register(this.view, this.customizations);
                }
                return this.view;
            };
            KASFormModule.prototype.recreateView = function () {
                this.view = null;
                return this.getView();
            };
            KASFormModule.prototype.getChildViews = function () {
                var childViews = [];
                if (this.header) {
                    childViews.push(this.getHeaderView());
                }
                if (this.contentView) {
                    childViews.push(this.getContentView());
                }
                if (this.footer) {
                    childViews.push(this.getFooterView());
                }
                return childViews;
            };
            KASFormModule.prototype.getHeaderView = function () {
                return UI.getLabel(this.header, this.getHeaderAttributes());
            };
            KASFormModule.prototype.getContentView = function () {
                var contentDiv = UI.getDiv(this.getContentAttributes());
                UI.addElement(this.contentView, contentDiv);
                return contentDiv;
            };
            KASFormModule.prototype.getFooterView = function () {
                var footerView = UI.getLabel(this.footer, this.getFooterAttributes());
                UI.addClickEvent(footerView, this.footerAction);
                if (this.footerAction != null) {
                    UI.setAccessibilityAttribute(footerView, UI.KASFormAccessibilityKey.Role, UI.KASFormAccessibilityRole.Button);
                }
                return footerView;
            };
            KASFormModule.prototype.getModuleAttributes = function () {
                var attributes = {};
                attributes["margin"] = MODULE_GAP;
                attributes["border-radius"] = "0";
                if (!this.disableShadow) {
                    attributes["box-shadow"] = "0pt 1pt 2pt 0pt " + SHADOW_COLOR;
                }
                attributes["background-color"] = "rgb(255, 255, 255)";
                attributes["position"] = "relative";
                return Object.assign(attributes, this.attributes);
            };
            KASFormModule.prototype.getModuleLeftBarAttributes = function () {
                var attributes = {};
                attributes["position"] = "absolute";
                attributes["top"] = "0";
                attributes["height"] = "100%";
                if (this.showLeftBar) {
                    attributes["width"] = "4pt";
                }
                else {
                    attributes["display"] = "none";
                }
                attributes["background-color"] = LIGHT_BLUE_COLOR;
                return attributes;
            };
            KASFormModule.prototype.getModuleContentAttributes = function () {
                var attributes = {};
                attributes["flex"] = "1";
                return attributes;
            };
            KASFormModule.prototype.getHeaderAttributes = function () {
                var attributes = {};
                attributes["font-size"] = UI.getScaledFontSize("10pt");
                attributes["font-weight"] = REGULAR_FONT_WEIGHT;
                attributes["color"] = TEXT_SECONDARY_COLOR;
                if (this.header) {
                    attributes["padding"] = "8pt 12pt 0 12pt";
                }
                return attributes;
            };
            KASFormModule.prototype.getContentAttributes = function () {
                var attributes = {};
                attributes["padding"] = "0";
                if (this.footerTopPadding && !this.footer) {
                    attributes["padding-bottom"] = "8pt";
                }
                return attributes;
            };
            KASFormModule.prototype.getFooterAttributes = function () {
                var attributes = {};
                attributes["font-size"] = UI.getScaledFontSize("12pt");
                attributes["font-weight"] = SEMIBOLD_FONT_WEIGHT;
                attributes["color"] = BLUE_COLOR;
                if (this.footer) {
                    attributes["padding"] = "12pt";
                    attributes["border-top"] = LINE_SEPARATOR_ATTRIBUTE;
                }
                return attributes;
            };
            KASFormModule.prototype.refreshView = function (oldView, newView) {
                UI.replaceElement(newView, oldView, oldView.parentElement);
            };
            return KASFormModule;
        }());
        UI.KASFormModule = KASFormModule;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
/// <reference path="./KASFormModule.ts" />
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        var KASFormRowsModule = /** @class */ (function (_super) {
            __extends(KASFormRowsModule, _super);
            function KASFormRowsModule() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.accessoryViews = null;
                _this.footerViews = null;
                _this.rowAction = null;
                _this.rowActions = null;
                _this.showChevron = true;
                _this.showChevrons = null;
                _this.showEditOptions = null;
                _this.rowAttributes = [];
                _this.rowViews = null;
                //Accessibility
                _this.accessibilityAttributes = {};
                return _this;
            }
            KASFormRowsModule.prototype.getView = function () {
                if (this.view == null) {
                    if (this.rowActions == null) {
                        this.rowActions = [];
                        for (var i = 0; i < this.getNumberOfRows(); i++) {
                            this.rowActions.push(this.rowAction);
                        }
                    }
                    this.rowViews = [];
                    for (var i = 0; i < this.getNumberOfRows(); i++) {
                        var row = this.createRow(i);
                        this.rowViews.push(row);
                    }
                    this.contentView = UI.getVerticalDiv(this.rowViews);
                    this.view = _super.prototype.getView.call(this);
                }
                return this.view;
            };
            KASFormRowsModule.prototype.recreateView = function () {
                this.view = null;
                return this.getView();
            };
            KASFormRowsModule.prototype.createRow = function (i) {
                // Get content
                var rowView = this.getRowView(i);
                // Add accessory view
                if (this.accessoryViews && this.accessoryViews.length > i && this.accessoryViews[i]) {
                    rowView = UI.getHorizontalDiv([rowView, this.accessoryViews[i]], UI.getCoverRestOfTheSpaceAttributes());
                }
                else {
                    UI.addCSS(rowView, UI.getCoverRestOfTheSpaceAttributes());
                }
                // Add chevron
                if ((this.showChevron && this.rowActions.length > i && this.rowActions[i])
                    || (this.showChevrons && this.showChevrons.length > i && this.showChevrons[i])) {
                    var chevronIcon = UI.getChevronIcon();
                    UI.setAccessibilityBasic(chevronIcon, false, UI.KASFormAccessibilityRole.Button, KASClient.Internal.getKASClientString("KASFormPageShowDetail"));
                    rowView = UI.getHorizontalDiv([rowView, UI.getSpace(), chevronIcon]);
                }
                else if (this.showEditOptions && this.showEditOptions.length > i && this.showEditOptions[i]) {
                    var editIcon = UI.getEditIcon();
                    UI.setAccessibilityBasic(editIcon, false, UI.KASFormAccessibilityRole.Button, KASClient.Internal.getKASClientString("KASFormEditDetail"));
                    rowView = UI.getHorizontalDiv([rowView, UI.getSpace(), editIcon]);
                }
                // Add footer View
                if (this.footerViews && this.footerViews.length > i && this.footerViews[i]) {
                    UI.addCSS(rowView, this.getRowAttributeForFooterView());
                    rowView = UI.getVerticalDiv([rowView, this.footerViews[i]], this.getFooterViewAttributes());
                }
                //if there is no row action implemented, by default show min profile
                if (this.rowActions[i] == null) {
                    rowView.onclick = function (rowIndex) {
                        this.implementDefaultRowViewClick(rowIndex);
                    }.bind(this, i);
                }
                // Add row action
                if (this.rowActions && this.rowActions.length > i && this.rowActions[i]) {
                    UI.addClickEvent(rowView, (function (rowAction, rowIndex) {
                        rowAction(rowIndex);
                    }).bind(this, this.rowActions[i], i));
                }
                // Add line separator
                UI.addCSS(rowView, this.getRowAttributes(i));
                UI.setAccessibilityAttribute(rowView, UI.KASFormAccessibilityKey.Role, UI.KASFormAccessibilityRole.None);
                if (this.accessibilityAttributes[i] != undefined && this.accessibilityAttributes[i] != null) {
                    for (var index = 0; index < rowView.children.length; index++) {
                        UI.setAccessibilityBasic(rowView.children.item(index), true);
                    }
                    for (var key in this.accessibilityAttributes[i]) {
                        UI.setAccessibilityAttribute(rowView, key, this.accessibilityAttributes[i][key]);
                    }
                }
                return rowView;
            };
            // implemented by derived class
            KASFormRowsModule.prototype.implementDefaultRowViewClick = function (i) {
            };
            KASFormRowsModule.prototype.setAccessibilityAttribute = function (index, key, value) {
                if (this.rowViews != null && this.rowViews.length > index) {
                    UI.setAccessibilityAttribute(this.rowViews[index], key, value);
                }
                if (this.accessibilityAttributes[index] == undefined)
                    this.accessibilityAttributes[index] = {};
                this.accessibilityAttributes[index][key] = value;
            };
            KASFormRowsModule.prototype.updateRow = function (i) {
                var oldRow = this.rowViews[i];
                var newRow = this.createRow(i);
                if (this.rowViews && this.rowViews.length > i) {
                    this.rowViews[i] = newRow;
                }
                UI.replaceElement(newRow, oldRow, this.contentView);
            };
            KASFormRowsModule.prototype.getNumberOfRows = function () {
                console.assert(false);
                return 0; // Should be implemented by the derived classes
            };
            KASFormRowsModule.prototype.getRowView = function (i) {
                console.assert(false);
                return null; // Should be implemented by derived classes
            };
            KASFormRowsModule.prototype.getRowAttributes = function (i) {
                var attributes = {};
                attributes["padding"] = "8pt 12pt 8pt 12pt";
                if (this.getNumberOfRows() > i + 1) {
                    attributes["border-bottom"] = LINE_SEPARATOR_ATTRIBUTE;
                }
                return Object.assign(attributes, this.rowAttributes[i]);
            };
            KASFormRowsModule.prototype.getFooterViewAttributes = function () {
                var attributes = {};
                return attributes;
            };
            KASFormRowsModule.prototype.getRowAttributeForFooterView = function () {
                var attributes = {};
                attributes["flex"] = "0 0 auto";
                return attributes;
            };
            return KASFormRowsModule;
        }(UI.KASFormModule));
        UI.KASFormRowsModule = KASFormRowsModule;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
/// <reference path="./KASFormRowsModule.ts" />
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        var KASFormCountImageTitleActionModule = /** @class */ (function (_super) {
            __extends(KASFormCountImageTitleActionModule, _super);
            function KASFormCountImageTitleActionModule() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.counts = null;
                _this.imageUrls = null;
                _this.titles = null;
                _this.showCounts = true;
                _this.showCountBars = true;
                _this.countBarHeight = "3pt";
                _this.countBarColors = null;
                return _this;
            }
            KASFormCountImageTitleActionModule.prototype.getNumberOfRows = function () {
                if (this.titles == null) {
                    return 0;
                }
                return this.titles.length;
            };
            KASFormCountImageTitleActionModule.prototype.getRowView = function (i) {
                var rowItems = [];
                if (this.showCounts && this.counts && this.counts.length > i && this.counts[i] != -1) {
                    var countLabel = UI.getLabel("" + this.counts[i].toLocaleString(), this.getCountAttributes(i));
                    rowItems.push(countLabel);
                }
                if (this.imageUrls && this.imageUrls.length > i && this.imageUrls[i]) {
                    var image = UI.getImage(this.imageUrls[i], this.getImageAttributes());
                    rowItems.push(image);
                }
                var titleLabel = UI.getLabel(this.titles[i], this.getTitleAttributes(i));
                rowItems.push(titleLabel);
                var rowDiv = UI.getHorizontalDiv(rowItems);
                return this.createRowCountBar(i, rowDiv);
            };
            KASFormCountImageTitleActionModule.prototype.getTotalCounts = function () {
                var totalCounts = 0;
                for (var j = 0; j < this.counts.length; j++) {
                    totalCounts += this.counts[j];
                }
                return totalCounts;
            };
            KASFormCountImageTitleActionModule.prototype.createRowCountBar = function (i, row) {
                if (this.showCountBars && this.counts.length > i && this.counts[i]) {
                    var ratio = 100 * (this.counts[i] / this.getTotalCounts());
                    var countBarDiv = UI.getDiv(this.getCountBarAttributes(i, ratio + "%"));
                    return UI.getVerticalDiv([row, countBarDiv]);
                }
                return row;
            };
            KASFormCountImageTitleActionModule.prototype.getCountAttributes = function (i) {
                var attributes = {};
                attributes["width"] = "28pt";
                attributes["flex"] = "none";
                attributes["overflow"] = "hidden";
                attributes["font-size"] = UI.getScaledFontSize("12pt");
                attributes["font-weight"] = SEMIBOLD_FONT_WEIGHT;
                attributes["color"] = TEXT_PRIMARY_COLOR;
                attributes["padding"] = "4pt 0 4pt 0";
                return attributes;
            };
            KASFormCountImageTitleActionModule.prototype.getImageAttributes = function () {
                var attributes = {};
                attributes["width"] = "28pt";
                attributes["height"] = "28pt";
                attributes["margin"] = "4pt 8pt 4pt 0";
                attributes["border"] = LINE_SEPARATOR_ATTRIBUTE;
                return attributes;
            };
            KASFormCountImageTitleActionModule.prototype.getTitleAttributes = function (i) {
                var attributes = {};
                attributes["flex"] = "1";
                attributes["font-size"] = UI.getScaledFontSize("12pt");
                attributes["font-weight"] = REGULAR_FONT_WEIGHT;
                attributes["color"] = TEXT_PRIMARY_COLOR;
                attributes["padding"] = "4pt 0 4pt 0";
                return attributes;
            };
            KASFormCountImageTitleActionModule.prototype.getCountBarAttributes = function (i, width) {
                var attributes = {};
                attributes["margin"] = "0pt -12pt -8pt -12pt"; // Should conform to row-module's padding
                attributes["margin-top"] = "calc(8pt - " + this.countBarHeight + ")";
                attributes["width"] = width;
                attributes["height"] = this.countBarHeight; // margin-top should conform to this value
                attributes["background-color"] = (this.countBarColors && this.countBarColors.length > i ? this.countBarColors[i] : LIGHT_BLUE_COLOR);
                return attributes;
            };
            return KASFormCountImageTitleActionModule;
        }(UI.KASFormRowsModule));
        UI.KASFormCountImageTitleActionModule = KASFormCountImageTitleActionModule;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
var FORM_TITLE_VISIBLE_LENGTH = 200;
var FORM_TITLE_LINE_HEIGHT = "1.2em"; // Height of one line
var FORM_TITLE_VISIBLE_HEIGHT = "7.2em"; // Max 6 lines by default
var FORM_TITLE_MAX_HEIGHT = "120em"; // Max 100 lines
var FORM_DESCRIPTION_VISIBLE_LENGTH = 240;
var FORM_DESCRIPTION_LINE_HEIGHT = "1.2em"; // Height of one line
var FORM_DESCRIPTION_VISIBLE_HEIGHT = "7.2em"; // Max 6 lines by default
var FORM_DESCRIPTION_MAX_HEIGHT = "120em"; // Max 100 lines
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        var KASFormDetailsModule = /** @class */ (function () {
            function KASFormDetailsModule() {
                this.coverImagePath = null;
                this.creator = null;
                this.assignedToLabel = null;
                this.assignees = null;
                this.assigneesActionTitle = null;
                this.assigneesAction = null;
                this.formTitle = null;
                this.formDescription = null;
                this.formSubtitle = null;
                this.viewMoreText = null;
                this.viewLessText = null;
                this.likes = 0;
                this.didILike = false;
                this.didIComment = false;
                this.comments = 0;
                this.likeAction = null;
                this.subtitleAction = null;
                this.showAllCommentsAction = null;
                this.showAllLikesAction = null;
                this.hideSenderSection = false;
                this.hideTitleSection = false;
                this.hideLikes = false;
                this.hideLikesDetails = false;
                this.hideComments = false;
                this.hideLikesAndCommentsSection = false;
                this.useOriginalName = false;
                this.customizations = [];
                this.showDrawer = false;
                this.drawerCollapsed = false;
                this.view = null;
                this.titleDiv = null;
                this.descriptionDiv = null;
            }
            KASFormDetailsModule.prototype.getView = function () {
                if (!this.view) {
                    if (this.formTitle.trim().length > FORM_TITLE_VISIBLE_LENGTH || (this.formDescription && this.formDescription.trim().length > FORM_DESCRIPTION_VISIBLE_LENGTH)) {
                        this.showDrawer = true;
                        this.drawerCollapsed = true; // Default is collapsed
                    }
                    else {
                        this.showDrawer = false;
                    }
                    var views = [];
                    if (this.coverImagePath) {
                        views.push(this.getCoverImageDiv());
                    }
                    if (!this.hideSenderSection) {
                        views.push(this.getCreatorDetailsRow());
                        views.push(UI.getSpace());
                    }
                    if (!this.hideTitleSection) {
                        views.push(this.getFormTitleRow());
                        views.push(this.getFormDescriptionRow());
                        views.push(this.getFormSubtitleRow());
                        views.push(this.getViewMoreOrLessRow());
                        views.push(UI.getSpace("10pt"));
                    }
                    if (!this.shouldHideLikesAndCommentsSection()) {
                        views.push(this.getLikesCommentsCountRow());
                    }
                    this.view = UI.getVerticalDiv(views, this.getDetailsModuleAttributes());
                }
                if (this.customizations) {
                    KASClient.Customise.register(this.view, this.customizations);
                }
                return this.view;
            };
            KASFormDetailsModule.prototype.shouldHideLikesAndCommentsSection = function () {
                return (this.hideLikesAndCommentsSection || (this.hideLikes && this.hideComments));
            };
            KASFormDetailsModule.prototype.recreateView = function () {
                this.view = null;
                return this.getView();
            };
            KASFormDetailsModule.prototype.getCoverImageDiv = function () {
                if (this.coverImagePath == null) {
                    return null;
                }
                var imageElement = UI.getImage(this.coverImagePath, {
                    "margin": "-12pt -12pt 12pt -12pt",
                    "flex": "1",
                    "height": "150px"
                });
                UI.setAccessibilityBasic(imageElement, false, UI.KASFormAccessibilityRole.Image, KASClient.Internal.getKASClientString("KASFormCoverImageDetail"));
                imageElement.onclick = function () {
                    KASClient.App.showImageImmersiveView([this.coverImagePath]);
                }.bind(this);
                return imageElement;
            };
            KASFormDetailsModule.prototype.getCreatorDetailsRow = function () {
                var userProfilePicDiv = UI.getProfilePic(this.creator);
                UI.setAccessibilityAttribute(userProfilePicDiv, UI.KASFormAccessibilityKey.Hidden, "true");
                if (KASClient.Version.clientSupports(KASClient.Version.VERSION_26)) {
                    UI.setAccessibilityBasic(userProfilePicDiv, false, UI.KASFormAccessibilityRole.Button, KASClient.Internal.getKASClientString("ProfilePhotoHint"));
                    userProfilePicDiv.onclick = function (event) {
                        KASClient.App.showUserProfileAsync(this.creator.id, true, null);
                        event.stopPropagation();
                    }.bind(this);
                }
                var userName = this.useOriginalName ? this.creator.originalName : this.creator.name;
                var userNameLabel = UI.getLabel(userName, this.getUserNameAttributes());
                if (KASClient.Version.clientSupports(KASClient.Version.VERSION_26)) {
                    userNameLabel.onclick = function (event) {
                        KASClient.App.showUserProfileAsync(this.creator.id, true, null);
                        event.stopPropagation();
                    }.bind(this);
                }
                var assignedToLabel = UI.getLabel(this.assignedToLabel, this.getSentToAttributes());
                UI.setAccessibilityBasic(assignedToLabel, true);
                var assigneesLabel = UI.getLabel(this.assignees, this.getAssigneesAttributes());
                UI.setAccessibilityBasic(assigneesLabel, true);
                var assigneesActionLabel = null;
                if (this.assigneesActionTitle) {
                    assigneesActionLabel = UI.getLabel(this.assigneesActionTitle, this.getAssigneesActionAttributes());
                }
                var sentToAssigneesLabel = UI.getHorizontalDiv([assignedToLabel, UI.getSpace("2pt"), assigneesLabel, UI.getSpace("2pt"), assigneesActionLabel, UI.getFlexibleSpace()]);
                if (this.assigneesAction) {
                    UI.addClickEvent(sentToAssigneesLabel, this.assigneesAction);
                    UI.setAccessibilityBasic(sentToAssigneesLabel, false, UI.KASFormAccessibilityRole.Button, this.assignedToLabel + " " + this.assigneesActionTitle);
                    UI.setAccessibilityAttribute(sentToAssigneesLabel, UI.KASFormAccessibilityKey.Role, UI.KASFormAccessibilityRole.Button);
                }
                else {
                    UI.setAccessibilityBasic(sentToAssigneesLabel, false, UI.KASFormAccessibilityRole.Text, this.assignedToLabel + "" + this.assignees);
                    UI.setAccessibilityAttribute(sentToAssigneesLabel, UI.KASFormAccessibilityKey.Role, UI.KASFormAccessibilityRole.Text);
                }
                var verticalSpace = (KASClient.getPlatform() == KASClient.Platform.Android ? UI.getSpace("2pt") : null);
                var userNameSentToConversationLabel = UI.getVerticalDiv([userNameLabel, verticalSpace, sentToAssigneesLabel], UI.getCoverRestOfTheSpaceAttributes());
                var creatorDetailsRow = UI.getHorizontalDiv([userProfilePicDiv, UI.getSpace("8pt"), userNameSentToConversationLabel]);
                return creatorDetailsRow;
            };
            KASFormDetailsModule.prototype.getFormTitleRow = function () {
                this.titleDiv = UI.getLabel("", this.getFormTitleAttributes());
                this.setFormTitle();
                return this.titleDiv;
            };
            KASFormDetailsModule.prototype.setFormTitle = function () {
                var titleText;
                if (this.showDrawer && this.drawerCollapsed) {
                    titleText = KASClient.getEllipsizedString(this.formTitle, FORM_TITLE_VISIBLE_LENGTH);
                }
                else {
                    titleText = this.formTitle;
                }
                UI.setText(this.titleDiv, titleText);
                UI.setAccessibilityBasic(this.titleDiv, false, UI.KASFormAccessibilityRole.Text, "Title, " + titleText);
            };
            KASFormDetailsModule.prototype.getFormDescriptionRow = function () {
                if (this.formDescription == null || this.formDescription == "") {
                    return null;
                }
                this.descriptionDiv = UI.getLabel("", this.getFormDescriptionAttributes());
                this.setFormDescription();
                return this.descriptionDiv;
            };
            KASFormDetailsModule.prototype.setFormDescription = function () {
                if (this.formDescription == null || this.formDescription == "") {
                    return;
                }
                if (this.showDrawer && this.drawerCollapsed) {
                    UI.setText(this.descriptionDiv, KASClient.getEllipsizedString(this.formDescription, FORM_DESCRIPTION_VISIBLE_LENGTH));
                }
                else {
                    UI.setText(this.descriptionDiv, this.formDescription);
                }
            };
            KASFormDetailsModule.prototype.getFormSubtitleRow = function () {
                if (this.formSubtitle) {
                    var subtitleDiv = UI.getLabel(this.formSubtitle, this.getFormSubtitleAttributes());
                    UI.setAccessibilityBasic(subtitleDiv, false, UI.KASFormAccessibilityRole.Text);
                    subtitleDiv.onclick = this.subtitleAction;
                    return subtitleDiv;
                }
                return null;
            };
            KASFormDetailsModule.prototype.likeClickPreProcessing = function (likeIconImage, likeIconDiv, likeTitleDiv, likeCountDiv, likeDiv) {
                var likeSrc;
                var likeTextBackground = GREY_BACKGROUND_COLOR;
                var likeFontColor = this.hideLikesDetails && this.likes > 0 ? TEXT_PRIMARY_COLOR : BLUE_COLOR;
                var likeTextLeftPadding = "5pt";
                if (this.didILike && this.likes > 0) {
                    this.likes--;
                    this.didILike = false;
                    likeSrc = UI.Assets.like;
                    if (this.likes == 0) {
                        likeTextBackground = CLEAR_COLOR;
                        likeTextLeftPadding = "0";
                        likeFontColor = BLUE_COLOR;
                    }
                }
                else {
                    this.likes++;
                    this.didILike = true;
                    likeSrc = UI.Assets.unlike;
                    if (this.hideLikesDetails) {
                        likeFontColor = TEXT_PRIMARY_COLOR;
                    }
                }
                likeIconImage.src = UI.getBase64Src(likeSrc);
                likeTitleDiv.innerHTML = "" + this.likes;
                if (this.likes == 0) {
                    UI.setAccessibilityBasic(likeCountDiv, true);
                }
                else {
                    UI.setAccessibilityBasic(likeCountDiv, false, UI.KASFormAccessibilityRole.Button, KASClient.Internal.getKASClientString(this.likes == 1 ? "KASFormPageLikeCount" : "KASFormPageLikesCount", this.likes));
                }
                if (this.didILike) {
                    UI.setAccessibilityBasic(likeIconImage, false, UI.KASFormAccessibilityRole.Button, KASClient.Internal.getKASClientString("KASFormPageUnLikes"));
                }
                else {
                    UI.setAccessibilityBasic(likeIconImage, false, UI.KASFormAccessibilityRole.Button, KASClient.Internal.getKASClientString("KASFormPageNoLikes"));
                }
                UI.setText(likeTitleDiv, "" + this.getLikesOrCommentsCountString(this.likes, "like"));
                likeTitleDiv.style.color = likeFontColor;
                if (!this.hideLikesDetails) {
                    likeCountDiv.style.backgroundColor = likeTextBackground;
                    likeCountDiv.style.paddingLeft = likeTextLeftPadding;
                }
                this.likeAction();
            };
            KASFormDetailsModule.prototype.getLikesCommentsCountRow = function () {
                var _this = this;
                var likesAndCommentsElements = [];
                if (!this.hideLikes) {
                    var likeIconImage = UI.getBase64Image((this.didILike ? UI.Assets.unlike : UI.Assets.like), this.getLikeIconAttributes());
                    var likeIconDiv = UI.getHorizontalDiv([UI.getSpace("10pt"), likeIconImage, UI.getSpace("5pt")], this.getLikeIconBackgroundAttributes());
                    var likeTitleDiv = UI.getLabel("" + this.getLikesOrCommentsCountString(this.likes, "like"), this.getLikeTitleAttributes());
                    UI.setAccessibilityBasic(likeTitleDiv, true);
                    var likeCountDiv = UI.getHorizontalDiv([likeTitleDiv, UI.getSpace("10pt")], this.getLikeTextBackgroundAttributes());
                    var likeDiv = UI.getHorizontalDiv([likeIconDiv, likeCountDiv], this.getLikeParentBackgroundAttributes());
                    if (this.likes == 0) {
                        UI.setAccessibilityBasic(likeCountDiv, true);
                    }
                    else {
                        UI.setAccessibilityBasic(likeCountDiv, false, UI.KASFormAccessibilityRole.Button, KASClient.Internal.getKASClientString(this.likes == 1 ? "KASFormPageLikeCount" : "KASFormPageLikesCount", this.likes));
                    }
                    if (this.didILike) {
                        UI.setAccessibilityBasic(likeIconImage, false, UI.KASFormAccessibilityRole.Button, KASClient.Internal.getKASClientString("KASFormPageUnLikes"));
                    }
                    else {
                        UI.setAccessibilityBasic(likeIconImage, false, UI.KASFormAccessibilityRole.Button, KASClient.Internal.getKASClientString("KASFormPageNoLikes"));
                    }
                    UI.addClickEvent(likeIconDiv, function () {
                        _this.likeClickPreProcessing(likeIconImage, likeIconDiv, likeTitleDiv, likeCountDiv, likeDiv);
                    });
                    UI.addClickEvent(likeCountDiv, function () {
                        if (!_this.hideLikesDetails && _this.likes > 0) {
                            _this.showAllLikesAction();
                        }
                        else {
                            _this.likeClickPreProcessing(likeIconImage, likeIconDiv, likeTitleDiv, likeCountDiv, likeDiv);
                        }
                    });
                    if (!this.hideLikesDetails && this.hideComments) {
                        var chevronIcon = UI.getChevronIcon();
                        var likeCompositeDiv = UI.getHorizontalDiv([likeDiv, chevronIcon], UI.getCoverRestOfTheSpaceAttributes());
                        UI.setAccessibilityBasic(chevronIcon, false, UI.KASFormAccessibilityRole.Button, KASClient.Internal.getKASClientString("KASFormPageShowDetail"));
                        UI.setAccessibilityBasic(likeCompositeDiv, false, UI.KASFormAccessibilityRole.None, "");
                        UI.addClickEvent(chevronIcon, this.showAllCommentsAction);
                        likesAndCommentsElements.push(likeCompositeDiv);
                    }
                    else {
                        likesAndCommentsElements.push(likeDiv);
                        likesAndCommentsElements.push(UI.getSpace("10pt"));
                    }
                }
                if (!this.hideComments) {
                    var commentIconImage = UI.getBase64Image((this.didIComment ? UI.Assets.mycomment : UI.Assets.comment), this.getCommentIconAttributes());
                    UI.setAccessibilityBasic(commentIconImage, true);
                    var commentTitleDiv = UI.getLabel("" + this.getLikesOrCommentsCountString(this.comments, "comment"), this.getCommentTitleAttributes());
                    UI.setAccessibilityBasic(commentTitleDiv, true);
                    var commentDiv = UI.getHorizontalDiv([UI.getSpace("10pt"), commentIconImage, UI.getSpace("5pt"), commentTitleDiv, UI.getSpace("10pt")], this.getCommentBackgroundAttributes());
                    var chevronIcon = UI.getChevronIcon();
                    if (this.showAllCommentsAction != null) {
                        UI.setAccessibilityBasic(commentDiv, false, UI.KASFormAccessibilityRole.Button, KASClient.Internal.getKASClientString(this.comments == 1 ? "KASFormPageCommentCount" : "KASFormPageCommentsCount", this.comments));
                        UI.setAccessibilityBasic(chevronIcon, false, UI.KASFormAccessibilityRole.Button, KASClient.Internal.getKASClientString("KASFormPageShowDetail"));
                    }
                    else {
                        UI.setAccessibilityBasic(commentDiv, false, UI.KASFormAccessibilityRole.Text, KASClient.Internal.getKASClientString(this.comments == 1 ? "KASFormPageCommentCount" : "KASFormPageCommentsCount", this.comments));
                        UI.setAccessibilityAttribute(chevronIcon, UI.KASFormAccessibilityKey.Hidden, "true");
                    }
                    var commentCompositeDiv = UI.getHorizontalDiv([commentDiv, chevronIcon], UI.getCoverRestOfTheSpaceAttributes());
                    UI.setAccessibilityBasic(commentCompositeDiv, false, UI.KASFormAccessibilityRole.None, "");
                    UI.addClickEvent(commentCompositeDiv, this.showAllCommentsAction);
                    likesAndCommentsElements.push(commentCompositeDiv);
                }
                return UI.getHorizontalDiv(likesAndCommentsElements, this.getLikesCommentsCountAttributes());
            };
            KASFormDetailsModule.prototype.getViewMoreOrLessRow = function () {
                var _this = this;
                if (this.showDrawer) {
                    var viewMoreOrLessLabel = UI.getLabel(this.viewMoreText, this.getViewMoreOrLessAttributes());
                    UI.addClickEvent(viewMoreOrLessLabel, function () {
                        if (!_this.drawerCollapsed) {
                            if (_this.titleDiv) {
                                _this.titleDiv.style.maxHeight = FORM_TITLE_VISIBLE_HEIGHT;
                            }
                            if (_this.descriptionDiv) {
                                _this.descriptionDiv.style.maxHeight = FORM_TITLE_VISIBLE_HEIGHT;
                            }
                            _this.drawerCollapsed = true;
                            _this.setFormTitle();
                            _this.setFormDescription();
                            UI.setText(viewMoreOrLessLabel, _this.viewMoreText);
                        }
                        else {
                            if (_this.titleDiv) {
                                _this.titleDiv.style.maxHeight = FORM_TITLE_MAX_HEIGHT;
                            }
                            if (_this.descriptionDiv) {
                                _this.descriptionDiv.style.maxHeight = FORM_TITLE_MAX_HEIGHT;
                            }
                            _this.drawerCollapsed = false;
                            _this.setFormTitle();
                            _this.setFormDescription();
                            UI.setText(viewMoreOrLessLabel, _this.viewLessText);
                        }
                    });
                    return viewMoreOrLessLabel;
                }
                else {
                    return null;
                }
            };
            KASFormDetailsModule.prototype.getLikesOrCommentsCountString = function (likesOrCommentsCount, type) {
                if (likesOrCommentsCount == 0) {
                    return type == "like" ? KASClient.Internal.getKASClientString("KASFormPageNoLikes") : KASClient.Internal.getKASClientString("KASFormPageNoComments");
                }
                else if (likesOrCommentsCount < 1000) {
                    return likesOrCommentsCount.toLocaleString();
                }
                else if (likesOrCommentsCount >= 1000 && likesOrCommentsCount < 10000) {
                    /* 1K, 1.1K ... 9.9K */
                    return ((likesOrCommentsCount / 100) / 10.0).toLocaleString() + KASClient.Internal.getKASClientString("Thousand");
                }
                else if (likesOrCommentsCount >= 10000 && likesOrCommentsCount < 1000000) {
                    /* 10K, 11K ... 999K */
                    return (likesOrCommentsCount / 1000).toLocaleString() + KASClient.Internal.getKASClientString("Thousand");
                }
                else if (likesOrCommentsCount >= 1000000 && likesOrCommentsCount < 1000000000) {
                    /* 1M, 1.1M, 1.2M ... */
                    return ((likesOrCommentsCount / 100000) / 10.0).toLocaleString() + KASClient.Internal.getKASClientString("Million");
                }
                else if (likesOrCommentsCount >= 1000000000) {
                    /* 1B, 1.1B, ... */
                    return ((likesOrCommentsCount / 100000000) / 10.0).toLocaleString() + KASClient.Internal.getKASClientString("Billion");
                }
            };
            KASFormDetailsModule.prototype.getCommentBackgroundAttributes = function () {
                var attributes = {};
                attributes["height"] = "32px";
                attributes["width"] = "fit-content";
                attributes["border-radius"] = "100px";
                attributes["box-shadow"] = "0 1px 2px 0 rgba(0, 0, 0, 0.2)";
                return attributes;
            };
            KASFormDetailsModule.prototype.getLikeIconBackgroundAttributes = function () {
                var attributes = {};
                attributes["height"] = "32px";
                attributes["width"] = "fit-content";
                attributes["border-radius"] = "100px 0 0 100px";
                attributes["border-right-color"] = CLEAR_COLOR;
                return attributes;
            };
            KASFormDetailsModule.prototype.getLikeTextBackgroundAttributes = function () {
                var attributes = {};
                attributes["padding-left"] = !this.hideLikesDetails && this.likes > 0 ? "5px" : "0";
                attributes["height"] = "32px";
                attributes["width"] = "fit-content";
                attributes["border-radius"] = "0 100px 100px 0";
                attributes["border-left-color"] = CLEAR_COLOR;
                attributes["background-color"] = !this.hideLikesDetails && this.likes > 0 ? GREY_BACKGROUND_COLOR : CLEAR_COLOR;
                return attributes;
            };
            KASFormDetailsModule.prototype.getLikeParentBackgroundAttributes = function () {
                var attributes = {};
                attributes["border-radius"] = "100px";
                attributes["box-shadow"] = "0 1px 2px 0 rgba(0, 0, 0, 0.2)";
                return attributes;
            };
            KASFormDetailsModule.prototype.getDetailsModuleAttributes = function () {
                var attributes = {};
                attributes["padding"] = "12px 12px 0 12px";
                attributes["border-bottom"] = "1pt solid rgb(219, 219, 219)";
                attributes["background-color"] = "rgb(255, 255, 255)";
                return attributes;
            };
            KASFormDetailsModule.prototype.getUserNameAttributes = function () {
                var attributes = {};
                attributes["font-size"] = UI.getScaledFontSize("10pt");
                attributes["font-weight"] = SEMIBOLD_FONT_WEIGHT;
                attributes["color"] = TEXT_PRIMARY_COLOR;
                return attributes;
            };
            KASFormDetailsModule.prototype.getSentToAttributes = function () {
                var attributes = {};
                attributes["font-size"] = UI.getScaledFontSize("10pt");
                attributes["font-weight"] = REGULAR_FONT_WEIGHT;
                attributes["color"] = TEXT_SECONDARY_COLOR;
                return attributes;
            };
            KASFormDetailsModule.prototype.getAssigneesAttributes = function () {
                var attributes = {};
                attributes["font-size"] = UI.getScaledFontSize("10pt");
                attributes["font-weight"] = SEMIBOLD_FONT_WEIGHT;
                attributes["color"] = TEXT_SECONDARY_COLOR;
                return attributes;
            };
            KASFormDetailsModule.prototype.getAssigneesActionAttributes = function () {
                var attributes = this.getAssigneesAttributes();
                attributes["color"] = BLUE_COLOR;
                return attributes;
            };
            KASFormDetailsModule.prototype.getFormTitleAttributes = function () {
                var attributes = {};
                attributes["font-size"] = UI.getScaledFontSize("14pt");
                attributes["font-weight"] = SEMIBOLD_FONT_WEIGHT;
                attributes["color"] = TEXT_PRIMARY_COLOR;
                attributes["line-height"] = FORM_TITLE_LINE_HEIGHT;
                attributes["max-height"] = FORM_TITLE_VISIBLE_HEIGHT;
                attributes["transition"] = "max-height 0.5s ease-in-out";
                attributes["overflow"] = "hidden";
                return attributes;
            };
            KASFormDetailsModule.prototype.getFormDescriptionAttributes = function () {
                var attributes = {};
                attributes["font-size"] = UI.getScaledFontSize("12pt");
                attributes["font-weight"] = REGULAR_FONT_WEIGHT;
                attributes["color"] = "#32495f";
                attributes["line-height"] = FORM_DESCRIPTION_LINE_HEIGHT;
                attributes["max-height"] = FORM_DESCRIPTION_VISIBLE_HEIGHT;
                attributes["transition"] = "max-height 0.5s ease-in-out";
                attributes["overflow"] = "hidden";
                return attributes;
            };
            KASFormDetailsModule.prototype.getFormSubtitleAttributes = function () {
                var attributes = {};
                attributes["font-size"] = UI.getScaledFontSize("12pt");
                attributes["font-weight"] = REGULAR_FONT_WEIGHT;
                attributes["color"] = TEXT_SECONDARY_COLOR;
                return attributes;
            };
            KASFormDetailsModule.prototype.getViewMoreOrLessAttributes = function () {
                var attributes = {};
                attributes["padding"] = "4pt 0 0 0";
                attributes["font-size"] = UI.getScaledFontSize("12pt");
                attributes["font-weight"] = SEMIBOLD_FONT_WEIGHT;
                attributes["color"] = BLUE_COLOR;
                return attributes;
            };
            KASFormDetailsModule.prototype.getLikesCommentsCountAttributes = function () {
                var attributes = {};
                attributes["margin"] = "0 -12pt 0 -12pt"; // Should match the detail-module's padding
                attributes["padding"] = "0 12pt 0 12pt";
                attributes["height"] = "44pt";
                attributes["border-top"] = LINE_SEPARATOR_ATTRIBUTE;
                attributes["border-bottom"] = LINE_SEPARATOR_ATTRIBUTE;
                return attributes;
            };
            KASFormDetailsModule.prototype.getLikeIconAttributes = function () {
                var attributes = {};
                attributes["width"] = "16px";
                attributes["height"] = "16px";
                attributes["flex"] = "none";
                attributes["overflow"] = "hidden";
                return attributes;
            };
            KASFormDetailsModule.prototype.getCommentIconAttributes = function () {
                var attributes = {};
                attributes["width"] = "16px";
                attributes["height"] = "16px";
                attributes["flex"] = "none";
                attributes["overflow"] = "hidden";
                return attributes;
            };
            KASFormDetailsModule.prototype.getLikeTitleAttributes = function () {
                var attributes = {};
                attributes["font-size"] = UI.getScaledFontSize("12pt");
                attributes["font-weight"] = MEDIUM_FONT_WEIGHT;
                attributes["color"] = this.hideLikesDetails && this.likes > 0 ? TEXT_PRIMARY_COLOR : BLUE_COLOR;
                return attributes;
            };
            KASFormDetailsModule.prototype.getCommentTitleAttributes = function () {
                var attributes = {};
                attributes["font-size"] = UI.getScaledFontSize("12pt");
                attributes["font-weight"] = MEDIUM_FONT_WEIGHT;
                attributes["color"] = BLUE_COLOR;
                return attributes;
            };
            return KASFormDetailsModule;
        }());
        UI.KASFormDetailsModule = KASFormDetailsModule;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
/// <reference path="./KASFormModule.ts" />
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        /**
         * KASFormRowsRecyclerModule renders a list view.
         * The difference between KASFormRowsModule and this is that not all the rows
         * are rendered at once. This control only renders the rows that are currently
         * visible in the viewport and in addition to that preloads a few rows above
         * and below the viewport to simulate smooth scrolling.
         *
         * This control expects the following data at render time to function:
         *  - The number of rows (mandatory)
         *  - The height of each row (mandatory; rows can be of different heights but each row's height should be constant throughout)
         *
         * The following is the DOM structure created by this control:
         *  __________________________
         * |                          |
         * |                          |
         * |        Top Space         |
         * |--------------------------|
         * |                          |
         * |   Preloaded top blocks   |
         * |                          |
         * |--------------------------|
         * |    Current block in      |
         * |        viewport          |
         * |--------------------------|
         * |                          |
         * | Preloaded bottom blocks  |
         * |                          |
         * |--------------------------|
         * |      Bottom space        |
         * |                          |
         * |__________________________|
         *
         * A block is a set a rows. All rendering decisions are based at a block
         * level instead of at a row level. Block level changes occur comparatively
         * at a lower frequency than when processing at a row level. Since scroll
         * events are fired at very short intervals, DOM changes resulting from
         * these scroll events are smoother when done at block level rather than
         * at a row level.
         *
         * Top and Bottom space blocks are added to fill up the empty space for
         * the rows that are not rendered above and below the currently loaded
         * blocks. When the scroll position is at the start, the top space will
         * be of zero height and when the scroll position is at the end, the
         * bottom space will be of zero height.
         *
         * On change in scroll position, we determine the current block in viewport
         * and if we detect a change in the current block, we will compute the
         * list of blocks to be rendered. This list is compared with the currently
         * rendered block list and the blocks to be added and removed are determined.
         * These changes are then made to the DOM.
         *
         * In the current implementation, the ROW_BLOCK_SIZE, which determines the
         * number of rows in each block, is hard coded to 5. Also the
         * PRELOAD_BLOCK_COUNT is fixed at 2 (two blocks will be preloaded above
         * and two below the current block). Future upgrades to this control should
         * consider determining these numbers dynamically based on view port size and
         * other device characteristics.
         *
         * Few other areas of improvement will be defining a construct for a row,
         * accomodating rows that contain dynamic content which affect its height.
         *
         */
        var KASFormRowsRecyclerModule = /** @class */ (function (_super) {
            __extends(KASFormRowsRecyclerModule, _super);
            function KASFormRowsRecyclerModule() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.PRELOAD_BLOCK_COUNT = 2;
                _this.ROW_BLOCK_SIZE = 5;
                _this.rowHeights = [];
                _this.blockHeights = [];
                _this.currentlyRenderedBlocks = [];
                _this.moduleTopOffset = -1;
                return _this;
            }
            KASFormRowsRecyclerModule.prototype.getView = function () {
                this.setupRowsAndBlocks();
                document.addEventListener('scroll', this.viewScrolled.bind(this));
                this.topSpaceBlock = UI.getDiv({ "width": "10px", "height": "0px" });
                this.blockContentContainer = UI.getDiv();
                this.bottomSpaceBlock = UI.getDiv({ "width": "10px", "height": "0px" });
                this.updateRowBlocks();
                this.contentView = UI.getVerticalDiv([this.topSpaceBlock, this.blockContentContainer, this.bottomSpaceBlock]);
                this.view = _super.prototype.getView.call(this);
                return this.view;
            };
            KASFormRowsRecyclerModule.prototype.setupRowsAndBlocks = function () {
                this.totalRowCount = this.getNumberOfRows();
                for (var rowIndex = 0; rowIndex < this.totalRowCount; rowIndex++) {
                    this.rowHeights.push(this.getRowHeight(rowIndex) + 18); // '18px' is to compensate for the padding and borders
                }
                this.currentRowBlockIndex = 0;
                this.totalRowBlockCount = Math.ceil(this.totalRowCount / this.ROW_BLOCK_SIZE);
                for (var blockIndex = 0; blockIndex < this.totalRowBlockCount; blockIndex++) {
                    this.blockHeights.push(this.getBlockHeight(blockIndex));
                }
            };
            KASFormRowsRecyclerModule.prototype.viewScrolled = function () {
                var scrollElement = document.scrollingElement ? document.scrollingElement : document.body;
                if (this.moduleTopOffset == -1) {
                    var moduleTop = this.view.getBoundingClientRect().top;
                    var documentTop = scrollElement.getBoundingClientRect().top;
                    if (moduleTop && documentTop) {
                        this.moduleTopOffset = moduleTop - documentTop;
                    }
                }
                this.computeCurrentRowBlockIndex(scrollElement.scrollTop);
            };
            KASFormRowsRecyclerModule.prototype.computeCurrentRowBlockIndex = function (scrollPos) {
                var newRowBlockIndex;
                var adjustedScrollPos = scrollPos;
                if (this.moduleTopOffset != -1) {
                    adjustedScrollPos = scrollPos - this.moduleTopOffset;
                }
                if (adjustedScrollPos <= 0) {
                    newRowBlockIndex = 0;
                }
                else {
                    newRowBlockIndex = 0;
                    for (var li = 0; li < this.totalRowBlockCount && adjustedScrollPos > 0; li++) {
                        adjustedScrollPos -= this.getBlockHeight(newRowBlockIndex);
                        if (adjustedScrollPos >= 0) {
                            newRowBlockIndex++;
                        }
                    }
                }
                if (newRowBlockIndex != this.currentRowBlockIndex &&
                    newRowBlockIndex < this.totalRowBlockCount - this.PRELOAD_BLOCK_COUNT) {
                    var scrollDirection = (newRowBlockIndex > this.currentRowBlockIndex) ? ScrollDirection.DOWN : ScrollDirection.UP;
                    this.currentRowBlockIndex = newRowBlockIndex;
                    this.updateRowBlocks(scrollDirection);
                }
            };
            KASFormRowsRecyclerModule.prototype.getBlocksToRender = function () {
                var offsets = [];
                for (var offsetIndex = (-1 * this.PRELOAD_BLOCK_COUNT); offsetIndex <= this.PRELOAD_BLOCK_COUNT; offsetIndex++) {
                    offsets.push(offsetIndex);
                }
                var blocksToRender = [];
                for (var i = 0; i < offsets.length; i++) {
                    var offsetBlockIndex = this.currentRowBlockIndex + offsets[i];
                    if (offsetBlockIndex >= 0 && offsetBlockIndex < this.totalRowBlockCount) {
                        blocksToRender.push(offsetBlockIndex);
                    }
                }
                return blocksToRender;
            };
            KASFormRowsRecyclerModule.prototype.updateRowBlocks = function (scrollDirection) {
                if (scrollDirection === void 0) { scrollDirection = ScrollDirection.DOWN; }
                var blocksToRender = this.getBlocksToRender();
                var newBlocks = blocksToRender.slice();
                var oldBlocks = [];
                for (var existingBlockIndex = 0; existingBlockIndex < this.currentlyRenderedBlocks.length; existingBlockIndex++) {
                    var indexToRemove = newBlocks.indexOf(this.currentlyRenderedBlocks[existingBlockIndex]);
                    if (indexToRemove != -1) {
                        newBlocks = KASClient.removeElementFromArray(newBlocks, indexToRemove);
                    }
                    else {
                        oldBlocks.push(this.currentlyRenderedBlocks[existingBlockIndex]);
                    }
                }
                this.currentlyRenderedBlocks = blocksToRender.slice();
                if (newBlocks.length > 0) {
                    this.updateSpaceBlocks();
                    this.removeRowBlocks(oldBlocks);
                    for (var newBlockIterator = 0; newBlockIterator < newBlocks.length; newBlockIterator++) {
                        var blockToRender = newBlocks[newBlockIterator];
                        var firstRowOfBlock = blockToRender * this.ROW_BLOCK_SIZE;
                        var block = UI.getDiv();
                        UI.setId(block, "" + blockToRender);
                        for (var rowIndex = firstRowOfBlock; rowIndex < (firstRowOfBlock + this.ROW_BLOCK_SIZE) && rowIndex < this.totalRowCount; rowIndex++) {
                            UI.addElement(this.createRow(rowIndex), block);
                        }
                        if (scrollDirection == ScrollDirection.DOWN) {
                            this.blockContentContainer.appendChild(block);
                        }
                        else {
                            this.blockContentContainer.insertBefore(block, this.blockContentContainer.childNodes[newBlockIterator]);
                        }
                    }
                }
            };
            KASFormRowsRecyclerModule.prototype.updateSpaceBlocks = function () {
                var topSpace = 0;
                for (var topIndex = 0; topIndex < this.currentRowBlockIndex - this.PRELOAD_BLOCK_COUNT; topIndex++) {
                    topSpace += this.getBlockHeight(topIndex);
                }
                var bottomSpace = 0;
                for (var bottomIndex = (((this.currentRowBlockIndex + 1) + this.PRELOAD_BLOCK_COUNT) * this.ROW_BLOCK_SIZE); bottomIndex < this.totalRowCount; bottomIndex++) {
                    bottomSpace += this.getRowHeight(bottomIndex);
                }
                UI.addCSS(this.topSpaceBlock, { "height": topSpace + "px" });
                UI.addCSS(this.bottomSpaceBlock, { "height": bottomSpace + "px" });
            };
            KASFormRowsRecyclerModule.prototype.removeRowBlocks = function (blocksIndexesToRemove) {
                var blocksToRemove = [];
                for (var blockIterator = 0; blockIterator < this.blockContentContainer.children.length; blockIterator++) {
                    var blockId = parseInt(this.blockContentContainer.children[blockIterator].getAttribute("id"));
                    if (blocksIndexesToRemove.indexOf(blockId) != -1) {
                        blocksToRemove.push(this.blockContentContainer.children[blockIterator]);
                    }
                }
                for (var removeIndex = 0; removeIndex < blocksToRemove.length; removeIndex++) {
                    var blockToRemove = blocksToRemove[removeIndex];
                    var blockId = parseInt(blockToRemove.getAttribute("id"));
                    var firstRowOfBlock = blockId * this.ROW_BLOCK_SIZE;
                    for (var rowIndex = firstRowOfBlock; rowIndex < (firstRowOfBlock + this.ROW_BLOCK_SIZE) && rowIndex < this.totalRowCount; rowIndex++) {
                        this.deleteRowView(rowIndex);
                    }
                    this.blockContentContainer.removeChild(blockToRemove);
                }
            };
            KASFormRowsRecyclerModule.prototype.createRow = function (i) {
                // Get content
                var rowView = this.getRowView(i);
                // Add line separator
                UI.addCSS(rowView, this.getRowAttributes(i));
                return rowView;
            };
            KASFormRowsRecyclerModule.prototype.getNumberOfRows = function () {
                console.assert(false);
                return 0; // Should be implemented by the derived classes
            };
            KASFormRowsRecyclerModule.prototype.getRowView = function (i) {
                console.assert(false);
                return null; // Should be implemented by derived classes
            };
            KASFormRowsRecyclerModule.prototype.deleteRowView = function (i) {
                //Should be implemented by derived classes if some handling needs to done on view removal
            };
            KASFormRowsRecyclerModule.prototype.getRowHeight = function (i) {
                console.assert(false);
                return -1; // Should be implemented by derived classes
            };
            KASFormRowsRecyclerModule.prototype.getBlockHeight = function (blockIndex) {
                if (this.blockHeights[blockIndex]) {
                    return this.blockHeights[blockIndex];
                }
                var blockHeight = 0;
                var firstRowOfBlock = blockIndex * this.ROW_BLOCK_SIZE;
                for (var rowIndex = firstRowOfBlock; rowIndex < (firstRowOfBlock + this.ROW_BLOCK_SIZE) && rowIndex < this.totalRowCount; rowIndex++) {
                    blockHeight += this.rowHeights[rowIndex];
                }
                return blockHeight;
            };
            KASFormRowsRecyclerModule.prototype.getRowAttributes = function (i) {
                var attributes = {};
                attributes["padding"] = "8pt 12pt 8pt 12pt";
                if (this.getNumberOfRows() > i + 1) {
                    attributes["border-bottom"] = LINE_SEPARATOR_ATTRIBUTE;
                }
                return attributes;
            };
            return KASFormRowsRecyclerModule;
        }(UI.KASFormModule));
        UI.KASFormRowsRecyclerModule = KASFormRowsRecyclerModule;
        var ScrollDirection;
        (function (ScrollDirection) {
            ScrollDirection[ScrollDirection["DOWN"] = 0] = "DOWN";
            ScrollDirection[ScrollDirection["UP"] = 1] = "UP";
        })(ScrollDirection = UI.ScrollDirection || (UI.ScrollDirection = {}));
        ;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
/// <reference path="./KASFormRowsRecyclerModule.ts" />
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        /**
         * KASFormImageResponseAggregationRecyclerModule provides a view for every
         * image list type response in the aggregated view which can be accessed
         * from the Survey summary.
         *
         * Each row displays the responder's name, profile pic and the time at which the
         * response was sent. The list of images sent as part of the response
         * are displayed in a grid form along with the user info.
         */
        var KASFormImageResponseAggregationRecyclerModule = /** @class */ (function (_super) {
            __extends(KASFormImageResponseAggregationRecyclerModule, _super);
            function KASFormImageResponseAggregationRecyclerModule() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.userInfo = null;
                _this.timestamps = null;
                _this.images = null;
                _this.albumViewCache = {};
                return _this;
            }
            KASFormImageResponseAggregationRecyclerModule.prototype.getNumberOfRows = function () {
                if (this.userInfo == null) {
                    return 0;
                }
                return this.userInfo.length;
            };
            KASFormImageResponseAggregationRecyclerModule.prototype.getRowView = function (i) {
                var profilePic = UI.getProfilePic(this.userInfo[i]);
                var titleLabel = UI.getLabel(this.userInfo[i].name, this.getTitleAttributes());
                var profileDetailsView;
                if (this.timestamps != null && this.timestamps.length > i) {
                    var subTitleLabel = UI.getLabel(this.timestamps[i], this.getSubTitleAttributes());
                    profileDetailsView = UI.getHorizontalDiv([profilePic, UI.getSpace("8px"), UI.getVerticalDiv([titleLabel, subTitleLabel], UI.getCoverRestOfTheSpaceAttributes())]);
                }
                else {
                    profileDetailsView = UI.getHorizontalDiv([profilePic, UI.getSpace("8px"), UI.getVerticalDiv([titleLabel], UI.getCoverRestOfTheSpaceAttributes())]);
                }
                var albumView = new UI.KASImageGridAlbumView("" /* header */, this.images[i] /* imageAttachments */, true /* previewMode */, null /* props */, null /* onChangeCallback*/);
                this.albumViewCache[i] = albumView;
                var rowView = UI.getVerticalDiv([profileDetailsView, UI.getSpace("4px"), albumView.getView()]);
                return rowView;
            };
            KASFormImageResponseAggregationRecyclerModule.prototype.deleteRowView = function (i) {
                if (this.albumViewCache[i]) {
                    var albumView = this.albumViewCache[i];
                    albumView.prepareForDOMRemoval();
                    delete this.albumViewCache[i];
                }
            };
            KASFormImageResponseAggregationRecyclerModule.prototype.getRowHeight = function (i) {
                // for Carousel, 
                // return 156;
                // for Grid,
                var profileInfoHeight = 44;
                var spacerHeight = 4;
                var screenWidth = window.innerWidth || document.documentElement.clientWidth;
                var availableWidth = screenWidth - 43;
                // Why "43"? 24pt(32px) padding for each row and 8pt(11px) margin for the page.
                // Ideally this shouldn't be present here but we need the width to calculate the height.
                var gridColCount = Math.floor(availableWidth / 84); // Every image in Image Grid Album is of size 84px X 84px.
                var gridRowCount = Math.ceil(this.images[i].length / gridColCount);
                return profileInfoHeight + spacerHeight + (gridRowCount * 84); // Every image in Image Grid Album is of size 84px X 84px.
            };
            KASFormImageResponseAggregationRecyclerModule.prototype.getTitleAttributes = function () {
                var attributes = {};
                attributes["font-size"] = UI.getScaledFontSize("12pt");
                attributes["font-weight"] = MEDIUM_FONT_WEIGHT;
                attributes["color"] = TEXT_PRIMARY_COLOR;
                return attributes;
            };
            KASFormImageResponseAggregationRecyclerModule.prototype.getSubTitleAttributes = function () {
                var attributes = {};
                attributes["font-size"] = UI.getScaledFontSize("10pt");
                attributes["font-weight"] = REGULAR_FONT_WEIGHT;
                attributes["color"] = TEXT_SECONDARY_COLOR;
                return attributes;
            };
            return KASFormImageResponseAggregationRecyclerModule;
        }(UI.KASFormRowsRecyclerModule));
        UI.KASFormImageResponseAggregationRecyclerModule = KASFormImageResponseAggregationRecyclerModule;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
/// <reference path="./KASFormRowsModule.ts" />
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        var KASFormTitleSubtitleActionModule = /** @class */ (function (_super) {
            __extends(KASFormTitleSubtitleActionModule, _super);
            function KASFormTitleSubtitleActionModule() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.showIndex = false;
                _this.titles = null;
                _this.subtitles = null;
                _this.plainTextSubtitle = true;
                _this.titleColors = null;
                _this.boldTitle = true;
                _this.subtitlePrimary = false;
                _this.cssToOverride = {};
                return _this;
            }
            KASFormTitleSubtitleActionModule.prototype.getNumberOfRows = function () {
                if (this.titles == null) {
                    return 0;
                }
                return this.titles.length;
            };
            KASFormTitleSubtitleActionModule.prototype.getRowView = function (i) {
                if (i == 0) {
                    this.allTitleLabels = {};
                    this.allSubtitleLabels = {};
                }
                var indexLabel = null;
                if (this.showIndex) {
                    indexLabel = UI.getLabel((i + 1).toLocaleString() + ".", this.getIndexAttributes(i));
                }
                var rowItems = [];
                var titleLabel = UI.getLabel(this.titles[i], this.getTitleAttributes(i));
                if (this.cssToOverride.hasOwnProperty("titles")) {
                    var titlesCss = this.cssToOverride["titles"];
                    if (titlesCss.hasOwnProperty(i.toString())) {
                        KASClient.UI.addCSS(titleLabel, titlesCss[i.toString()]);
                    }
                }
                rowItems.push(titleLabel);
                this.allTitleLabels[i] = titleLabel;
                if (this.subtitles && this.subtitles.length > i && this.subtitles[i]) {
                    var subtitleLabel;
                    if (!this.plainTextSubtitle && KASClient.isLocation(this.subtitles[i])) {
                        subtitleLabel = UI.getLabel(KASClient.getLocationName(this.subtitles[i]), this.getSubtitleAttributes(i));
                    }
                    else if (!this.plainTextSubtitle && KASClient.isURL(this.subtitles[i])) {
                        subtitleLabel = UI.getImage(this.subtitles[i], this.getSubtitleImageAttributes(i));
                        subtitleLabel.onclick = function () {
                            KASClient.App.showImageImmersiveView([this.src]);
                        };
                    }
                    else if (!this.plainTextSubtitle && KASClient.isListOfImageAttachments(this.subtitles[i])) {
                        var attachmentsList = [];
                        var attachmentsListJSONArray = JSON.parse(this.subtitles[i]);
                        for (var i = 0; i < attachmentsListJSONArray.length; i++) {
                            attachmentsList.push(KASClient.KASImageAttachment.fromJSON(attachmentsListJSONArray[i]));
                        }
                        var gridView = new UI.KASImageGridAlbumView("", attachmentsList, true, null, null);
                        subtitleLabel = gridView.getView();
                    }
                    else {
                        subtitleLabel = UI.getLabel(this.subtitles[i], this.getSubtitleAttributes(i));
                    }
                    if (this.cssToOverride.hasOwnProperty("subtitles")) {
                        var subTitlesCss = this.cssToOverride["subtitles"];
                        if (subTitlesCss.hasOwnProperty(i.toString())) {
                            KASClient.UI.addCSS(subtitleLabel, subTitlesCss[i.toString()]);
                        }
                    }
                    rowItems.push(subtitleLabel);
                    this.allSubtitleLabels[i] = subtitleLabel;
                }
                var rowView = UI.getHorizontalDiv([indexLabel, UI.getVerticalDiv(rowItems, UI.getCoverRestOfTheSpaceAttributes())]);
                return rowView;
            };
            KASFormTitleSubtitleActionModule.prototype.setTitleLabelForIndex = function (index, title) {
                if (title === void 0) { title = ""; }
                if (index < this.titles.length) {
                    this.titles[index] = title;
                    UI.setText(this.allTitleLabels[index], this.titles[index]);
                }
            };
            KASFormTitleSubtitleActionModule.prototype.setSubtitleForIndex = function (index, subtitle) {
                if (subtitle === void 0) { subtitle = ""; }
                if (index < this.subtitles.length) {
                    this.subtitles[index] = subtitle;
                    if (!this.plainTextSubtitle && KASClient.isLocation(this.subtitles[index])) {
                        UI.setText(this.allSubtitleLabels[index], this.subtitles[index]);
                    }
                    else if (!this.plainTextSubtitle && KASClient.isURL(this.subtitles[index])) {
                        this.allSubtitleLabels[index].src = this.subtitles[index];
                    }
                    else {
                        UI.setText(this.allSubtitleLabels[index], this.subtitles[index]);
                    }
                }
            };
            KASFormTitleSubtitleActionModule.prototype.getIndexAttributes = function (i) {
                var attributes = {};
                attributes["width"] = "25pt";
                attributes["text-align"] = "left";
                attributes["flex"] = "none";
                attributes["align-self"] = "flex-start";
                attributes["overflow"] = "hidden";
                attributes["font-size"] = UI.getScaledFontSize("14pt");
                attributes["font-weight"] = REGULAR_FONT_WEIGHT;
                attributes["color"] = TEXT_PRIMARY_COLOR;
                return attributes;
            };
            KASFormTitleSubtitleActionModule.prototype.getTitleAttributes = function (i) {
                var attributes = {};
                if (this.subtitlePrimary) {
                    attributes["font-size"] = UI.getScaledFontSize("10pt");
                    attributes["font-weight"] = REGULAR_FONT_WEIGHT;
                }
                else {
                    attributes["font-size"] = UI.getScaledFontSize("12pt");
                    if (this.boldTitle) {
                        attributes["font-weight"] = SEMIBOLD_FONT_WEIGHT;
                    }
                    else {
                        attributes["font-weight"] = REGULAR_FONT_WEIGHT;
                    }
                }
                if (this.titleColors && this.titleColors.length > i && this.titleColors[i]) {
                    attributes["color"] = this.titleColors[i];
                }
                else {
                    attributes["color"] = TEXT_PRIMARY_COLOR;
                }
                return attributes;
            };
            KASFormTitleSubtitleActionModule.prototype.getSubtitleAttributes = function (i) {
                var attributes = {};
                if (this.subtitlePrimary) {
                    attributes["padding-top"] = "4pt";
                    attributes["font-size"] = UI.getScaledFontSize("12pt");
                    attributes["font-weight"] = SEMIBOLD_FONT_WEIGHT;
                    attributes["color"] = TEXT_PRIMARY_COLOR;
                }
                else {
                    if (KASClient.getPlatform() == KASClient.Platform.Android) {
                        attributes["padding-top"] = "2pt";
                    }
                    attributes["font-size"] = UI.getScaledFontSize("10pt");
                    attributes["font-weight"] = REGULAR_FONT_WEIGHT;
                    attributes["color"] = TEXT_SECONDARY_COLOR;
                }
                return attributes;
            };
            KASFormTitleSubtitleActionModule.prototype.getSubtitleImageAttributes = function (i) {
                var attributes = {};
                attributes["margin-top"] = "10pt";
                attributes["height"] = "100pt";
                attributes["width"] = "100pt";
                return attributes;
            };
            return KASFormTitleSubtitleActionModule;
        }(UI.KASFormRowsModule));
        UI.KASFormTitleSubtitleActionModule = KASFormTitleSubtitleActionModule;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
/// <reference path="./KASFormTitleSubtitleActionModule.ts" />
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        var KASFormImageTitleSubtitleActionModule = /** @class */ (function (_super) {
            __extends(KASFormImageTitleSubtitleActionModule, _super);
            function KASFormImageTitleSubtitleActionModule() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.imageUrl = null;
                _this.footerText = null;
                _this.imageAttributes = null;
                _this.footerTextAttributes = null;
                _this.imageTowardsLeft = true;
                return _this;
            }
            KASFormImageTitleSubtitleActionModule.prototype.getNumberOfRows = function () {
                if (this.titles == null) {
                    return 0;
                }
                return this.titles.length;
            };
            KASFormImageTitleSubtitleActionModule.prototype.getRowView = function (i) {
                var image = null;
                if (this.imageUrl != null && this.imageUrl[i] != null) {
                    image = UI.getImage(this.imageUrl[i], Object.assign(this.getImageAttributes(i), this.imageAttributes));
                    image.onerror = function (event) {
                        KASClient.UI.addCSS(event.target, { "display": "none" });
                    };
                }
                var footer = null;
                if (this.footerText != null && this.footerText[i] != null) {
                    footer = UI.getLabel(this.footerText[i], Object.assign(this.getModuleFooterAttributes(i), this.footerTextAttributes));
                }
                if (this.imageTowardsLeft) {
                    return UI.getVerticalDiv([UI.getHorizontalDiv([image, this.getSpaceAttributes(), _super.prototype.getRowView.call(this, i)], this.getRowWithImageAttributes()), footer]);
                }
                else {
                    return UI.getVerticalDiv([UI.getHorizontalDiv([_super.prototype.getRowView.call(this, i), this.getSpaceAttributes(), image], this.getRowWithImageAttributes()), footer]);
                }
            };
            KASFormImageTitleSubtitleActionModule.prototype.getImageAttributes = function (i) {
                var attributes = {};
                attributes["width"] = "36pt";
                attributes["height"] = "auto";
                attributes["overflow"] = "none";
                attributes["object-fit"] = "contain";
                return attributes;
            };
            KASFormImageTitleSubtitleActionModule.prototype.getModuleFooterAttributes = function (i) {
                var attributes = {};
                if (KASClient.getPlatform() == KASClient.Platform.Android) {
                    attributes["padding-top"] = "2pt";
                }
                attributes["margin-top"] = "5pt";
                attributes["font-size"] = UI.getScaledFontSize("10pt");
                attributes["font-weight"] = REGULAR_FONT_WEIGHT;
                attributes["color"] = TEXT_SECONDARY_COLOR;
                return attributes;
            };
            KASFormImageTitleSubtitleActionModule.prototype.getSpaceAttributes = function () {
                return UI.getSpace("2pt");
            };
            KASFormImageTitleSubtitleActionModule.prototype.getRowWithImageAttributes = function () {
                var attributes = {};
                if (this.imageTowardsLeft) {
                    attributes["justify-content"] = "flex-start";
                }
                else {
                    attributes["justify-content"] = "space-between";
                }
                return attributes;
            };
            return KASFormImageTitleSubtitleActionModule;
        }(UI.KASFormTitleSubtitleActionModule));
        UI.KASFormImageTitleSubtitleActionModule = KASFormImageTitleSubtitleActionModule;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        var KASFormModuleContainer = /** @class */ (function () {
            function KASFormModuleContainer() {
                this.navigationBarHidden = false;
                this.bottomBarHidden = false;
                this.backgroundColor = PAGE_BG_COLOR;
                this.attributes = null;
                this.view = null;
            }
            KASFormModuleContainer.prototype.getView = function () {
                if (this.view == null) {
                    this.view = UI.getDiv(this.getModuleContainerAttributes());
                }
                return this.view;
            };
            KASFormModuleContainer.prototype.addModule = function (module) {
                if (module.fillParent) {
                    UI.addCSS(module.getView(), this.getNoPaddingModuleAttribute());
                }
                UI.addElement(module.getView(), this.getView());
            };
            KASFormModuleContainer.prototype.addModuleWithFullWidth = function (module) {
                module.disableShadow = true;
                module.fillParent = true;
                UI.addCSS(module.getView(), this.getNoPaddingModuleAttribute());
                UI.addElement(module.getView(), this.getView());
            };
            KASFormModuleContainer.prototype.addView = function (childView) {
                UI.addElement(childView, this.getView());
            };
            KASFormModuleContainer.prototype.addViewWithFullWidth = function (childView) {
                UI.addCSS(childView, this.getNoPaddingModuleAttribute());
                UI.addElement(childView, this.getView());
            };
            KASFormModuleContainer.prototype.removeModule = function (module) {
                UI.removeElement(module.getView(), this.getView());
            };
            KASFormModuleContainer.prototype.removeAllModules = function () {
                UI.clearElement(this.view);
            };
            KASFormModuleContainer.prototype.refreshModule = function (module) {
                var oldModuleView = module.getView();
                var newModuleView = module.recreateView();
                if (module.fillParent) {
                    UI.addCSS(newModuleView, this.getNoPaddingModuleAttribute());
                }
                UI.replaceElement(newModuleView, oldModuleView, this.getView());
            };
            KASFormModuleContainer.prototype.setBodyBackgroundColor = function () {
                document.body.style.backgroundColor = this.backgroundColor;
            };
            KASFormModuleContainer.prototype.getModuleContainerAttributes = function () {
                var attributes = {};
                if (!this.navigationBarHidden) {
                    if (KASClient.getPlatform() == KASClient.Platform.iOS) {
                        if (!KASClient.isIOSVersionAbove11()) {
                            attributes["margin-top"] = NAVIGATION_BAR_HEIGHT_IOS;
                        }
                    }
                    else {
                        attributes["margin-top"] = NAVIGATION_BAR_HEIGHT_ANDROID;
                    }
                }
                if (!this.bottomBarHidden) {
                    if (!KASClient.isIOSVersionAbove11()) {
                        attributes["margin-bottom"] = BOTTOM_BAR_HEIGHT;
                    }
                }
                attributes["background-color"] = CLEAR_COLOR;
                attributes["padding"] = MODULE_GAP;
                attributes["display"] = "flex";
                attributes["flex"] = "1 1 auto";
                attributes["flex-direction"] = "column";
                return Object.assign(attributes, this.attributes);
            };
            KASFormModuleContainer.prototype.getNoPaddingModuleAttribute = function () {
                var attributes = {};
                attributes["margin"] = "0 -4pt 4pt -4pt";
                return attributes;
            };
            return KASFormModuleContainer;
        }());
        UI.KASFormModuleContainer = KASFormModuleContainer;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        var KASFormPage = /** @class */ (function () {
            function KASFormPage() {
                this.navigationBar = new UI.KASFormPageNavigationBar();
                this.moduleContainer = new UI.KASFormModuleContainer();
                this.bottomBar = new UI.KASFormPageBottomBar();
                this.pageWillAppearCallback = null;
                this.pageWillDisappearCallback = null;
                this.view = null;
                this.currentHeight = null;
            }
            KASFormPage.prototype.getView = function () {
                if (this.view == null) {
                    var views = [];
                    if (!KASFormPage.hideNavigationBar) {
                        var navigationBarDiv = this.navigationBar.getView();
                        views.push(navigationBarDiv);
                    }
                    this.moduleContainer.navigationBarHidden = KASFormPage.hideNavigationBar;
                    this.moduleContainer.bottomBarHidden = !(this.shouldShowBottomBar());
                    var moduleContainerDiv = this.moduleContainer.getView();
                    views.push(moduleContainerDiv);
                    if (this.shouldShowBottomBar()) {
                        var bottomBarDiv = this.bottomBar.getView();
                        views.push(bottomBarDiv);
                    }
                    this.view = UI.getVerticalDiv(views, this.getPageAttributes());
                }
                return this.view;
            };
            KASFormPage.prototype.updateNavigationBar = function () {
                if (this.view && !KASFormPage.hideNavigationBar) {
                    var oldNavigationBarDiv = this.navigationBar.getView();
                    var newNavigationBarDiv = this.navigationBar.recreateView();
                    UI.replaceElement(newNavigationBarDiv, oldNavigationBarDiv, this.view);
                }
            };
            KASFormPage.prototype.shouldShowBottomBar = function () {
                return (this.bottomBar.elements && this.bottomBar.elements.length > 0);
            };
            KASFormPage.prototype.recreateView = function () {
                this.view = null;
                return this.getView();
            };
            KASFormPage.prototype.pageWillAppear = function () {
                this.moduleContainer.setBodyBackgroundColor();
                if (this.pageWillAppearCallback) {
                    this.pageWillAppearCallback();
                }
            };
            KASFormPage.prototype.pageWillDisappear = function () {
                if (this.pageWillDisappearCallback) {
                    this.pageWillDisappearCallback();
                }
            };
            KASFormPage.prototype.hidePage = function () {
                this.view.style.left = "calc(-" + this.view.style.width + ")";
                this.currentHeight = this.view.style.height;
                this.view.style.height = "0";
                this.navigationBar.getView().style.position = "absolute";
                this.bottomBar.getView().style.position = "absolute";
                this.view.setAttribute(UI.KASFormAccessibilityKey.Hidden, "true");
            };
            KASFormPage.prototype.showPage = function () {
                this.view.style.height = this.currentHeight;
                this.view.style.left = "0";
                if (!KASClient.isIOSVersionAbove11()) {
                    this.navigationBar.getView().style.position = "fixed";
                    this.bottomBar.getView().style.position = "fixed";
                }
                else {
                    this.navigationBar.getView().style.position = "static";
                    this.bottomBar.getView().style.position = "static";
                }
                KASClient.Internal.screenChanged(this.navigationBar.title);
                this.view.removeAttribute(UI.KASFormAccessibilityKey.Hidden);
            };
            KASFormPage.prototype.getPageAttributes = function () {
                var attributes = {};
                attributes["position"] = "absolute";
                attributes["width"] = "100%";
                attributes["margin"] = "0";
                attributes["padding"] = "0";
                attributes["background-color"] = CLEAR_COLOR;
                attributes["display"] = "flex";
                attributes["flex"] = "1 1 auto";
                attributes["flex-direction"] = "column";
                attributes["-webkit-touch-callout"] = "none";
                attributes["-moz-user-select"] = "none";
                attributes["-webkit-user-select"] = "none";
                attributes["-ms-user-select"] = "none";
                attributes["-webkit-tap-highlight-color"] = CLEAR_COLOR;
                return attributes;
            };
            KASFormPage.hideNavigationBar = false;
            return KASFormPage;
        }());
        UI.KASFormPage = KASFormPage;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        var KASFormPageBottomBar = /** @class */ (function () {
            function KASFormPageBottomBar() {
                this.elements = [];
                this.attributes = null;
                this.view = null;
            }
            KASFormPageBottomBar.prototype.getView = function () {
                if (this.view == null) {
                    this.view = UI.getHorizontalDiv(this.elements, this.getBottomBarAttributes());
                }
                return this.view;
            };
            KASFormPageBottomBar.prototype.recreateView = function () {
                this.view = null;
                return this.getView();
            };
            KASFormPageBottomBar.prototype.getBottomBarAttributes = function () {
                var attributes = {};
                if (!KASClient.isIOSVersionAbove11()) {
                    attributes["position"] = "fixed";
                }
                attributes["left"] = "0";
                attributes["right"] = "0";
                attributes["bottom"] = "0";
                attributes["height"] = BOTTOM_BAR_HEIGHT;
                attributes["z-index"] = 1;
                attributes["background-color"] = "white";
                attributes["box-shadow"] = "0pt 2pt 4pt " + SHADOW_COLOR;
                attributes["font-size"] = UI.getScaledFontSize("12pt");
                attributes["font-weight"] = SEMIBOLD_FONT_WEIGHT;
                attributes["color"] = BLUE_COLOR;
                return Object.assign(attributes, this.attributes);
            };
            return KASFormPageBottomBar;
        }());
        UI.KASFormPageBottomBar = KASFormPageBottomBar;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        var KASFormPageNavigationBar = /** @class */ (function () {
            function KASFormPageNavigationBar() {
                this.backAsset = null;
                this.backAction = null;
                this.backAccessibilityLabel = null; // For Accessibility text
                this.iconPath = null;
                this.iconView = null;
                this.title = null;
                this.subtitle = null;
                //// Deprecated Now : Use rightButtonElements instead ////
                this.rightButtonTitle = null;
                this.rightButtonAction = null;
                ////////////////////////////////////////////////////
                this.rightButtonElements = [];
                this.attributes = null;
                // For debugging
                this.titleAction = null;
                this.subtitleDiv = null;
                this.titleDiv = null;
                this.view = null;
            }
            KASFormPageNavigationBar.prototype.getView = function () {
                if (this.view == null) {
                    var backIcon = null;
                    if (this.backAsset == null) {
                        var image = ((KASClient.getPlatform() == KASClient.Platform.iOS) ? UI.Assets.navigationBackiOS : UI.Assets.navigationBackAndroid);
                        backIcon = UI.getBase64Image(image, this.getBackIconAttributes());
                    }
                    else {
                        backIcon = UI.getImage(this.backAsset, this.getBackIconAttributes());
                    }
                    UI.setAccessibilityAttribute(backIcon, UI.KASFormAccessibilityKey.Hidden, "true");
                    var backIconDiv = UI.getHorizontalDiv([backIcon], this.getBackIconContainerAttributes());
                    UI.setAccessibilityBasic(backIconDiv, false, UI.KASFormAccessibilityRole.Button, this.backAccessibilityLabel ? this.backAccessibilityLabel : KASClient.Internal.getKASClientString("KASFormPageBackIcon"));
                    UI.addClickEvent(backIconDiv, this.backAction);
                    var iconDiv = null;
                    if (this.iconPath) {
                        iconDiv = UI.getImage(this.iconPath, this.getIconAttributes());
                        UI.setAccessibilityAttribute(iconDiv, UI.KASFormAccessibilityKey.Hidden, "true");
                    }
                    else if (this.iconView) {
                        UI.addCSS(this.iconView, this.getIconAttributes());
                        iconDiv = this.iconView;
                        UI.setAccessibilityAttribute(iconDiv, UI.KASFormAccessibilityKey.Hidden, "true");
                    }
                    if (this.title) {
                        this.titleDiv = UI.getLabel(this.title, this.getTitleAttributes(), false);
                        UI.setAccessibilityBasic(this.titleDiv, false, UI.KASFormAccessibilityRole.Text);
                        UI.addClickEvent(this.titleDiv, this.titleAction);
                    }
                    if (this.subtitle) {
                        this.subtitleDiv = UI.getLabel(this.subtitle, this.getSubtitleAttributes(), false);
                        UI.setAccessibilityBasic(this.subtitleDiv, false, UI.KASFormAccessibilityRole.Text);
                    }
                    else {
                        this.subtitleDiv = null;
                    }
                    var rightButton = null;
                    if (this.rightButtonTitle != null) {
                        rightButton = UI.getLabel(this.rightButtonTitle, KASFormPageNavigationBar.getRightButtonAttributes(), false);
                        UI.setAccessibilityBasic(rightButton, false, UI.KASFormAccessibilityRole.Button);
                        UI.addClickEvent(rightButton, this.rightButtonAction);
                    }
                    if (rightButton != null) {
                        this.rightButtonElements = [rightButton];
                    }
                    var titleSubtitleDiv = UI.getVerticalDiv([this.titleDiv, this.subtitleDiv], this.getTitleSubtitleAttributes());
                    UI.setAccessibilityBasic(titleSubtitleDiv, false, UI.KASFormAccessibilityRole.None, "");
                    this.view = UI.getHorizontalDiv([backIconDiv, iconDiv, UI.getSpace("8pt"), titleSubtitleDiv, UI.getFlexibleSpace()].concat(this.rightButtonElements), this.getNavigationBarAttributes());
                }
                return this.view;
            };
            KASFormPageNavigationBar.prototype.getTitle = function () {
                if (this.titleDiv != null) {
                    return this.titleDiv.innerText;
                }
            };
            KASFormPageNavigationBar.prototype.recreateView = function () {
                this.view = null;
                return this.getView();
            };
            KASFormPageNavigationBar.prototype.updateSubtitle = function () {
                if (this.subtitleDiv) {
                    UI.setText(this.subtitleDiv, this.subtitle);
                }
                // Else view is not yet inflated
            };
            KASFormPageNavigationBar.prototype.updateTitle = function () {
                if (this.titleDiv) {
                    UI.setText(this.titleDiv, this.title);
                }
                // Else view is not yet inflated
            };
            KASFormPageNavigationBar.getNavBarButton = function (buttonTitle, buttonAction) {
                var button = UI.getLabel(buttonTitle, KASFormPageNavigationBar.getRightButtonAttributes(), false);
                UI.setAccessibilityBasic(button, false, UI.KASFormAccessibilityRole.Button);
                UI.addClickEvent(button, buttonAction);
                return button;
            };
            KASFormPageNavigationBar.prototype.getNavigationBarAttributes = function () {
                var attributes = {};
                if (!KASClient.isIOSVersionAbove11()) {
                    attributes["position"] = "fixed";
                }
                attributes["top"] = "0";
                attributes["left"] = "0";
                attributes["right"] = "0";
                attributes["padding-bottom"] = (5.0 / iOSFontSizeScaleMultiplier) + "pt";
                attributes["align-items"] = "flex-end";
                if (KASClient.getPlatform() == KASClient.Platform.iOS) {
                    attributes["height"] = NAVIGATION_BAR_HEIGHT_IOS;
                }
                else {
                    attributes["height"] = NAVIGATION_BAR_HEIGHT_ANDROID;
                }
                attributes["z-index"] = 1;
                attributes["background-color"] = "white";
                attributes["box-shadow"] = "0pt 2pt 4pt 1pt " + SHADOW_COLOR;
                return Object.assign(attributes, this.attributes);
            };
            KASFormPageNavigationBar.prototype.getBackIconAttributes = function () {
                var attributes = {};
                if (KASClient.getPlatform() == KASClient.Platform.iOS) {
                    attributes["width"] = "10pt";
                    attributes["height"] = "16pt";
                }
                else {
                    attributes["width"] = "11.5pt";
                    attributes["height"] = "11.5pt";
                }
                attributes["object-fit"] = "contain";
                return attributes;
            };
            KASFormPageNavigationBar.prototype.getBackIconContainerAttributes = function () {
                var attributes = {};
                if (KASClient.getPlatform() == KASClient.Platform.iOS) {
                    attributes["padding"] = "6pt 14pt 6pt 9pt";
                }
                else {
                    attributes["padding"] = "8.125pt 12pt 8.125pt 14pt";
                }
                return attributes;
            };
            KASFormPageNavigationBar.prototype.getIconAttributes = function () {
                var attributes = {};
                attributes["height"] = "28pt";
                attributes["width"] = "28pt";
                attributes["flex"] = "none";
                return attributes;
            };
            KASFormPageNavigationBar.prototype.getTitleSubtitleAttributes = function () {
                var attributes = {};
                attributes["overflow"] = "hidden";
                return attributes;
            };
            KASFormPageNavigationBar.prototype.getTitleAttributes = function () {
                var attributes = {};
                if (this.subtitle && this.subtitle != "") {
                    attributes["font-size"] = UI.getScaledFontSize("12pt");
                }
                else {
                    attributes["font-size"] = UI.getScaledFontSize("14pt");
                    attributes["padding-bottom"] = (5 / iOSFontSizeScaleMultiplier) + "pt";
                }
                attributes["font-weight"] = REGULAR_FONT_WEIGHT;
                attributes["color"] = TEXT_PRIMARY_COLOR;
                attributes["max-width"] = "210pt";
                attributes["white-space"] = "nowrap";
                attributes["overflow"] = "hidden";
                attributes["text-overflow"] = "ellipsis";
                return attributes;
            };
            KASFormPageNavigationBar.prototype.getSubtitleAttributes = function () {
                var attributes = {};
                if (KASClient.getPlatform() == KASClient.Platform.Android) {
                    attributes["padding-top"] = "2pt";
                }
                attributes["font-size"] = UI.getScaledFontSize("10pt");
                attributes["font-weight"] = REGULAR_FONT_WEIGHT;
                attributes["color"] = TEXT_SECONDARY_COLOR;
                attributes["max-width"] = "200pt";
                attributes["white-space"] = "nowrap";
                attributes["overflow"] = "hidden";
                attributes["text-overflow"] = "ellipsis";
                return attributes;
            };
            KASFormPageNavigationBar.getRightButtonAttributes = function () {
                var attributes = {};
                attributes["font-size"] = UI.getScaledFontSize("14pt");
                attributes["padding-bottom"] = "5pt";
                attributes["padding-right"] = "12pt";
                attributes["padding-left"] = "8pt";
                attributes["font-weight"] = MEDIUM_FONT_WEIGHT;
                attributes["color"] = BLUE_COLOR;
                attributes["max-width"] = "210pt";
                attributes["white-space"] = "nowrap";
                attributes["overflow"] = "hidden";
                return attributes;
            };
            return KASFormPageNavigationBar;
        }());
        UI.KASFormPageNavigationBar = KASFormPageNavigationBar;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        var KASFormPageNavigator = /** @class */ (function () {
            function KASFormPageNavigator() {
                this.dismissAction = null;
                this.navigationStack = [];
                this.navigationScrollPositions = [];
                this.view = null;
            }
            KASFormPageNavigator.prototype.getView = function () {
                var _this = this;
                if (this.view == null) {
                    this.view = UI.getDiv(this.getPageNavigatorAttributes());
                    // For going back to Conversation
                    this.dismissAction = function () {
                        KASClient.App.dismissCurrentScreen();
                    };
                    // Below is required to handle hardware backpress event in Android
                    KASClient.App.registerHardwareBackPressCallback(function () {
                        var currentTopPage = _this.navigationStack[_this.navigationStack.length - 1];
                        if (currentTopPage.navigationBar.backAction != null)
                            currentTopPage.navigationBar.backAction();
                        else
                            _this.goBack();
                    });
                }
                return this.view;
            };
            KASFormPageNavigator.prototype.containsPages = function () {
                return (this.navigationStack.length > 0);
            };
            KASFormPageNavigator.prototype.pushPage = function (page) {
                if (this.navigationStack.length > 0) {
                    var currentTopPage = this.navigationStack[this.navigationStack.length - 1];
                    var currentScrollPosition = (document.documentElement.scrollTop || document.body.scrollTop);
                    this.navigationScrollPositions.push(currentScrollPosition);
                    currentTopPage.pageWillDisappear();
                    currentTopPage.hidePage();
                }
                if (page.navigationBar.backAction == null)
                    page.navigationBar.backAction = this.goBack.bind(this);
                this.navigationStack.push(page);
                page.pageWillAppear();
                UI.addElement(page.getView(), this.view);
                document.documentElement.scrollTop = document.body.scrollTop = 0;
                KASClient.Internal.screenChanged(page.navigationBar.getTitle());
            };
            KASFormPageNavigator.prototype.popPage = function () {
                if (this.navigationStack.length == 0) {
                    if (this.dismissAction) {
                        this.dismissAction();
                    }
                    return;
                }
                var poppedPage = this.navigationStack.pop();
                poppedPage.pageWillDisappear();
                if (this.navigationStack.length > 0) {
                    var currentTopPage = this.navigationStack[this.navigationStack.length - 1];
                    currentTopPage.pageWillAppear();
                    currentTopPage.showPage();
                    var savedScrollPosition = this.navigationScrollPositions.pop();
                    document.documentElement.scrollTop = document.body.scrollTop = savedScrollPosition;
                    KASClient.Internal.screenChanged(currentTopPage.navigationBar.getTitle());
                }
                UI.removeElement(poppedPage.getView(), this.view);
            };
            KASFormPageNavigator.prototype.popAllPages = function () {
                for (var i = 0; i < this.navigationStack.length; i++) {
                    this.popPage();
                }
            };
            KASFormPageNavigator.prototype.goBack = function () {
                if (this.navigationStack.length > 1) {
                    this.popPage();
                }
                else if (this.dismissAction) {
                    this.dismissAction();
                }
            };
            KASFormPageNavigator.prototype.getPageNavigatorAttributes = function () {
                var attributes = {};
                return attributes;
            };
            return KASFormPageNavigator;
        }());
        UI.KASFormPageNavigator = KASFormPageNavigator;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        var KASFormQuestionResponsesModule = /** @class */ (function () {
            function KASFormQuestionResponsesModule() {
                this.questionTitle = null;
                this.responsesHeader = null;
                this.questionType = KASClient.KASQuestionType.None;
                this.questionResult = null;
                this.optionSelectedAction = null;
                this.sumTitle = null;
                this.averageTitle = null;
                this.aggregationNotApplicableTitle = null;
                this.view = null;
            }
            KASFormQuestionResponsesModule.prototype.getView = function () {
                if (!this.view) {
                    this.view = UI.getVerticalDiv([this.getQuestionTitleRow(), this.getResponseHeaderRow(), this.getResponsesRow()], this.getQuestionDetailsAttributes());
                }
                return this.view;
            };
            KASFormQuestionResponsesModule.prototype.recreateView = function () {
                this.view = null;
                return this.getView();
            };
            KASFormQuestionResponsesModule.prototype.getQuestionTitleRow = function () {
                if (this.questionTitle != null) {
                    return UI.getLabel(this.questionTitle, this.getQuestionTitleAttributes());
                }
                else {
                    return null;
                }
            };
            KASFormQuestionResponsesModule.prototype.getResponseHeaderRow = function () {
                if (this.responsesHeader != null) {
                    return UI.getLabel(this.responsesHeader, this.getResponseHeaderAttributes());
                }
                else {
                    return null;
                }
            };
            KASFormQuestionResponsesModule.prototype.getResponsesRow = function () {
                if (this.questionType == KASClient.KASQuestionType.SingleSelect ||
                    this.questionType == KASClient.KASQuestionType.MultiSelect ||
                    this.questionType == KASClient.KASQuestionType.SingleSelectExternal) {
                    var optionQuestionResult = (this.questionResult);
                    var counts = [];
                    var titles = [];
                    for (var optionId in optionQuestionResult.optionResults) {
                        var optionResult = optionQuestionResult.optionResults[optionId];
                        counts.push(optionResult.totalResponsesCount);
                        titles.push(optionResult.optionTitle);
                    }
                    var optionCountModule = new UI.KASFormCountImageTitleActionModule();
                    optionCountModule.counts = counts;
                    optionCountModule.titles = titles;
                    optionCountModule.rowAction = this.optionSelectedAction;
                    optionCountModule.getView();
                    for (var i = 0; i < optionCountModule.titles.length; i++) {
                        optionCountModule.setAccessibilityAttribute(i, KASClient.UI.KASFormAccessibilityKey.Hidden, "false");
                        optionCountModule.setAccessibilityAttribute(i, KASClient.UI.KASFormAccessibilityKey.Role, KASClient.UI.KASFormAccessibilityRole.Button);
                        optionCountModule.setAccessibilityAttribute(i, KASClient.UI.KASFormAccessibilityKey.Label, optionCountModule.titles[i] + ". " + optionCountModule.counts[i]);
                    }
                    UI.addCSS(optionCountModule.contentView, this.getOptionCountModuleAttributes());
                    return optionCountModule.contentView;
                }
                else if (this.questionType == KASClient.KASQuestionType.Numeric) {
                    var numericQuestionResult = (this.questionResult);
                    var sum = KASClient.truncatedDecimalString(numericQuestionResult.sum);
                    var sumRow = this.getTitleCountRow(this.sumTitle, sum);
                    UI.setAccessibilityBasic(sumRow, false, UI.KASFormAccessibilityRole.Text, this.sumTitle + ". " + sum);
                    UI.addCSS(sumRow, this.getSumRowAttributes());
                    var avg = KASClient.truncatedDecimalString(numericQuestionResult.average);
                    var avgRow = this.getTitleCountRow(this.averageTitle, avg);
                    UI.setAccessibilityBasic(avgRow, false, UI.KASFormAccessibilityRole.Text, this.averageTitle + ". " + avg);
                    return UI.getVerticalDiv([sumRow, avgRow]);
                }
                else if (this.questionType == KASClient.KASQuestionType.AttachmentList) {
                    var attachmentListResult = this.questionResult;
                    // Currently aggregation view is supported only for list of images type response
                    if (attachmentListResult.attachmentListType == KASClient.AttachmentListResponseType.LIST_OF_IMAGES) {
                        var imageResponseAggregationModule = new UI.KASFormImageResponseAggregationRecyclerModule();
                        imageResponseAggregationModule.userInfo = attachmentListResult.userInfo;
                        imageResponseAggregationModule.timestamps = attachmentListResult.timeStamps;
                        imageResponseAggregationModule.images = [];
                        for (var imageListIndex = 0; imageListIndex < imageResponseAggregationModule.userInfo.length; imageListIndex++) {
                            var imageJSONArray = JSON.parse(attachmentListResult.attachmentsResponseJSONStrings[imageListIndex]);
                            var imagesAttachments = [];
                            for (var imageIndex = 0; imageIndex < imageJSONArray.length; imageIndex++) {
                                var imageAttachment = KASClient.KASImageAttachment.fromJSON(imageJSONArray[imageIndex]);
                                imagesAttachments.push(imageAttachment);
                            }
                            imageResponseAggregationModule.images.push(imagesAttachments);
                        }
                        return imageResponseAggregationModule.getView();
                    }
                    else {
                        return UI.getLabel(this.aggregationNotApplicableTitle, this.getNumericResultsRowAttributes());
                    }
                }
                else {
                    return UI.getLabel(this.aggregationNotApplicableTitle, this.getNumericResultsRowAttributes());
                }
            };
            KASFormQuestionResponsesModule.prototype.getTitleCountRow = function (title, count) {
                var titleDiv = UI.getLabel(title, this.getRowTitleAttributes());
                var countDiv = UI.getLabel(count, this.getRowCountAttributes());
                return UI.getHorizontalDiv([titleDiv, countDiv], this.getNumericResultsRowAttributes());
            };
            KASFormQuestionResponsesModule.prototype.getNumericResultsRowAttributes = function () {
                var attributes = UI.getCoverRestOfTheSpaceAttributes();
                attributes["padding"] = UI.getScaledFontSize("12pt");
                attributes["color"] = TEXT_PRIMARY_COLOR;
                return attributes;
            };
            KASFormQuestionResponsesModule.prototype.getSumRowAttributes = function () {
                var attributes = UI.getCoverRestOfTheSpaceAttributes();
                attributes["border-bottom"] = LINE_SEPARATOR_ATTRIBUTE;
                return attributes;
            };
            KASFormQuestionResponsesModule.prototype.getRowTitleAttributes = function () {
                var attributes = {};
                attributes["font-size"] = UI.getScaledFontSize("12pt");
                attributes["font-weight"] = REGULAR_FONT_WEIGHT;
                attributes["color"] = TEXT_PRIMARY_COLOR;
                return attributes;
            };
            KASFormQuestionResponsesModule.prototype.getRowCountAttributes = function () {
                var attributes = {};
                attributes["font-size"] = UI.getScaledFontSize("12pt");
                attributes["font-weight"] = SEMIBOLD_FONT_WEIGHT;
                attributes["color"] = TEXT_PRIMARY_COLOR;
                return attributes;
            };
            KASFormQuestionResponsesModule.prototype.getQuestionDetailsAttributes = function () {
                var attributes = {};
                attributes["background-color"] = "rgb(255, 255, 255)";
                attributes["display"] = "flex";
                attributes["flex-direction"] = "column";
                attributes["flex"] = "1";
                return attributes;
            };
            KASFormQuestionResponsesModule.prototype.getQuestionTitleAttributes = function () {
                var attributes = {};
                attributes["padding"] = "12pt 12pt 32pt 12pt";
                attributes["font-size"] = UI.getScaledFontSize("12pt");
                attributes["font-weight"] = REGULAR_FONT_WEIGHT;
                attributes["color"] = TEXT_PRIMARY_COLOR;
                return attributes;
            };
            KASFormQuestionResponsesModule.prototype.getResponseHeaderAttributes = function () {
                var attributes = {};
                attributes["padding"] = "12pt";
                attributes["border-top"] = LINE_SEPARATOR_ATTRIBUTE;
                attributes["font-size"] = UI.getScaledFontSize("10pt");
                attributes["font-weight"] = REGULAR_FONT_WEIGHT;
                attributes["color"] = TEXT_SECONDARY_COLOR;
                return attributes;
            };
            KASFormQuestionResponsesModule.prototype.getOptionCountModuleAttributes = function () {
                var attributes = UI.getCoverRestOfTheSpaceAttributes();
                return attributes;
            };
            return KASFormQuestionResponsesModule;
        }());
        UI.KASFormQuestionResponsesModule = KASFormQuestionResponsesModule;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
/// <reference path="./KASFormImageTitleSubtitleActionModule.ts" />
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        var KASFormTimelineModule = /** @class */ (function (_super) {
            __extends(KASFormTimelineModule, _super);
            function KASFormTimelineModule() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            KASFormTimelineModule.prototype.getModuleAttributes = function () {
                var attributes = {};
                attributes["margin"] = "8pt 5pt 8pt 15pt";
                attributes["border-radius"] = "0";
                attributes["position"] = "relative";
                return Object.assign(attributes, this.attributes);
            };
            KASFormTimelineModule.prototype.getRowAttributes = function (i) {
                var attributes = {};
                attributes["padding"] = "0pt 12pt 0pt 12pt";
                if (this.getNumberOfRows() > i + 1) {
                    attributes["border-left"] = "1pt dashed #98a3af";
                }
                attributes["height"] = "auto";
                return attributes;
            };
            KASFormTimelineModule.prototype.getRowWithImageAttributes = function () {
                var attributes = {};
                attributes["justify-content"] = "flex-start";
                attributes["align-items"] = "flex-start";
                return attributes;
            };
            KASFormTimelineModule.prototype.getSpaceAttributes = function () {
                return UI.getSpace("8pt");
            };
            KASFormTimelineModule.prototype.getImageAttributes = function (i) {
                var attributes = {};
                attributes["width"] = "12pt";
                attributes["height"] = "auto";
                attributes["overflow"] = "none";
                attributes["object-fit"] = "contain";
                attributes["margin-left"] = "-18pt";
                return attributes;
            };
            KASFormTimelineModule.prototype.getTitleAttributes = function (i) {
                var attributes = {};
                attributes["font-size"] = UI.getScaledFontSize("10pt");
                attributes["font-weight"] = REGULAR_FONT_WEIGHT;
                attributes["color"] = "#6f7e8f";
                return attributes;
            };
            KASFormTimelineModule.prototype.getSubtitleAttributes = function (i) {
                var attributes = {};
                attributes["font-size"] = UI.getScaledFontSize("12pt");
                attributes["font-weight"] = REGULAR_FONT_WEIGHT;
                attributes["color"] = "#26374c";
                attributes["padding-bottom"] = "10pt";
                return attributes;
            };
            return KASFormTimelineModule;
        }(UI.KASFormImageTitleSubtitleActionModule));
        UI.KASFormTimelineModule = KASFormTimelineModule;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
/// <reference path="./KASFormRowsModule.ts" />
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        var KASFormUserTitleSubtitleActionModule = /** @class */ (function (_super) {
            __extends(KASFormUserTitleSubtitleActionModule, _super);
            function KASFormUserTitleSubtitleActionModule() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.users = null;
                _this.titles = null;
                _this.subtitles = null;
                return _this;
            }
            KASFormUserTitleSubtitleActionModule.prototype.getNumberOfRows = function () {
                if (this.users == null) {
                    return 0;
                }
                return this.users.length;
            };
            KASFormUserTitleSubtitleActionModule.prototype.getRowView = function (i) {
                var profilePicDiv = UI.getProfilePic(this.users[i]);
                UI.setAccessibilityAttribute(profilePicDiv, UI.KASFormAccessibilityKey.Hidden, "true");
                var rowItems = [];
                var profileName = this.users[i].name;
                var profileNameDiv = UI.getLabel(profileName, this.getUserNameAttributes(i));
                rowItems.push(profileNameDiv);
                if (this.titles && this.titles.length > i && this.titles[i]) {
                    var titleLabel = UI.getLabel(this.titles[i], this.getTitleAttributes(i));
                    rowItems.push(titleLabel);
                }
                if (this.subtitles && this.subtitles.length > i && this.subtitles[i]) {
                    var subtitleLabel = UI.getLabel(this.subtitles[i], this.getSubtitleAttributes(i));
                    rowItems.push(subtitleLabel);
                }
                var textDiv = UI.getVerticalDiv(rowItems, UI.getCoverRestOfTheSpaceAttributes());
                if (KASClient.Version.clientSupports(KASClient.Version.VERSION_26)) {
                    UI.setAccessibilityBasic(profilePicDiv, false, UI.KASFormAccessibilityRole.Button, KASClient.Internal.getKASClientString("ProfilePhotoHint"));
                    profilePicDiv.onclick = function (event) {
                        KASClient.App.showUserProfileAsync(this.users[i].id, true, null);
                        event.stopPropagation();
                    }.bind(this);
                }
                return UI.getHorizontalDiv([profilePicDiv, UI.getSpace(), textDiv]);
            };
            KASFormUserTitleSubtitleActionModule.prototype.implementDefaultRowViewClick = function (i) {
                if (KASClient.Version.clientSupports(KASClient.Version.VERSION_26)) {
                    KASClient.App.showUserProfileAsync(this.users[i].id, true, null);
                }
            };
            KASFormUserTitleSubtitleActionModule.prototype.getUserNameAttributes = function (i) {
                var attributes = {};
                if (this.subtitles && this.subtitles.length > 0) {
                    attributes["font-size"] = UI.getScaledFontSize("10pt");
                    attributes["font-weight"] = MEDIUM_FONT_WEIGHT;
                    attributes["color"] = TEXT_PRIMARY_COLOR;
                }
                else {
                    attributes["font-size"] = UI.getScaledFontSize("12pt");
                    attributes["font-weight"] = MEDIUM_FONT_WEIGHT;
                    attributes["color"] = TEXT_PRIMARY_COLOR;
                }
                return attributes;
            };
            KASFormUserTitleSubtitleActionModule.prototype.getTitleAttributes = function (i) {
                var attributes = {};
                if (this.subtitles && this.subtitles.length > 0) {
                    attributes["font-size"] = UI.getScaledFontSize("12pt");
                    attributes["font-weight"] = REGULAR_FONT_WEIGHT;
                    attributes["color"] = TEXT_PRIMARY_COLOR;
                }
                else {
                    attributes["font-size"] = UI.getScaledFontSize("10pt");
                    attributes["font-weight"] = REGULAR_FONT_WEIGHT;
                    attributes["color"] = TEXT_SECONDARY_COLOR;
                }
                return attributes;
            };
            KASFormUserTitleSubtitleActionModule.prototype.getSubtitleAttributes = function (i) {
                var attributes = {};
                attributes["font-size"] = UI.getScaledFontSize("10pt");
                attributes["font-weight"] = REGULAR_FONT_WEIGHT;
                attributes["color"] = TEXT_SECONDARY_COLOR;
                return attributes;
            };
            return KASFormUserTitleSubtitleActionModule;
        }(UI.KASFormRowsModule));
        UI.KASFormUserTitleSubtitleActionModule = KASFormUserTitleSubtitleActionModule;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
// Uncomment below to start compiling KASClientUI.js
/// <reference path="../../../js/declarations/KASClientCore.d.ts"/>
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        function showIncompatibleScreen() {
            return KASClient.showIncompatibleScreen();
        }
        UI.showIncompatibleScreen = showIncompatibleScreen;
        /////////////////// General Module Utility ///////////////////
        function getProfilePic(user, attributes) {
            if (attributes === void 0) { attributes = null; }
            return KASClient.getProfilePic(user, attributes);
        }
        UI.getProfilePic = getProfilePic;
        function getDefaultProfilePicAttributes(user) {
            return KASClient.getDefaultProfilePicAttributes(user);
        }
        UI.getDefaultProfilePicAttributes = getDefaultProfilePicAttributes;
        function getHorizontalDiv(childrenElements, attributes) {
            if (attributes === void 0) { attributes = null; }
            return KASClient.getHorizontalDiv(childrenElements, attributes);
        }
        UI.getHorizontalDiv = getHorizontalDiv;
        function getVerticalDiv(childrenElements, attributes) {
            if (attributes === void 0) { attributes = null; }
            return KASClient.getVerticalDiv(childrenElements, attributes);
        }
        UI.getVerticalDiv = getVerticalDiv;
        function getFlexibleSpace() {
            return getDiv(getCoverRestOfTheSpaceAttributes());
        }
        UI.getFlexibleSpace = getFlexibleSpace;
        function getSpace(length) {
            if (length === void 0) { length = DEFAULT_SPACE_LENGTH; }
            return getDiv(getSpaceAttributes(length));
        }
        UI.getSpace = getSpace;
        function getLabel(text, attributes, showLinks) {
            if (text === void 0) { text = null; }
            if (attributes === void 0) { attributes = null; }
            if (showLinks === void 0) { showLinks = true; }
            var label = KASClient.getLabel(text, attributes, showLinks);
            UI.setAccessibilityAttribute(label, UI.KASFormAccessibilityKey.Role, UI.KASFormAccessibilityRole.Text);
            return label;
        }
        UI.getLabel = getLabel;
        function getButton(title, clickEvent, attributes) {
            if (title === void 0) { title = null; }
            if (clickEvent === void 0) { clickEvent = null; }
            if (attributes === void 0) { attributes = null; }
            var button = KASClient.getButton(title, clickEvent, attributes);
            UI.setAccessibilityAttribute(button, UI.KASFormAccessibilityKey.Role, UI.KASFormAccessibilityRole.Button);
            return button;
        }
        UI.getButton = getButton;
        function setText(element, text, asHTML, showLinks) {
            if (text === void 0) { text = null; }
            if (asHTML === void 0) { asHTML = true; }
            if (showLinks === void 0) { showLinks = true; }
            KASClient.setText(element, text, asHTML, showLinks);
        }
        UI.setText = setText;
        function getBase64CircularImage(data, dimen, attributes) {
            if (data === void 0) { data = null; }
            if (dimen === void 0) { dimen = DEFAULT_IMAGE_DIMEN; }
            if (attributes === void 0) { attributes = null; }
            return getBase64Image(data, Object.assign(getCircularImageAttributes(dimen), attributes));
        }
        UI.getBase64CircularImage = getBase64CircularImage;
        function getCircularImage(path, dimen, attributes) {
            if (path === void 0) { path = null; }
            if (dimen === void 0) { dimen = DEFAULT_IMAGE_DIMEN; }
            if (attributes === void 0) { attributes = null; }
            return getImage(path, Object.assign(getCircularImageAttributes(dimen), attributes));
        }
        UI.getCircularImage = getCircularImage;
        function getBase64Image(data, attributes) {
            if (data === void 0) { data = null; }
            if (attributes === void 0) { attributes = null; }
            return KASClient.getBase64Image(data, attributes);
        }
        UI.getBase64Image = getBase64Image;
        function getBase64Src(data) {
            return "data:image/png;base64," + data;
        }
        UI.getBase64Src = getBase64Src;
        function getImage(path, attributes) {
            if (path === void 0) { path = null; }
            if (attributes === void 0) { attributes = null; }
            return KASClient.getImage(path, attributes);
        }
        UI.getImage = getImage;
        function getDiv(attributes) {
            if (attributes === void 0) { attributes = null; }
            return getElement("div", attributes);
        }
        UI.getDiv = getDiv;
        function getPrettyPrintDiv(attributes) {
            if (attributes === void 0) { attributes = null; }
            return getElement("pre", attributes);
        }
        UI.getPrettyPrintDiv = getPrettyPrintDiv;
        function getCanvas(width, height, attributes) {
            if (attributes === void 0) { attributes = null; }
            return KASClient.getCanvas(width, height, attributes);
        }
        UI.getCanvas = getCanvas;
        function getLoadingSpinner(attributes) {
            if (attributes === void 0) { attributes = null; }
            return getDiv(Object.assign(getLoadingSpinnerAttributes(), attributes));
        }
        UI.getLoadingSpinner = getLoadingSpinner;
        function getTable(attributes) {
            if (attributes === void 0) { attributes = null; }
            return getElement("table", attributes);
        }
        UI.getTable = getTable;
        function getTableRow(attributes) {
            if (attributes === void 0) { attributes = null; }
            return getElement("tr", attributes);
        }
        UI.getTableRow = getTableRow;
        function getTableDataCell(attributes) {
            if (attributes === void 0) { attributes = null; }
            return getElement("td", attributes);
        }
        UI.getTableDataCell = getTableDataCell;
        /////////////////// CSS Attributes ///////////////////
        function getHorizontalDivAttributes() {
            return KASClient.getHorizontalDivAttributes();
        }
        UI.getHorizontalDivAttributes = getHorizontalDivAttributes;
        function getVerticalDivAttributes() {
            return KASClient.getVerticalDivAttributes();
        }
        UI.getVerticalDivAttributes = getVerticalDivAttributes;
        function getCircularImageAttributes(dimen) {
            return KASClient.getCircularImageAttributes(dimen);
        }
        UI.getCircularImageAttributes = getCircularImageAttributes;
        function getImageAttributes() {
            return KASClient.getImageAttributes();
        }
        UI.getImageAttributes = getImageAttributes;
        function getLabelAttributes() {
            return KASClient.getLabelAttributes();
        }
        UI.getLabelAttributes = getLabelAttributes;
        function getSpaceAttributes(length) {
            return KASClient.getSpaceAttributes(length);
        }
        UI.getSpaceAttributes = getSpaceAttributes;
        function getCoverRestOfTheSpaceAttributes() {
            return KASClient.getCoverRestOfTheSpaceAttributes();
        }
        UI.getCoverRestOfTheSpaceAttributes = getCoverRestOfTheSpaceAttributes;
        function getLoadingSpinnerAttributes() {
            return KASClient.getLoadingSpinnerAttributes();
        }
        UI.getLoadingSpinnerAttributes = getLoadingSpinnerAttributes;
        /////////////////// General Utility ///////////////////
        function drawPieChart(data, colors, borderColor, canvas, canvasWidth, canvasHeight) {
            var ctx = canvas.getContext("2d");
            var total = 0;
            for (var i = 0; i < data.length; i++) {
                total += data[i];
            }
            var lineWidth = 1;
            var radius = canvasHeight / 2 - lineWidth;
            var counterClockWise = false;
            var startAngle = -(Math.PI / 2);
            for (var i = 0; i < data.length; i++) {
                ctx.fillStyle = colors[i];
                ctx.strokeStyle = borderColor;
                ctx.lineWidth = lineWidth;
                var endAngle = startAngle + (2 * Math.PI * (data[i] / total));
                ctx.beginPath();
                ctx.moveTo(canvasWidth / 2, canvasHeight / 2);
                ctx.arc(canvasWidth / 2, canvasHeight / 2, radius, startAngle, endAngle, counterClockWise);
                ctx.lineTo(canvasWidth / 2, canvasHeight / 2);
                ctx.fill();
                ctx.stroke();
                startAngle = endAngle;
            }
            UI.setAccessibilityAttribute(canvas, UI.KASFormAccessibilityKey.Hidden, "true");
        }
        UI.drawPieChart = drawPieChart;
        function addElement(element, parentElement) {
            if (element === void 0) { element = null; }
            if (parentElement === void 0) { parentElement = null; }
            KASClient.addElement(element, parentElement);
        }
        UI.addElement = addElement;
        function removeElement(element, parentElement) {
            if (element === void 0) { element = null; }
            if (parentElement === void 0) { parentElement = null; }
            KASClient.removeElement(element, parentElement);
        }
        UI.removeElement = removeElement;
        function replaceElement(newElement, oldElement, parentElement) {
            if (newElement === void 0) { newElement = null; }
            if (oldElement === void 0) { oldElement = null; }
            if (parentElement === void 0) { parentElement = null; }
            KASClient.replaceElement(newElement, oldElement, parentElement);
        }
        UI.replaceElement = replaceElement;
        function clearElement(element) {
            if (element === void 0) { element = null; }
            KASClient.clearElement(element);
        }
        UI.clearElement = clearElement;
        function getElement(elementTag, attributes) {
            if (attributes === void 0) { attributes = null; }
            return KASClient.getElement(elementTag, attributes);
        }
        UI.getElement = getElement;
        function addClickEvent(element, clickEvent) {
            KASClient.addClickEvent(element, clickEvent);
        }
        UI.addClickEvent = addClickEvent;
        function setId(element, id) {
            KASClient.setId(element, id);
        }
        UI.setId = setId;
        function setClass(element, className) {
            KASClient.setClass(element, className);
        }
        UI.setClass = setClass;
        function addCSS(element, attributes) {
            KASClient.addCSS(element, attributes);
        }
        UI.addCSS = addCSS;
        function getChevronIcon(attributes) {
            if (attributes === void 0) { attributes = null; }
            return getBase64Image(UI.Assets.chevron, Object.assign(getChevronIconAttributes(), attributes));
        }
        UI.getChevronIcon = getChevronIcon;
        function getEditIcon(attributes) {
            if (attributes === void 0) { attributes = null; }
            return getBase64Image(UI.Assets.editImage, Object.assign(getEditIconAttributes(), attributes));
        }
        UI.getEditIcon = getEditIcon;
        function getChevronIconAttributes() {
            var attributes = {};
            attributes["width"] = "7.5pt";
            attributes["height"] = "12pt";
            return attributes;
        }
        function getEditIconAttributes() {
            var attributes = {};
            attributes["position"] = "relative";
            attributes["bottom"] = "15px";
            attributes["right"] = "1px";
            attributes["width"] = "12px";
            attributes["height"] = "12px";
            attributes["object-fit"] = "contain";
            return attributes;
        }
        // For placeholder text, use below CSS in html
        /*  [contenteditable = true]:empty:before {
              content: attr(placeholder);
              color: #98a3af;
          display: block;
        }*/
        function getContentEditableSpan(text, placeholder, attributes, onInputEvent) {
            if (text === void 0) { text = ""; }
            if (placeholder === void 0) { placeholder = ""; }
            if (attributes === void 0) { attributes = null; }
            return KASClient.getContentEditableSpan(text, placeholder, attributes, onInputEvent);
        }
        UI.getContentEditableSpan = getContentEditableSpan;
        function highlightLinksInElement(element) {
            highlightLinksInElement(element);
        }
        UI.highlightLinksInElement = highlightLinksInElement;
        function showImageImmersiveView(path) {
            if (path === void 0) { path = null; }
            var alertAttributes = {
                "height": "100%",
                "width": "100%",
                "position": "fixed",
                "background-color": "black",
                "z-index": "2",
                "display": "flex",
                "flex": "1",
                "flex-direction": "column",
                "justify-content": "space-around"
            };
            var alertDiv = getElement("div", alertAttributes);
            var cancelButton = getBase64Image(UI.Assets.cancel, { "position": "absolute", "width": "20px", "height": "20px", "left": "10px", "top": "30px" });
            cancelButton.onclick = function () {
                removeElement(alertDiv, document.body);
            };
            addElement(cancelButton, alertDiv);
            var alertView = getElement("div", {
                "max-height": "80%",
                "background-color": "transparent",
                "display": "flex",
                "flex-direction": "column",
                "margin-left": "0px",
                "margin-right": "0px"
            });
            addElement(alertView, alertDiv);
            var imageView = getImage(path, {
                "object-fit": "contain"
            });
            addElement(imageView, alertView);
            addElement(alertDiv, document.body);
        }
        UI.showImageImmersiveView = showImageImmersiveView;
        function showAlertDailogWithBackHandling(title, message, okButtonTitle, okButtonAction, cancelButtonTitle, cancelButtonAction) {
            var currentBackCallback = KASClient.App.hardwareBackPressCallback;
            KASClient.App.registerHardwareBackPressCallback(function () {
                removeElement(alertDiv, document.body);
                KASClient.App.registerHardwareBackPressCallback(currentBackCallback);
            });
            var alertDiv = getAlertDailog(title, message, okButtonTitle, function () {
                KASClient.App.registerHardwareBackPressCallback(currentBackCallback);
                if (okButtonAction) {
                    okButtonAction();
                }
            }, cancelButtonTitle, function () {
                KASClient.App.registerHardwareBackPressCallback(currentBackCallback);
                if (cancelButtonAction) {
                    cancelButtonAction();
                }
            });
            addElement(alertDiv, document.body);
        }
        UI.showAlertDailogWithBackHandling = showAlertDailogWithBackHandling;
        function showAlertDailog(title, message, okButtonTitle, okButtonAction, cancelButtonTitle, cancelButtonAction) {
            var alertDiv = getAlertDailog(title, message, okButtonTitle, okButtonAction, cancelButtonTitle, cancelButtonAction);
            addElement(alertDiv, document.body);
        }
        UI.showAlertDailog = showAlertDailog;
        function getAlertDailog(title, message, okButtonTitle, okButtonAction, cancelButtonTitle, cancelButtonAction) {
            var alertAttributes = {
                "height": "100%",
                "width": "100%",
                "position": "fixed",
                "top": "0",
                "left": "0",
                "background-color": "rgba(50, 72, 95, 0.5)",
                "z-index": "2",
                "display": "flex",
                "flex": "1",
                "flex-direction": "column",
                "justify-content": "space-around"
            };
            var alertDiv = getElement("div", alertAttributes);
            var alertView = getElement("div", { "margin": "20px", "padding": "20px", "background-color": "white", "display": "flex", "flex-direction": "column" });
            addElement(alertView, alertDiv);
            var alertTitleView = getLabel(title, { "color": "#32485f", "font-size": getScaledFontSize("20px"), "font-weight": "600" });
            addElement(alertTitleView, alertView);
            var alertMessageView = getLabel(message, { "margin-top": "20px", "margin-bottom": "20px", "color": "#6f7e8f", "font-size": getScaledFontSize("16px"), "overflow": "auto" });
            addElement(alertMessageView, alertView);
            var alertBottomView = getElement("div", { "display": "flex", "justify-content": "flex-end" });
            addElement(alertBottomView, alertView);
            var buttonAttributes = {
                "font-size": getScaledFontSize("14px"),
                "font-weight": "600",
                "margin-left": "20px",
                "color": BLUE_COLOR,
                "-webkit-appearance": "none",
                "border": "none"
            };
            if (cancelButtonTitle != null && cancelButtonTitle != "") {
                var cancelButton = getLabel(cancelButtonTitle, buttonAttributes);
                cancelButton.onclick = function () {
                    removeElement(alertDiv, document.body);
                    if (cancelButtonAction)
                        cancelButtonAction();
                };
                KASClient.UI.setAccessibilityBasic(cancelButton, false, UI.KASFormAccessibilityRole.Button);
                addElement(cancelButton, alertBottomView);
            }
            if (okButtonTitle != null && okButtonTitle != "") {
                var okButton = getLabel(okButtonTitle, buttonAttributes);
                okButton.onclick = function () {
                    removeElement(alertDiv, document.body);
                    if (okButtonAction)
                        okButtonAction();
                };
                KASClient.UI.setAccessibilityBasic(okButton, false, UI.KASFormAccessibilityRole.Button);
                addElement(okButton, alertBottomView);
            }
            return alertDiv;
        }
        UI.getAlertDailog = getAlertDailog;
        /* should dismiss view when user taps on gray-area. Required to add a transparent accessibility label to let user know that it can be dismissed by tapping in background */
        function getAlertDialogWithDiv(divElement, dismissOnBackgroundTap, cancelCallBack) {
            if (divElement == null) {
                return null;
            }
            var alertFullScreenDivAttributes = {
                "height": "100%",
                "width": "100%",
                "position": "fixed",
                "display": "none",
                "background-color": "rgba(50, 72, 95, 0.5)",
                "z-index": "2",
            };
            var alertFullScreenDiv = getDiv(alertFullScreenDivAttributes);
            if (dismissOnBackgroundTap) {
                var hiddenCancelButton = getButton("", cancelCallBack, { "postion": "fixed", "width": "10px", "height": "10px", "margin-top": "0px", "margin-left": "0px", "background-color": "Transparent" });
                UI.setAccessibilityBasic(hiddenCancelButton, false, UI.KASFormAccessibilityRole.Button, KASClient.Internal.getKASClientString("KASAlertViewsHiddenDismissButtonAccessibilityText"));
                addElement(hiddenCancelButton, alertFullScreenDiv);
            }
            addElement(divElement, alertFullScreenDiv);
            return alertFullScreenDiv;
        }
        UI.getAlertDialogWithDiv = getAlertDialogWithDiv;
        /// returns "u/d/r/l" as string for swipe directions (up/down/right/left) respectively
        /// https://stackoverflow.com/questions/15084675/how-to-implement-swipe-gestures-for-mobile-devices
        function addSwipeGesture(element, callback) {
            var swipe_det = new Object();
            var sX = 0, sY = 0, eX = 0, eY = 0;
            var min_x = 30, max_x = 30, min_y = 50, max_y = 60;
            var direc = "";
            element.addEventListener('touchstart', function (e) {
                var t = e.touches[0];
                sX = t.screenX;
                sY = t.screenY;
            }, false);
            element.addEventListener('touchmove', function (e) {
                e.preventDefault();
                var t = e.touches[0];
                eX = t.screenX;
                eY = t.screenY;
            }, false);
            element.addEventListener('touchend', function (e) {
                //horizontal detection
                if ((((eX - min_x > sX) || (eX + min_x < sX)) && ((eY < sY + max_y) && (sY > eY - max_y) && (eX > 0)))) {
                    if (eX > sX)
                        direc = "r";
                    else
                        direc = "l";
                }
                else if ((((eY - min_y > sY) || (eY + min_y < sY)) && ((eX < sX + max_x) && (sX > eX - max_x) && (eY > 0)))) {
                    if (eY > sY)
                        direc = "d";
                    else
                        direc = "u";
                }
                if (direc != "" && callback != null) {
                    callback(direc);
                }
                direc = "";
                sX = 0;
                sY = 0;
                eX = 0;
                eY = 0;
            }, false);
        }
        UI.addSwipeGesture = addSwipeGesture;
        function removeSwipeGesture(element) {
            element.removeEventListener('touchstart', function (e) { }, false);
            element.removeEventListener('touchmove', function (e) { }, false);
            element.removeEventListener('touchend', function (e) { }, false);
        }
        UI.removeSwipeGesture = removeSwipeGesture;
        function getMediumFontAttributes() {
            var attributes = {};
            if (KASClient.getPlatform() == KASClient.Platform.Android) {
                attributes["font-family"] = "sans-serif-medium";
            }
            else {
                attributes["font-weight"] = "600";
            }
            return attributes;
        }
        UI.getMediumFontAttributes = getMediumFontAttributes;
        function getScaledFontSize(fontSize) {
            return KASClient.getScaledFontSize(fontSize);
        }
        UI.getScaledFontSize = getScaledFontSize;
        function getAttachmentIconBase64(attachmentExtension) {
            switch (attachmentExtension) {
                case "pdf":
                    return UI.Assets.pdfIcon;
                case "ppt":
                case "pptx":
                    return UI.Assets.pptIcon;
                case "xls":
                case "xlsx":
                    return UI.Assets.excelIcon;
                case "doc":
                case "docx":
                    return UI.Assets.wordIcon;
                case "mp3":
                case "ogg":
                    return UI.Assets.audioPlay;
                default:
                    return UI.Assets.documentIcon;
            }
        }
        UI.getAttachmentIconBase64 = getAttachmentIconBase64;
        /**
         * Offset position of element
         */
        function findPosition(element) {
            return KASClient.findPosition(element);
        }
        UI.findPosition = findPosition;
        /**
         * Style value of element
         */
        function getStyle(element, styleName) {
            return KASClient.getStyle(element, styleName);
        }
        UI.getStyle = getStyle;
        function isPDFDocument(localPath) {
            return KASClient.isPDFDocument(localPath);
        }
        UI.isPDFDocument = isPDFDocument;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
var KASClient;
(function (KASClient) {
    var Customise;
    (function (Customise) {
        // CustomisationType {
        //    None = 0,
        //    Text,
        //    Numeric,
        //    Boolean,
        //    Color,
        //    Image
        // }
        // Customisation {
        //    type: CustomisationType;
        //    config: string;
        //    context: string;
        //    dependencies: string[];
        // }
        function getCustomizeButton() {
            var customizeText = KASClient.UI.getLabel(KASClient.Internal.getKASClientString("TemplateCustomizeButtonText"));
            var customizeIcon = KASClient.UI.getBase64Image(KASClient.UI.Assets.whiteEditIcon, {
                "margin-left": "4px",
                "object-fit": "contain",
                "width": "15px",
                "height": "15px"
            });
            return KASClient.UI.getHorizontalDiv([customizeText, customizeIcon], {
                "cursor": "pointer",
                "background-color": BLUE_COLOR,
                "color": "white",
                "padding": "5px",
                "position": "absolute",
                "z-index": "100",
                "font-size": "10px",
                "letter-spacing": "1px",
                "display": "none"
            });
        }
        var customizeButton = null;
        function register(element, customisations) {
            if (KASClient.isRenderedForActionDesigner()) {
                if (customizeButton == null) {
                    customizeButton = getCustomizeButton();
                    KASClient.UI.addElement(customizeButton, document.body);
                }
                element.onmousemove = function () {
                    var pos = KASClient.UI.findPosition(element);
                    customizeButton.style.display = "flex";
                    var top = pos[0];
                    var left = pos[1];
                    if (top < document.body.scrollTop) {
                        top = document.body.scrollTop;
                    }
                    customizeButton.style.top = (top).toString();
                    customizeButton.style.left = (left).toString();
                    customizeButton.onclick = function () {
                        window.parent["onKASEditableElementClicked"](customisations);
                    };
                };
                // var marginTop = parseInt(UI.getStyle(element, "marginTop"));
                // element.style.marginTop = (isNaN(marginTop) ? 0 : marginTop) + 1 + "px";
                element.style.border = "2px dotted " + BLUE_COLOR;
            }
        }
        Customise.register = register;
        function getAsset(assetName) {
            if (!KASClient.isRenderedForActionDesigner()) {
                return assetName;
            }
            else {
                return window.parent["getKASEditableAsset"](assetName);
            }
        }
        Customise.getAsset = getAsset;
    })(Customise = KASClient.Customise || (KASClient.Customise = {}));
})(KASClient || (KASClient = {}));
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        var KASInputView = /** @class */ (function () {
            function KASInputView(header) {
                this.header = null;
                this.headerAttributes = {};
                this.header = header;
            }
            KASInputView.prototype.setHeaderAttributes = function (headerAttributes) {
                this.headerAttributes = headerAttributes;
            };
            KASInputView.prototype.getView = function () {
                if (KASClient.isEmptyString(this.header)) {
                    return UI.getVerticalDiv([this.getInputView()]);
                }
                else {
                    var headerAttributes = Object.assign({
                        "font-size": KASClient.UI.getScaledFontSize("12px"),
                        "font-weight": "600",
                        "color": "#32485f",
                    }, KASClient.UI.getMediumFontAttributes());
                    headerAttributes = Object.assign(headerAttributes, this.headerAttributes);
                    var headerDiv = UI.getLabel(this.header, headerAttributes);
                    UI.setAccessibilityBasic(headerDiv, false /*isHidden*/);
                    return UI.getVerticalDiv([headerDiv, UI.getSpace("12px"), this.getInputView()]);
                }
            };
            return KASInputView;
        }());
        UI.KASInputView = KASInputView;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
/// <reference path="./KASInputView.ts" />
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        var KASAttachmentsPreviewViewRenderStyle;
        (function (KASAttachmentsPreviewViewRenderStyle) {
            KASAttachmentsPreviewViewRenderStyle[KASAttachmentsPreviewViewRenderStyle["GRID"] = 0] = "GRID";
            KASAttachmentsPreviewViewRenderStyle[KASAttachmentsPreviewViewRenderStyle["CAROUSEL"] = 1] = "CAROUSEL";
        })(KASAttachmentsPreviewViewRenderStyle = UI.KASAttachmentsPreviewViewRenderStyle || (UI.KASAttachmentsPreviewViewRenderStyle = {}));
        /**
         * KASImageGridAlbumView provides an album like view for a given set of
         * image attachments. It can be configured to render an album as a simple
         * grid of images or as a carousel which can be scrolled horizontally.
         *
         * To render the album as a carousel, set the GRID_ALBUM_VIEW_RENDER_STYLE
         * property to KASImageGridAlbumViewRenderStyle.CAROUSEL in props dictionary
         * when initializing.
         *
         * The album can be rendered in preview mode where a list of images are
         * expected as input. If preview mode is set to false, there will be an option
         * to pick images from camera or gallery (which can be further controlled using
         * ImagePickerSource).
         *
         * Any changes(add/remove) to the image attachments provided to during initialization
         * will fire the onChangeCallback handler.
         */
        var KASAttachmentsPreviewView = /** @class */ (function (_super) {
            __extends(KASAttachmentsPreviewView, _super);
            function KASAttachmentsPreviewView(header, attachments, supportedTypes, previewMode, props, onChangeCallback) {
                var _this = _super.call(this, header) || this;
                _this.attachments = [];
                _this.previewMode = false;
                _this.supportedTypes = [KASClient.KASAttachmentType.Image, KASClient.KASAttachmentType.Document];
                _this.showAddImageButtonBeforePreviews = false;
                _this.DEFAULT_MAX_ATTACHMENT_COUNT = 10;
                _this.maxAttachmentCount = _this.DEFAULT_MAX_ATTACHMENT_COUNT;
                _this.imagePickerSource = KASClient.ImagePickerSource.All;
                _this.props = JSON.parse("{}");
                _this.attachmentsPreviewViewRenderStyle = KASAttachmentsPreviewViewRenderStyle.GRID;
                _this.imagesPendingLoad = [];
                /*
                 * The scroll end detection timeout is the maximum interval we will wait
                 * for between two scroll events before we interpret that scrolling has
                 * stopped. This value of 100ms is a fair estimate because scroll events
                 * are fired at intervals of around 50ms.
                 */
                _this.DEFAULT_SCROLL_END_DETECTION_TIMEOUT_IN_MS = 100;
                /*
                 * Lazy loading prevents loading of remote images when they are not in
                 * the viewport. When these images come into view, then the image is
                 * loaded. This helps in improving data usage and performance.
                 *
                 * This property is for internal use for development/testing purposes
                 * and should always true for all users.
                 */
                _this.enableLazyLoading = true;
                _this.albumContainsRemoteImages = false;
                if (attachments != null) {
                    _this.attachments = attachments;
                }
                _this.supportedTypes = supportedTypes;
                _this.previewMode = previewMode;
                if (props == null) {
                    _this.props[KASClient.KASAttachmentListQuestionConfig.MAX_IMAGE_COUNT_KEY] = _this.maxAttachmentCount;
                }
                else {
                    _this.props = props;
                }
                _this.onChangeCallback = onChangeCallback;
                _this.attachmentsPreviewViewRenderStyle = _this.getGridAlbumViewRenderStyle(props);
                _this.container = UI.getElement("div", _this.getContainerStyleAttributes());
                return _this;
            }
            KASAttachmentsPreviewView.prototype.getGridAlbumViewRenderStyle = function (props) {
                if (!props || !props[KASAttachmentsPreviewView.ATTACHMENTS_PREVIEW_VIEW_RENDER_STYLE]) {
                    return KASAttachmentsPreviewViewRenderStyle.GRID;
                }
                var viewRenderStyle = props[KASAttachmentsPreviewView.ATTACHMENTS_PREVIEW_VIEW_RENDER_STYLE];
                if (viewRenderStyle == 1) {
                    return KASAttachmentsPreviewViewRenderStyle.CAROUSEL;
                }
                else {
                    return KASAttachmentsPreviewViewRenderStyle.GRID;
                }
            };
            KASAttachmentsPreviewView.prototype.getInputView = function () {
                UI.clearElement(this.container);
                switch (this.attachmentsPreviewViewRenderStyle) {
                    case KASAttachmentsPreviewViewRenderStyle.CAROUSEL:
                        this.populateCarousel();
                        break;
                    case KASAttachmentsPreviewViewRenderStyle.GRID:
                    default:
                        this.populateGrid();
                        break;
                }
                if (this.previewMode && this.enableLazyLoading && this.albumContainsRemoteImages) {
                    this.scrollHandler = this.reloadImages.bind(this);
                    if (this.attachmentsPreviewViewRenderStyle == KASAttachmentsPreviewViewRenderStyle.CAROUSEL) {
                        this.container.addEventListener('scroll', this.scrollHandler);
                    }
                    document.addEventListener('scroll', this.scrollHandler);
                    this.reloadImages();
                }
                return this.container;
            };
            KASAttachmentsPreviewView.prototype.prepareForDOMRemoval = function () {
                if (this.scrollHandler) {
                    document.removeEventListener('scroll', this.scrollHandler);
                }
            };
            KASAttachmentsPreviewView.prototype.populateGrid = function () {
                UI.addCSS(this.container, this.getContainerStyleAttributes());
                if (this.shouldShowAddImageButton() && this.showAddImageButtonBeforePreviews) {
                    var addImageButtonView = UI.getElement("div");
                    UI.addElement(this.getAddImageButtonView((this.imagePickerSource == KASClient.ImagePickerSource.CameraBack) || (this.imagePickerSource == KASClient.ImagePickerSource.CameraFront)), addImageButtonView);
                    UI.addElement(addImageButtonView, this.container);
                }
                for (var attachmentIndex = 0; attachmentIndex < this.attachments.length; attachmentIndex++) {
                    var cellView = UI.getElement("div");
                    var attachment = this.attachments[attachmentIndex];
                    if (attachment.type == KASClient.KASAttachmentType.Image) {
                        var image = this.getImageViewForGrid(attachmentIndex, attachment);
                        UI.addElement(image, cellView);
                    }
                    else if (attachment.type == KASClient.KASAttachmentType.Document) {
                        var docPreview = this.getDocumentPreviewView(attachmentIndex, attachment);
                        UI.addElement(docPreview, cellView);
                    }
                    UI.addElement(cellView, this.container);
                }
                if (this.shouldShowAddImageButton() && !this.showAddImageButtonBeforePreviews) {
                    var addImageButtonView = UI.getElement("div");
                    UI.addElement(this.getAddImageButtonView((this.imagePickerSource == KASClient.ImagePickerSource.CameraBack) || (this.imagePickerSource == KASClient.ImagePickerSource.CameraFront)), addImageButtonView);
                    UI.addElement(addImageButtonView, this.container);
                }
            };
            KASAttachmentsPreviewView.prototype.populateCarousel = function () {
                UI.addCSS(this.container, this.getContainerStyleAttributes());
                var cellCount = this.attachments.length + (this.shouldShowAddImageButton() ? 1 : 0);
                var tableView = UI.getTable();
                var tableRow = UI.getTableRow();
                for (var attachmentIndex = 0; attachmentIndex < cellCount; attachmentIndex++) {
                    var tableData = UI.getTableDataCell();
                    if (attachmentIndex < this.attachments.length) {
                        var attachment = this.attachments[attachmentIndex];
                        if (attachment.type == KASClient.KASAttachmentType.Image) {
                            var image = this.getImageViewForGrid(attachmentIndex, attachment);
                            UI.addElement(image, tableData);
                        }
                        else if (attachment.type == KASClient.KASAttachmentType.Document) {
                            var docPreview = this.getDocumentPreviewView(attachmentIndex, attachment);
                            UI.addElement(docPreview, tableData);
                        }
                    }
                    else if (attachmentIndex == this.attachments.length && this.shouldShowAddImageButton()) {
                        UI.addElement(this.getAddImageButtonView((this.imagePickerSource == KASClient.ImagePickerSource.CameraBack) || (this.imagePickerSource == KASClient.ImagePickerSource.CameraFront)), tableData);
                    }
                    UI.addElement(tableData, tableRow);
                }
                UI.addElement(tableRow, tableView);
                UI.addElement(tableView, this.container);
            };
            KASAttachmentsPreviewView.prototype.setMaxAttachmentCount = function (maxAttachmentCount) {
                this.maxAttachmentCount = maxAttachmentCount;
            };
            KASAttachmentsPreviewView.prototype.setImagePickerSource = function (imagePickerSource) {
                this.imagePickerSource = imagePickerSource;
            };
            KASAttachmentsPreviewView.prototype.getSelectedAttachments = function () {
                return this.attachments;
            };
            KASAttachmentsPreviewView.prototype.shouldShowAddImageButton = function () {
                if (this.previewMode) {
                    return false;
                }
                else {
                    if (this.attachments.length < this.maxAttachmentCount) {
                        return true;
                    }
                    else {
                        return false;
                    }
                }
            };
            KASAttachmentsPreviewView.prototype.getAddImageButtonView = function (cameraOnly) {
                if (cameraOnly === void 0) { cameraOnly = false; }
                var addImageButtonContainer = UI.getElement("div");
                var addImageButton;
                if (this.attachments.length > 0) {
                    addImageButton = UI.getBase64Image(UI.Assets.addImageGridAlbum, this.getAddImageButtonStyleAttributes());
                    KASClient.UI.setAccessibilityBasic(addImageButton, false, KASClient.UI.KASFormAccessibilityRole.Button, KASClient.Internal.getKASClientString("AddMoreImages"));
                }
                else {
                    if (cameraOnly) {
                        addImageButton = UI.getBase64Image(UI.Assets.addImageGridAlbum);
                        KASClient.UI.setAccessibilityBasic(addImageButton, false, KASClient.UI.KASFormAccessibilityRole.Button, KASClient.Internal.getKASClientString("CameraPicker"));
                    }
                    else {
                        addImageButton = UI.getBase64Image(UI.Assets.addImageGridAlbum);
                        KASClient.UI.setAccessibilityBasic(addImageButton, false, KASClient.UI.KASFormAccessibilityRole.Button, KASClient.Internal.getKASClientString("ImagePicker"));
                    }
                    UI.addCSS(addImageButton, this.getEmptyGridAddImageButtonStyleAttributes());
                }
                var self = this;
                UI.addClickEvent(addImageButton, function () {
                    self.props[KASClient.KASAttachmentListQuestionConfig.MAX_IMAGE_COUNT_KEY] = self.maxAttachmentCount - self.attachments.length;
                    KASClient.App.showAttachmentPickerAsync(self.supportedTypes, self.props, function (selectedAttachments, error) {
                        if (error != null) {
                            return;
                        }
                        if (selectedAttachments.length == 1 && selectedAttachments[0].type == KASClient.KASAttachmentType.Document) {
                            if (KASClient.UI.isPDFDocument(selectedAttachments[0].localPath)) {
                                KASClient.Internal.generateThumbnailForPDFAsync(selectedAttachments[0].localPath, function (thumbnail, error) {
                                    if (error == null && thumbnail != null) {
                                        selectedAttachments[0].thumbnail = thumbnail;
                                        selectedAttachments[0].hasSetThumbnail = true;
                                    }
                                    self.attachments = self.attachments.concat(selectedAttachments);
                                    self.imagePickerSource = self.props[KASClient.KASAttachmentListQuestionConfig.IMAGE_SOURCE_KEY];
                                    self.getInputView();
                                    if (self.onChangeCallback) {
                                        self.onChangeCallback(self.attachments);
                                    }
                                }.bind(this), true /* withHighRes */);
                            }
                            else {
                                self.attachments = self.attachments.concat(selectedAttachments);
                                self.imagePickerSource = self.props[KASClient.KASAttachmentListQuestionConfig.IMAGE_SOURCE_KEY];
                                self.getInputView();
                                if (self.onChangeCallback) {
                                    self.onChangeCallback(self.attachments);
                                }
                            }
                        }
                        else {
                            self.attachments = self.attachments.concat(selectedAttachments);
                            self.imagePickerSource = self.props[KASClient.KASAttachmentListQuestionConfig.IMAGE_SOURCE_KEY];
                            self.getInputView();
                            if (self.onChangeCallback) {
                                self.onChangeCallback(self.attachments);
                            }
                        }
                    });
                });
                UI.addElement(addImageButton, addImageButtonContainer);
                return addImageButtonContainer;
            };
            KASAttachmentsPreviewView.prototype.getImageViewForGrid = function (attachmentIndex, attachment) {
                var path = this.getPreviewImagePath(attachment);
                var image;
                if (this.previewMode) {
                    if (KASClient.isRemoteURL(path) && this.enableLazyLoading) {
                        this.albumContainsRemoteImages = true;
                        image = UI.getBase64Image(UI.Assets.gridAlbumImagePlaceHolder, this.getImageStyleAttributes());
                        UI.addCSS(image, this.getPlaceHolderBorderStyleAttributes());
                        image.setAttribute("data-src", path);
                        this.imagesPendingLoad.push(image);
                    }
                    else {
                        image = UI.getImage(path, this.getImageStyleAttributes());
                        UI.addCSS(image, this.getImageBorderStyleAttributes());
                    }
                }
                else {
                    image = UI.getImage(path, this.getImageStyleAttributes());
                    UI.addCSS(image, this.getImageBorderStyleAttributes());
                }
                image.onclick = function (index, e) {
                    // var urlList = [];
                    // for(var i=0; i < this.attachments.length; i++) {
                    //     var path = this.attachments[i].localPath;
                    //     if(KASClient.isEmptyString(path)){
                    //         path = this.attachments[i].serverPath;
                    //     }
                    //     urlList.push(path);
                    // }
                    // App.showImageImmersiveView(urlList, index);
                    KASClient.App.openImmersiveViewForAttachmentList(this.attachments, index);
                }.bind(this, attachmentIndex);
                if (!this.previewMode) {
                    var removeImageIcon = UI.getBase64Image(UI.Assets.removeImageGridAlbum, this.getRemoveImageIconStyleAttributes());
                    removeImageIcon.onclick = function (attachmentIndex, e) {
                        KASClient.removeElementFromArray(this.attachments, attachmentIndex);
                        this.getInputView();
                        if (this.onChangeCallback) {
                            this.onChangeCallback(this.attachments);
                        }
                    }.bind(this, attachmentIndex);
                    KASClient.UI.setAccessibilityBasic(removeImageIcon, false, KASClient.UI.KASFormAccessibilityRole.Button, KASClient.Internal.getKASClientString("RemoveImage") + (attachmentIndex + 1));
                    var imageContainer = UI.getElement("div", this.getEditModeImageContainerAttributes());
                    UI.addElement(image, imageContainer);
                    KASClient.UI.setAccessibilityBasic(image, false, KASClient.UI.KASFormAccessibilityRole.Image, KASClient.Internal.getKASClientString("Image") + (attachmentIndex + 1));
                    UI.addElement(removeImageIcon, imageContainer);
                    return imageContainer;
                }
                else {
                    KASClient.UI.setAccessibilityBasic(image, false, KASClient.UI.KASFormAccessibilityRole.Image, KASClient.Internal.getKASClientString("Image") + (attachmentIndex + 1));
                    return image;
                }
            };
            KASAttachmentsPreviewView.prototype.getDocumentPreviewView = function (attachmentIndex, documentAttachment) {
                var path = this.getPreviewImagePath(documentAttachment);
                var docPreview;
                var docTypeIcon = null;
                if (!KASClient.isEmptyString(path)) {
                    if (this.previewMode) {
                        if (KASClient.isRemoteURL(path) && this.enableLazyLoading) {
                            this.albumContainsRemoteImages = true;
                            docPreview = UI.getBase64Image(UI.Assets.gridAlbumImagePlaceHolder, this.getImageStyleAttributes());
                            UI.addCSS(docPreview, this.getPlaceHolderBorderStyleAttributes());
                            docPreview.setAttribute("data-src", path);
                            this.imagesPendingLoad.push(docPreview);
                        }
                        else {
                            docPreview = UI.getBase64Image(path, this.getImageStyleAttributes());
                            UI.addCSS(docPreview, this.getImageBorderStyleAttributes());
                        }
                    }
                    else {
                        docPreview = UI.getBase64Image(path, this.getImageStyleAttributes());
                        UI.addCSS(docPreview, this.getImageBorderStyleAttributes());
                    }
                    var docTypeIcon = UI.getBase64Image(this.getDocTypeIcon(documentAttachment), this.getDocTypeIconStyleAttributes());
                }
                else {
                    docPreview = UI.getBase64Image(this.getDocTypeIcon(documentAttachment), this.getUnsupportedDocumentStyleAttributes());
                }
                docPreview.onclick = function (index, e) {
                    // App.openAttachmentImmersiveView(this.attachments[index]);
                    KASClient.App.openImmersiveViewForAttachmentList(this.attachments, index);
                }.bind(this, attachmentIndex);
                KASClient.UI.setAccessibilityBasic(docPreview, false, KASClient.UI.KASFormAccessibilityRole.Image, KASClient.Internal.getKASClientString("Image") + (attachmentIndex + 1));
                var docPreviewContainer = UI.getElement("div", this.getEditModeImageContainerAttributes());
                UI.addElement(docPreview, docPreviewContainer);
                if (docTypeIcon != null) {
                    UI.addElement(docTypeIcon, docPreviewContainer);
                }
                if (!this.previewMode) {
                    var removeImageIcon = UI.getBase64Image(UI.Assets.removeImageGridAlbum, this.getRemoveImageIconStyleAttributes());
                    removeImageIcon.onclick = function (attachmentIndex, e) {
                        KASClient.removeElementFromArray(this.attachments, attachmentIndex);
                        this.getInputView();
                        if (this.onChangeCallback) {
                            this.onChangeCallback(this.attachments);
                        }
                    }.bind(this, attachmentIndex);
                    KASClient.UI.setAccessibilityBasic(removeImageIcon, false, KASClient.UI.KASFormAccessibilityRole.Button, KASClient.Internal.getKASClientString("RemoveImage") + (attachmentIndex + 1));
                    UI.addElement(removeImageIcon, docPreviewContainer);
                }
                return docPreviewContainer;
            };
            KASAttachmentsPreviewView.prototype.getPreviewImagePath = function (attachment) {
                if (attachment.type == KASClient.KASAttachmentType.Image) {
                    if (!KASClient.isEmptyString(attachment.localPath)) {
                        return attachment.localPath;
                    }
                    else if (!KASClient.isEmptyString(attachment.thumbnail)) {
                        return attachment.thumbnail;
                    }
                    else if (!KASClient.isEmptyString(attachment.thumbnailServerUrl)) {
                        return attachment.thumbnailServerUrl;
                    }
                    else if (!KASClient.isEmptyString(attachment.serverPath)) {
                        return attachment.serverPath;
                    }
                }
                else if (attachment.type == KASClient.KASAttachmentType.Document) {
                    if (!KASClient.isEmptyString(attachment.thumbnail)) {
                        return attachment.thumbnail;
                    }
                    else if (!KASClient.isEmptyString(attachment.thumbnailServerUrl)) {
                        return attachment.thumbnailServerUrl;
                    }
                }
                return null; //TODO: return default attachment icon or handle null in caller
            };
            KASAttachmentsPreviewView.prototype.getDocTypeIcon = function (documentAttachment) {
                var fileName = documentAttachment.fileName;
                if (!KASClient.isEmptyString(fileName)) {
                    var fileExt = fileName.split('.').pop().toLowerCase();
                    return KASClient.UI.getAttachmentIconBase64(fileExt);
                }
                return UI.Assets.documentIcon;
            };
            KASAttachmentsPreviewView.prototype.reloadImages = function () {
                if (this.scrollEndDetectionTimer) {
                    clearTimeout(this.scrollEndDetectionTimer);
                }
                if (this.imagesPendingLoad.length == 0 && this.scrollHandler) {
                    if (this.attachmentsPreviewViewRenderStyle == KASAttachmentsPreviewViewRenderStyle.CAROUSEL) {
                        this.container.removeEventListener('scroll', this.scrollHandler);
                    }
                    document.removeEventListener('scroll', this.scrollHandler);
                    return;
                }
                this.scrollEndDetectionTimer = setTimeout(function () {
                    if (this.isViewInViewPort(this.container)) {
                        var processedImages = [];
                        for (var loadIndex = 0; loadIndex < this.imagesPendingLoad.length; loadIndex++) {
                            var image = this.imagesPendingLoad[loadIndex];
                            if (this.isViewInViewPort(image)) {
                                image.setAttribute('src', image.getAttribute('data-src'));
                                UI.addCSS(image, this.getImageBorderStyleAttributes());
                                image.removeAttribute('data-src');
                                processedImages.push(image);
                            }
                        }
                        for (var removeIndex = 0; removeIndex < processedImages.length; removeIndex++) {
                            var refIndex = this.imagesPendingLoad.indexOf(processedImages[removeIndex]);
                            KASClient.removeElementFromArray(this.imagesPendingLoad, refIndex);
                        }
                    }
                }.bind(this), this.DEFAULT_SCROLL_END_DETECTION_TIMEOUT_IN_MS);
            };
            KASAttachmentsPreviewView.prototype.isViewInViewPort = function (view) {
                if (!view) {
                    return false;
                }
                var rect = view.getBoundingClientRect(), vWidth = window.innerWidth || document.documentElement.clientWidth, vHeight = window.innerHeight || document.documentElement.clientHeight, efp = function (x, y) { return document.elementFromPoint(x, y); };
                // Return false if it's not in the viewport
                if (rect.right < 0 || rect.bottom < 0
                    || rect.left > vWidth || rect.top > vHeight)
                    return false;
                if (!view.parentElement) {
                    return false;
                }
                // Return true if any of its four corners are visible
                return (view.parentElement.contains(efp(rect.left, rect.top))
                    || view.parentElement.contains(efp(rect.right, rect.top))
                    || view.parentElement.contains(efp(rect.right, rect.bottom))
                    || view.parentElement.contains(efp(rect.left, rect.bottom)));
            };
            KASAttachmentsPreviewView.prototype.getContainerStyleAttributes = function () {
                if (this.attachmentsPreviewViewRenderStyle == KASAttachmentsPreviewViewRenderStyle.CAROUSEL) {
                    return {
                        "display": "grid",
                        "grid-template-columns": "10px",
                        "overflow": "scroll",
                        "-webkit-overflow-scrolling": "touch"
                    };
                }
                else {
                    return {
                        "display": "flex",
                        "align-items": "flex-start",
                        "flex-wrap": "wrap"
                    };
                }
            };
            KASAttachmentsPreviewView.prototype.getImageStyleAttributes = function () {
                return {
                    "width": "80px",
                    "height": "80px",
                    "object-fit": "cover",
                    "border-radius": "4px",
                    "margin-left": "4px",
                    "margin-top": "4px",
                    "box-sizing": "border-box",
                    "-webkit-box-sizing": "border-box",
                    "-moz-border-box": "border-box"
                };
            };
            KASAttachmentsPreviewView.prototype.getImageBorderStyleAttributes = function () {
                return {
                    "border": "1.5px solid #e0e3e7"
                };
            };
            KASAttachmentsPreviewView.prototype.getPlaceHolderBorderStyleAttributes = function () {
                return {
                    "border": "none"
                };
            };
            KASAttachmentsPreviewView.prototype.getEditModeImageContainerAttributes = function () {
                return {
                    "position": "relative",
                    "height": "84px",
                    "width": "84px"
                };
            };
            KASAttachmentsPreviewView.prototype.getRemoveImageIconStyleAttributes = function () {
                return {
                    "position": "absolute",
                    "right": "0px",
                    "top": "2px",
                    "height": "20px",
                    "width": "20px"
                };
            };
            KASAttachmentsPreviewView.prototype.getDocTypeIconStyleAttributes = function () {
                return {
                    "position": "absolute",
                    "right": "2px",
                    "bottom": "2px",
                    "height": "14px",
                    "width": "14px"
                };
            };
            KASAttachmentsPreviewView.prototype.getEmptyGridAddImageButtonStyleAttributes = function () {
                return {
                    "width": "92px",
                    "height": "92px",
                    "object-fit": "cover"
                };
            };
            KASAttachmentsPreviewView.prototype.getAddImageButtonStyleAttributes = function () {
                return {
                    "width": "80px",
                    "height": "80px",
                    "object-fit": "cover",
                    "margin-left": "4px",
                    "margin-top": "4px"
                };
            };
            KASAttachmentsPreviewView.prototype.getUnsupportedDocumentStyleAttributes = function () {
                return {
                    "width": "80px",
                    "height": "80px",
                    "object-fit": "cover",
                    "margin-left": "4px",
                    "margin-top": "4px",
                    "border": "1.5px solid #e0e3e7",
                    "border-radius": "4px",
                    "box-sizing": "border-box",
                    "-webkit-box-sizing": "border-box",
                    "-moz-border-box": "border-box"
                };
            };
            KASAttachmentsPreviewView.ATTACHMENTS_PREVIEW_VIEW_RENDER_STYLE = "ATTACHMENTS_PREVIEW_VIEW_RENDER_STYLE";
            return KASAttachmentsPreviewView;
        }(UI.KASInputView));
        UI.KASAttachmentsPreviewView = KASAttachmentsPreviewView;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        var KASAttachmentThumbnailView = /** @class */ (function () {
            function KASAttachmentThumbnailView() {
                this.documentDiv = null;
                this.containerDiv = null;
            }
            KASAttachmentThumbnailView.prototype.getView = function (fileName, type, size) {
                var accessibilityString = "";
                var documentView = KASClient.UI.getElement("div", {
                    "padding": "8px",
                    "object-fit": "cover",
                    "position": "relative",
                    "box-shadow": "0px 0px 7px rgba(0, 0, 0, 0.3)"
                });
                var documentHeader = KASClient.UI.getElement("div", {
                    "color": "#98a3af",
                    "font-size": KASClient.UI.getScaledFontSize("12px"),
                    "letter-spacing": "2"
                });
                var documentHeaderText = "";
                switch (type) {
                    case KASClient.KASAttachmentType.Audio:
                        documentHeaderText = KASClient.Internal.getKASClientString("KASAttachmentAudioText");
                        this.containerDiv = KASClient.UI.getDiv({ "width": "100%", "position": "relative" });
                        break;
                    case KASClient.KASAttachmentType.Document:
                        documentHeaderText = KASClient.Internal.getKASClientString("KASAttachmentDocumentText");
                        break;
                    default:
                        break;
                }
                documentHeader.innerHTML = documentHeaderText;
                accessibilityString += documentHeaderText + ".";
                var documentName = KASClient.UI.getLabel(fileName, {
                    "color": "#006ff1",
                    "font-size": KASClient.UI.getScaledFontSize("14px"),
                    "padding-top": "4px",
                    "padding-bottom": "4px",
                    "white-space": "nowrap",
                    "overflow": "hidden",
                    "text-overflow": "ellipsis"
                });
                var fileExt = "";
                if (!KASClient.isEmptyString(fileName)) {
                    fileExt = fileName.split('.').pop().toLowerCase();
                    accessibilityString += (fileName + ".");
                }
                var documentIcon = KASClient.UI.getBase64Image(KASClient.UI.getAttachmentIconBase64(fileExt), {
                    "height": "12pt",
                    "width": "12pt",
                    "float": "left"
                });
                var sizeString = KASClient.formatSize(size);
                var documentSize = KASClient.UI.getLabel(sizeString, {
                    "color": "#6f7e8f",
                    "font-size": KASClient.UI.getScaledFontSize("12px"),
                    "padding-left": "3px",
                    "float": "left"
                });
                accessibilityString += (".size - " + sizeString + ". ");
                var documentInfo = KASClient.UI.getDiv({ "height": "20px" });
                KASClient.UI.addElement(documentIcon, documentInfo);
                KASClient.UI.addElement(documentSize, documentInfo);
                KASClient.UI.addElement(documentHeader, documentView);
                KASClient.UI.addElement(this.containerDiv, documentView);
                KASClient.UI.addElement(documentName, documentView);
                KASClient.UI.addElement(documentInfo, documentView);
                if (this.onTappedCallback) {
                    documentView.onclick = this.onTappedCallback;
                    accessibilityString += (KASClient.Internal.getKASClientString("TapToOpenFormatText", documentHeaderText) + ".");
                }
                KASClient.UI.setAccessibilityBasic(documentHeader, true);
                KASClient.UI.setAccessibilityBasic(documentIcon, true);
                KASClient.UI.setAccessibilityBasic(documentSize, true);
                KASClient.UI.setAccessibilityBasic(documentName, false, UI.KASFormAccessibilityRole.Text, accessibilityString);
                return documentView;
            };
            return KASAttachmentThumbnailView;
        }());
        UI.KASAttachmentThumbnailView = KASAttachmentThumbnailView;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        var State;
        (function (State) {
            State[State["AttachmentsAvailable"] = 0] = "AttachmentsAvailable";
            State[State["AttachmentsDownloading"] = 1] = "AttachmentsDownloading";
            State[State["AttachmentsDownloadFailed"] = 2] = "AttachmentsDownloadFailed";
            State[State["AttachmentsNeverDownloaded"] = 3] = "AttachmentsNeverDownloaded";
        })(State = UI.State || (UI.State = {}));
        var KASAttachmentView = /** @class */ (function () {
            function KASAttachmentView() {
                this.view = null;
                this.shouldShowRemoveButton = false;
                this.tapEnabled = false;
                this.defaultBlurColor = "rgba(0, 0, 0, 0.5)";
                this.view = KASClient.UI.getElement("div", { "background": "white" });
            }
            KASAttachmentView.prototype.getView = function () {
                return this.view;
            };
            // public setState(state: State) {
            //     switch (state) {
            //         case State.AttachmentsAvailable:
            //             //this.populateView();
            //             break;
            //         case State.AttachmentsDownloading:
            //             this.showLoadingIndicator();
            //             break;
            //         case State.AttachmentsNeverDownloaded:
            //             this.showRetryButton();
            //             break;
            //         case State.AttachmentsDownloadFailed:
            //             this.showRetryButton();
            //             break;
            //         default:
            //             break;
            //     }
            // }
            KASAttachmentView.prototype.showLoadingIndicator = function () {
                this.addLoadingIndicatorToDiv(this.view);
            };
            KASAttachmentView.prototype.showRetryButton = function () {
                this.addRetryButtonToDiv(this.view);
            };
            KASAttachmentView.prototype.addLoadingIndicatorToDiv = function (div, blurColor) {
                if (blurColor === void 0) { blurColor = this.defaultBlurColor; }
                var containerDiv = this.getStatusViewForState(State.AttachmentsDownloading);
                KASClient.UI.removeElement(this.blurView);
                this.blurView = this.getBlurViewWithDiv(containerDiv, blurColor);
                this.blurView.onclick = function (event) { event.stopPropagation(); };
                KASClient.UI.addElement(this.blurView, div);
            };
            KASAttachmentView.prototype.addRetryButtonToDiv = function (div, blurColor) {
                if (blurColor === void 0) { blurColor = this.defaultBlurColor; }
                var containerDiv = this.getStatusViewForState(State.AttachmentsDownloadFailed);
                KASClient.UI.removeElement(this.blurView);
                this.blurView = this.getBlurViewWithDiv(containerDiv, blurColor);
                this.blurView.onclick = this.retryButtonCallback;
                KASClient.UI.addElement(this.blurView, div);
            };
            KASAttachmentView.prototype.addTapToDownloadButtonToDiv = function (div, blurColor) {
                if (blurColor === void 0) { blurColor = this.defaultBlurColor; }
                var containerDiv = this.getStatusViewForState(State.AttachmentsNeverDownloaded);
                KASClient.UI.removeElement(this.blurView);
                this.blurView = this.getBlurViewWithDiv(containerDiv);
                this.blurView.onclick = this.retryButtonCallback;
                KASClient.UI.addElement(this.blurView, div);
            };
            KASAttachmentView.prototype.getStatusViewForState = function (state) {
                var containerDiv = KASClient.UI.getDiv({ "width": "100px", "height": "25px", "margin": "auto", "background": "transparent" });
                var statusIcon, statusText;
                var accessibilityString = "";
                switch (state) {
                    case State.AttachmentsDownloading:
                        statusIcon = KASClient.UI.getLoadingSpinner({ "margin": "0 auto" });
                        accessibilityString += KASClient.Internal.getKASClientString("LoadingText");
                        break;
                    case State.AttachmentsNeverDownloaded:
                        statusIcon = KASClient.UI.getElement("div", this.getLoadingViewAttributes(KASClient.UI.getBase64Src(UI.Assets.tapToDownloadDark)));
                        statusText = KASClient.UI.getLabel(KASClient.Internal.getKASClientString("KASFormTapToDownloadText"), { "display": "block", "width": "100px", "font-size": KASClient.UI.getScaledFontSize("11px"), "text-align": "center", "color": "lightgray" });
                        break;
                    case State.AttachmentsDownloadFailed:
                        statusIcon = KASClient.UI.getElement("div", this.getLoadingViewAttributes(KASClient.UI.getBase64Src(UI.Assets.retry)));
                        statusText = KASClient.UI.getLabel(KASClient.Internal.getKASClientString("KASFormTapToRetryText"), { "display": "block", "width": "100px", "font-size": KASClient.UI.getScaledFontSize("11px"), "text-align": "center", "color": "lightgray" });
                        break;
                    default:
                        break;
                }
                KASClient.UI.addElement(statusIcon, containerDiv);
                if (statusText) {
                    KASClient.UI.setAccessibilityBasic(statusText, true);
                    accessibilityString += statusText.innerText;
                    containerDiv.style.height = "40px";
                    KASClient.UI.addElement(statusText, containerDiv);
                }
                KASClient.UI.setAccessibilityBasic(statusIcon, true);
                KASClient.UI.setAccessibilityBasic(containerDiv, false, UI.KASFormAccessibilityRole.Text, accessibilityString);
                return containerDiv;
            };
            KASAttachmentView.prototype.getBlurViewWithDiv = function (ele, blurColor) {
                if (blurColor === void 0) { blurColor = this.defaultBlurColor; }
                var blurView = KASClient.UI.getElement("div", this.getBlurViewAttributes());
                blurView.style.background = blurColor;
                KASClient.UI.addElement(ele, blurView);
                return blurView;
            };
            KASAttachmentView.prototype.getLoadingViewAttributes = function (pictureUrl) {
                return {
                    "display": "block",
                    "background": "transparent url('" + pictureUrl + "')",
                    "margin": "0 auto",
                    "width": "28px",
                    "height": "28px",
                    "background-size": "cover",
                    "justify-content": "center",
                    "align-items": "center"
                };
            };
            KASAttachmentView.prototype.getLoadingViewAttributes1 = function () {
                return {
                    "position": "absolute",
                    "display": "block",
                    "margin": "auto",
                    "top": "0",
                    "left": "0",
                    "bottom": "0",
                    "right": "0",
                    "width": "28px",
                    "height": "28px",
                    "background-size": "cover",
                    "justify-content": "center",
                    "align-items": "center"
                };
            };
            KASAttachmentView.prototype.getBlurViewAttributes = function () {
                return {
                    "z-index": "2",
                    "position": "absolute",
                    "top": "0",
                    "left": "0",
                    "right": "0",
                    "bottom": "0",
                    "display": "flex"
                };
            };
            return KASAttachmentView;
        }());
        UI.KASAttachmentView = KASAttachmentView;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        var KASAttachmentViewModel = /** @class */ (function () {
            function KASAttachmentViewModel() {
                this.hasStaticContent = false;
                this.allLocalPathsAvailable = true;
                this.allServerPathsAvailable = false;
                this.downloadProgress = 0;
                this.isDownloading = false;
                this.isAutoDownloadEnabled = false;
                this.isOutgoing = false;
                this.messageSendStatus = 0;
                this.enableOnTap = true;
                this.showRemoveButton = false;
                this.showLoadingWhileUploads = false;
                this.height = "180px";
                this.width = "100%";
            }
            return KASAttachmentViewModel;
        }());
        UI.KASAttachmentViewModel = KASAttachmentViewModel;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        var KASCheckboxView = /** @class */ (function () {
            function KASCheckboxView(title, isChecked, checkedChangedCallback) {
                this.title = "";
                this.checkedChangedCallback = null;
                this.checkboxInput = null;
                this.checkboxDefaultValue = false;
                this.view = null;
                //Accessibility
                this.accessibilityAttributes = {};
                this.title = title;
                this.checkedChangedCallback = checkedChangedCallback;
                this.checkboxDefaultValue = isChecked;
            }
            KASCheckboxView.prototype.getView = function () {
                var settingView = KASClient.UI.getElement("div", { "height": "48px", "margin": "0", "display": "flex", "flex-direction": "row", "align-items": "center" });
                settingView.onclick = function () {
                    this.checkboxInput.click();
                    KASClient.UI.setAccessibilityAttribute(settingView, KASClient.UI.KASFormAccessibilityKey.Checked, this.isChecked());
                }.bind(this, settingView);
                KASClient.UI.setAccessibilityBasic(settingView, false, KASClient.UI.KASFormAccessibilityRole.Checkbox);
                KASClient.UI.setAccessibilityAttribute(settingView, KASClient.UI.KASFormAccessibilityKey.Checked, "" + this.checkboxDefaultValue);
                KASClient.UI.setAccessibilityAttribute(settingView, KASClient.UI.KASFormAccessibilityKey.Label, this.title);
                var titleLabelAttributes = {
                    "flex": "1",
                    "color": "#32485f",
                    "font-size": KASClient.UI.getScaledFontSize("14px")
                };
                var titleLabel = KASClient.UI.getElement("label", titleLabelAttributes);
                titleLabel.innerText = this.title;
                UI.setAccessibilityBasic(titleLabel, true);
                KASClient.UI.addElement(titleLabel, settingView);
                // Checkbox view
                this.checkboxInput = KASClient.UI.getElement("input");
                this.checkboxInput.type = "checkbox";
                this.checkboxInput.checked = this.checkboxDefaultValue;
                UI.setAccessibilityBasic(this.checkboxInput, true);
                this.checkboxInput.onclick = function (event) {
                    event.stopPropagation();
                };
                this.checkboxInput.onchange = function (event) {
                    this.checkedChangedCallback(this.isChecked());
                }.bind(this);
                KASClient.UI.addElement(this.checkboxInput, settingView);
                for (var key in this.accessibilityAttributes) {
                    UI.setAccessibilityAttribute(settingView, key, this.accessibilityAttributes[key]);
                }
                this.view = settingView;
                return settingView;
            };
            KASCheckboxView.prototype.isChecked = function () {
                return this.checkboxInput.checked;
            };
            KASCheckboxView.prototype.setAccessibilityAttribute = function (key, value) {
                if (this.view != null) {
                    UI.setAccessibilityAttribute(this.view, key, value);
                }
                this.accessibilityAttributes[key] = value;
            };
            return KASCheckboxView;
        }());
        UI.KASCheckboxView = KASCheckboxView;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
/// <reference path="./KASInputView.ts" />
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        var KASDateInputView = /** @class */ (function (_super) {
            __extends(KASDateInputView, _super);
            /**
             *
             * @param header Header text of input view
             * @param date Default date, In case of null place will be shown.
             * @param placeHolder Placeholder text, In case of null current date will be shown
             */
            function KASDateInputView(header, date, placeHolder, dateChangeCallback) {
                if (date === void 0) { date = null; }
                if (placeHolder === void 0) { placeHolder = null; }
                if (dateChangeCallback === void 0) { dateChangeCallback = null; }
                var _this = _super.call(this, header) || this;
                _this.date = null;
                _this.placeHolder = null;
                _this.showYear = false;
                _this.allowPastDate = false;
                _this.dateTextLabel = null;
                _this.date = date;
                _this.placeHolder = placeHolder;
                _this.dateChangeCallback = dateChangeCallback;
                return _this;
            }
            KASDateInputView.prototype.getInputView = function () {
                var inputView = KASClient.UI.getElement("div", {
                    "padding-bottom": "8px",
                    "border-bottom": "0.5px solid #6f7e8f",
                    "display": "flex",
                    "flex-direction": "column"
                });
                this.dateTextLabel = KASClient.UI.getLabel("", {
                    "flex": "1",
                    "font-size": KASClient.UI.getScaledFontSize("16px"),
                    "color": "#006ff1",
                });
                this.setDate(this.date);
                KASClient.UI.setAccessibilityBasic(this.dateTextLabel, false, KASClient.UI.KASFormAccessibilityRole.Button);
                this.datePicker = KASClient.UI.getElement("input", {
                    "-webkit-appearance": "none",
                    "border": "none",
                    "background": "transparent",
                    "color": "transparent",
                    "width": "1px",
                    "height": "1px"
                });
                this.datePicker.type = "date";
                KASClient.UI.setAccessibilityBasic(this.datePicker, true);
                this.datePicker.onchange = function () {
                    if (this.invalidDate()) {
                        this.datePicker.valueAsNumber = new Date().getTime();
                    }
                    this.date = new Date(this.datePicker.valueAsNumber);
                    KASClient.UI.setText(this.dateTextLabel, KASClient.getDateString(this.date, true, false, this.showYear));
                    if (this.dateChangeCallback) {
                        this.dateChangeCallback(this.datePicker.valueAsNumber);
                    }
                }.bind(this);
                this.dateTextLabel.onclick = function () {
                    if (KASClient.getPlatform() == KASClient.Platform.Android) {
                        this.datePicker.click();
                    }
                    else {
                        this.datePicker.focus();
                    }
                }.bind(this);
                var dueDateView = KASClient.UI.getHorizontalDiv([this.dateTextLabel, this.datePicker]);
                KASClient.UI.addElement(dueDateView, inputView);
                return inputView;
            };
            KASDateInputView.prototype.invalidDate = function () {
                return (this.datePicker.value == null || this.datePicker.value == "" ||
                    (!this.allowPastDate && this.datePicker.valueAsNumber < this.getCurrentDateWithoutTime()));
            };
            KASDateInputView.prototype.getDate = function () {
                if (this.invalidDate()) {
                    return this.getCurrentDateWithoutTime();
                }
                return this.datePicker.valueAsNumber;
            };
            KASDateInputView.prototype.setDate = function (date) {
                this.date = date;
                var dateText;
                if (this.date != null) {
                    dateText = KASClient.getDateString(this.date, true, false, this.showYear);
                }
                else if (this.placeHolder != null) {
                    dateText = this.placeHolder;
                }
                else {
                    var date = new Date();
                    date.setUTCHours(0, 0, 0, 0);
                    dateText = KASClient.getDateString(date, true, false, this.showYear);
                }
                this.dateTextLabel.innerText = dateText;
            };
            KASDateInputView.prototype.getCurrentDateWithoutTime = function () {
                var date = new Date();
                date.setUTCHours(0, 0, 0, 0);
                return date.getTime();
            };
            return KASDateInputView;
        }(UI.KASInputView));
        UI.KASDateInputView = KASDateInputView;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        var KASImageGridAlbumViewRenderStyle;
        (function (KASImageGridAlbumViewRenderStyle) {
            KASImageGridAlbumViewRenderStyle[KASImageGridAlbumViewRenderStyle["GRID"] = 0] = "GRID";
            KASImageGridAlbumViewRenderStyle[KASImageGridAlbumViewRenderStyle["CAROUSEL"] = 1] = "CAROUSEL";
        })(KASImageGridAlbumViewRenderStyle = UI.KASImageGridAlbumViewRenderStyle || (UI.KASImageGridAlbumViewRenderStyle = {}));
        /**
         * KASImageGridAlbumView provides an album like view for a given set of
         * image attachments. It can be configured to render an album as a simple
         * grid of images or as a carousel which can be scrolled horizontally.
         *
         * To render the album as a carousel, set the GRID_ALBUM_VIEW_RENDER_STYLE
         * property to KASImageGridAlbumViewRenderStyle.CAROUSEL in props dictionary
         * when initializing.
         *
         * The album can be rendered in preview mode where a list of images are
         * expected as input. If preview mode is set to false, there will be an option
         * to pick images from camera or gallery (which can be further controlled using
         * ImagePickerSource).
         *
         * Any changes(add/remove) to the image attachments provided to during initialization
         * will fire the onChangeCallback handler.
         */
        var KASImageGridAlbumView = /** @class */ (function (_super) {
            __extends(KASImageGridAlbumView, _super);
            function KASImageGridAlbumView(header, imageAttachments, previewMode, props, onChangeCallback) {
                var _this = _super.call(this, header) || this;
                _this.imageAttachments = [];
                _this.previewMode = false;
                _this.DEFAULT_MAX_IMAGE_COUNT = 10;
                _this.maxImageCount = _this.DEFAULT_MAX_IMAGE_COUNT;
                _this.imagePickerSource = KASClient.ImagePickerSource.All;
                _this.props = JSON.parse("{}");
                _this.gridAlbumViewRenderStyle = KASImageGridAlbumViewRenderStyle.GRID;
                _this.imagesPendingLoad = [];
                /*
                 * The scroll end detection timeout is the maximum interval we will wait
                 * for between two scroll events before we interpret that scrolling has
                 * stopped. This value of 100ms is a fair estimate because scroll events
                 * are fired at intervals of around 50ms.
                 */
                _this.DEFAULT_SCROLL_END_DETECTION_TIMEOUT_IN_MS = 100;
                /*
                 * Lazy loading prevents loading of remote images when they are not in
                 * the viewport. When these images come into view, then the image is
                 * loaded. This helps in improving data usage and performance.
                 *
                 * This property is for internal use for development/testing purposes
                 * and should always true for all users.
                 */
                _this.enableLazyLoading = true;
                _this.albumContainsRemoteImages = false;
                if (imageAttachments != null) {
                    _this.imageAttachments = imageAttachments;
                }
                _this.previewMode = previewMode;
                _this.props = props;
                _this.onChangeCallback = onChangeCallback;
                _this.gridAlbumViewRenderStyle = _this.getGridAlbumViewRenderStyle(props);
                _this.container = UI.getElement("div", _this.getContainerStyleAttributes());
                return _this;
            }
            KASImageGridAlbumView.prototype.getGridAlbumViewRenderStyle = function (props) {
                if (!props || !props[KASImageGridAlbumView.GRID_ALBUM_VIEW_RENDER_STYLE]) {
                    return KASImageGridAlbumViewRenderStyle.GRID;
                }
                var viewRenderStyle = props[KASImageGridAlbumView.GRID_ALBUM_VIEW_RENDER_STYLE];
                if (viewRenderStyle == 1) {
                    return KASImageGridAlbumViewRenderStyle.CAROUSEL;
                }
                else {
                    return KASImageGridAlbumViewRenderStyle.GRID;
                }
            };
            KASImageGridAlbumView.prototype.getInputView = function () {
                UI.clearElement(this.container);
                switch (this.gridAlbumViewRenderStyle) {
                    case KASImageGridAlbumViewRenderStyle.CAROUSEL:
                        this.populateCarousel();
                        break;
                    case KASImageGridAlbumViewRenderStyle.GRID:
                    default:
                        this.populateGrid();
                        break;
                }
                if (this.previewMode && this.enableLazyLoading && this.albumContainsRemoteImages) {
                    this.scrollHandler = this.reloadImages.bind(this);
                    if (this.gridAlbumViewRenderStyle == KASImageGridAlbumViewRenderStyle.CAROUSEL) {
                        this.container.addEventListener('scroll', this.scrollHandler);
                    }
                    document.addEventListener('scroll', this.scrollHandler);
                    this.reloadImages();
                }
                return this.container;
            };
            KASImageGridAlbumView.prototype.prepareForDOMRemoval = function () {
                if (this.scrollHandler) {
                    document.removeEventListener('scroll', this.scrollHandler);
                }
            };
            KASImageGridAlbumView.prototype.populateGrid = function () {
                UI.addCSS(this.container, this.getContainerStyleAttributes());
                var cellCount = this.imageAttachments.length + (this.shouldShowAddImageButton() ? 1 : 0);
                for (var attachmentIndex = 0; attachmentIndex < cellCount; attachmentIndex++) {
                    var cellView = UI.getElement("div");
                    if (attachmentIndex < this.imageAttachments.length) {
                        var imageAttachment = this.imageAttachments[attachmentIndex];
                        var image = this.getImageViewForGrid(attachmentIndex, imageAttachment);
                        UI.addElement(image, cellView);
                    }
                    else if (attachmentIndex == this.imageAttachments.length && this.shouldShowAddImageButton()) {
                        UI.addElement(this.getAddImageButtonView((this.imagePickerSource == KASClient.ImagePickerSource.CameraBack) || (this.imagePickerSource == KASClient.ImagePickerSource.CameraFront)), cellView);
                    }
                    UI.addElement(cellView, this.container);
                }
            };
            KASImageGridAlbumView.prototype.populateCarousel = function () {
                UI.addCSS(this.container, this.getContainerStyleAttributes());
                var cellCount = this.imageAttachments.length + (this.shouldShowAddImageButton() ? 1 : 0);
                var tableView = UI.getTable();
                var tableRow = UI.getTableRow();
                for (var attachmentIndex = 0; attachmentIndex < cellCount; attachmentIndex++) {
                    var tableData = UI.getTableDataCell();
                    if (attachmentIndex < this.imageAttachments.length) {
                        var imageAttachment = this.imageAttachments[attachmentIndex];
                        var image = this.getImageViewForGrid(attachmentIndex, imageAttachment);
                        UI.addElement(image, tableData);
                    }
                    else if (attachmentIndex == this.imageAttachments.length && this.shouldShowAddImageButton()) {
                        UI.addElement(this.getAddImageButtonView((this.imagePickerSource == KASClient.ImagePickerSource.CameraBack) || (this.imagePickerSource == KASClient.ImagePickerSource.CameraFront)), tableData);
                    }
                    UI.addElement(tableData, tableRow);
                }
                UI.addElement(tableRow, tableView);
                UI.addElement(tableView, this.container);
            };
            KASImageGridAlbumView.prototype.setMaxImageCount = function (maxImageCount) {
                this.maxImageCount = maxImageCount;
            };
            KASImageGridAlbumView.prototype.setImagePickerSource = function (imagePickerSource) {
                this.imagePickerSource = imagePickerSource;
            };
            KASImageGridAlbumView.prototype.getSelectedAttachments = function () {
                return this.imageAttachments;
            };
            KASImageGridAlbumView.prototype.shouldShowAddImageButton = function () {
                if (this.previewMode) {
                    return false;
                }
                else {
                    if (this.imageAttachments.length < this.maxImageCount) {
                        return true;
                    }
                    else {
                        return false;
                    }
                }
            };
            KASImageGridAlbumView.prototype.getAddImageButtonView = function (cameraOnly) {
                if (cameraOnly === void 0) { cameraOnly = false; }
                var addImageButtonContainer = UI.getElement("div");
                var addImageButton;
                if (this.imageAttachments.length > 0) {
                    addImageButton = UI.getBase64Image(UI.Assets.addImageGridAlbum, this.getAddImageButtonStyleAttributes());
                    KASClient.UI.setAccessibilityBasic(addImageButton, false, KASClient.UI.KASFormAccessibilityRole.Button, KASClient.Internal.getKASClientString("AddMoreImages"));
                }
                else {
                    if (cameraOnly) {
                        addImageButton = UI.getBase64Image(UI.Assets.addCameraImageEmptyGridAlbum);
                        KASClient.UI.setAccessibilityBasic(addImageButton, false, KASClient.UI.KASFormAccessibilityRole.Button, KASClient.Internal.getKASClientString("CameraPicker"));
                    }
                    else {
                        addImageButton = UI.getBase64Image(UI.Assets.addImageEmptyGridAlbum);
                        KASClient.UI.setAccessibilityBasic(addImageButton, false, KASClient.UI.KASFormAccessibilityRole.Button, KASClient.Internal.getKASClientString("ImagePicker"));
                    }
                    UI.addCSS(addImageButton, this.getEmptyGridAddImageButtonStyleAttributes());
                }
                var self = this;
                UI.addClickEvent(addImageButton, function () {
                    self.props[KASClient.KASAttachmentListQuestionConfig.MAX_IMAGE_COUNT_KEY] = self.maxImageCount - self.imageAttachments.length;
                    KASClient.App.showAttachmentPickerAsync([KASClient.KASAttachmentType.Image], self.props, function (selectedAttachments, error) {
                        if (error != null) {
                            return;
                        }
                        self.imageAttachments = self.imageAttachments.concat(selectedAttachments);
                        self.imagePickerSource = self.props[KASClient.KASAttachmentListQuestionConfig.IMAGE_SOURCE_KEY];
                        self.getInputView();
                        self.onChangeCallback(self.imageAttachments);
                    });
                });
                UI.addElement(addImageButton, addImageButtonContainer);
                return addImageButtonContainer;
            };
            KASImageGridAlbumView.prototype.getImageViewForGrid = function (attachmentIndex, imageAttachment) {
                var path = imageAttachment.localPath;
                if (KASClient.isEmptyString(path)) {
                    path = imageAttachment.thumbnailServerUrl;
                }
                if (KASClient.isEmptyString(path)) {
                    path = imageAttachment.serverPath;
                }
                var image;
                if (this.previewMode) {
                    if (KASClient.isRemoteURL(path) && this.enableLazyLoading) {
                        this.albumContainsRemoteImages = true;
                        image = UI.getBase64Image(UI.Assets.gridAlbumImagePlaceHolder, this.getImageStyleAttributes());
                        UI.addCSS(image, this.getPlaceHolderBorderStyleAttributes());
                        image.setAttribute("data-src", path);
                        this.imagesPendingLoad.push(image);
                    }
                    else {
                        image = UI.getImage(path, this.getImageStyleAttributes());
                        UI.addCSS(image, this.getImageBorderStyleAttributes());
                    }
                }
                else {
                    image = UI.getImage(path, this.getImageStyleAttributes());
                    UI.addCSS(image, this.getImageBorderStyleAttributes());
                }
                image.onclick = function (index, e) {
                    var urlList = [];
                    for (var i = 0; i < this.imageAttachments.length; i++) {
                        var path = this.imageAttachments[i].localPath;
                        if (KASClient.isEmptyString(path)) {
                            path = this.imageAttachments[i].serverPath;
                        }
                        urlList.push(path);
                    }
                    KASClient.App.showImageImmersiveView(urlList, index);
                }.bind(this, attachmentIndex);
                if (!this.previewMode) {
                    var removeImageIcon = UI.getBase64Image(UI.Assets.removeImageGridAlbum, this.getRemoveImageIconStyleAttributes());
                    removeImageIcon.onclick = function (attachmentIndex, e) {
                        KASClient.removeElementFromArray(this.imageAttachments, attachmentIndex);
                        this.getInputView();
                        this.onChangeCallback(this.imageAttachments);
                    }.bind(this, attachmentIndex);
                    KASClient.UI.setAccessibilityBasic(removeImageIcon, false, KASClient.UI.KASFormAccessibilityRole.Button, KASClient.Internal.getKASClientString("RemoveImage") + (attachmentIndex + 1));
                    var imageContainer = UI.getElement("div", this.getEditModeImageContainerAttributes());
                    UI.addElement(image, imageContainer);
                    KASClient.UI.setAccessibilityBasic(image, false, KASClient.UI.KASFormAccessibilityRole.Image, KASClient.Internal.getKASClientString("Image") + (attachmentIndex + 1));
                    UI.addElement(removeImageIcon, imageContainer);
                    return imageContainer;
                }
                else {
                    KASClient.UI.setAccessibilityBasic(image, false, KASClient.UI.KASFormAccessibilityRole.Image, KASClient.Internal.getKASClientString("Image") + (attachmentIndex + 1));
                    return image;
                }
            };
            KASImageGridAlbumView.prototype.reloadImages = function () {
                if (this.scrollEndDetectionTimer) {
                    clearTimeout(this.scrollEndDetectionTimer);
                }
                if (this.imagesPendingLoad.length == 0 && this.scrollHandler) {
                    if (this.gridAlbumViewRenderStyle == KASImageGridAlbumViewRenderStyle.CAROUSEL) {
                        this.container.removeEventListener('scroll', this.scrollHandler);
                    }
                    document.removeEventListener('scroll', this.scrollHandler);
                    return;
                }
                this.scrollEndDetectionTimer = setTimeout(function () {
                    if (this.isViewInViewPort(this.container)) {
                        var processedImages = [];
                        for (var loadIndex = 0; loadIndex < this.imagesPendingLoad.length; loadIndex++) {
                            var image = this.imagesPendingLoad[loadIndex];
                            if (this.isViewInViewPort(image)) {
                                image.setAttribute('src', image.getAttribute('data-src'));
                                UI.addCSS(image, this.getImageBorderStyleAttributes());
                                image.removeAttribute('data-src');
                                processedImages.push(image);
                            }
                        }
                        for (var removeIndex = 0; removeIndex < processedImages.length; removeIndex++) {
                            var refIndex = this.imagesPendingLoad.indexOf(processedImages[removeIndex]);
                            KASClient.removeElementFromArray(this.imagesPendingLoad, refIndex);
                        }
                    }
                }.bind(this), this.DEFAULT_SCROLL_END_DETECTION_TIMEOUT_IN_MS);
            };
            KASImageGridAlbumView.prototype.isViewInViewPort = function (view) {
                if (!view) {
                    return false;
                }
                var rect = view.getBoundingClientRect(), vWidth = window.innerWidth || document.documentElement.clientWidth, vHeight = window.innerHeight || document.documentElement.clientHeight, efp = function (x, y) { return document.elementFromPoint(x, y); };
                // Return false if it's not in the viewport
                if (rect.right < 0 || rect.bottom < 0
                    || rect.left > vWidth || rect.top > vHeight)
                    return false;
                if (!view.parentElement) {
                    return false;
                }
                // Return true if any of its four corners are visible
                return (view.parentElement.contains(efp(rect.left, rect.top))
                    || view.parentElement.contains(efp(rect.right, rect.top))
                    || view.parentElement.contains(efp(rect.right, rect.bottom))
                    || view.parentElement.contains(efp(rect.left, rect.bottom)));
            };
            KASImageGridAlbumView.prototype.getContainerStyleAttributes = function () {
                if (this.gridAlbumViewRenderStyle == KASImageGridAlbumViewRenderStyle.CAROUSEL) {
                    return {
                        "display": "grid",
                        "grid-template-columns": "10px",
                        "overflow": "scroll",
                        "-webkit-overflow-scrolling": "touch"
                    };
                }
                else {
                    return {
                        "display": "flex",
                        "align-items": "flex-start",
                        "flex-wrap": "wrap"
                    };
                }
            };
            KASImageGridAlbumView.prototype.getImageStyleAttributes = function () {
                return {
                    "width": "80px",
                    "height": "80px",
                    "object-fit": "cover",
                    "border-radius": "4px",
                    "margin-left": "4px",
                    "margin-top": "4px",
                    "box-sizing": "border-box",
                    "-webkit-box-sizing": "border-box",
                    "-moz-border-box": "border-box"
                };
            };
            KASImageGridAlbumView.prototype.getImageBorderStyleAttributes = function () {
                return {
                    "border": "1.5px solid #e0e3e7"
                };
            };
            KASImageGridAlbumView.prototype.getPlaceHolderBorderStyleAttributes = function () {
                return {
                    "border": "none"
                };
            };
            KASImageGridAlbumView.prototype.getEditModeImageContainerAttributes = function () {
                return {
                    "position": "relative",
                    "height": "84px",
                    "width": "84px"
                };
            };
            KASImageGridAlbumView.prototype.getRemoveImageIconStyleAttributes = function () {
                return {
                    "position": "absolute",
                    "left": "66px",
                    "top": "8px",
                    "height": "14px",
                    "width": "14px"
                };
            };
            KASImageGridAlbumView.prototype.getEmptyGridAddImageButtonStyleAttributes = function () {
                return {
                    "width": "92px",
                    "height": "92px",
                    "object-fit": "cover"
                };
            };
            KASImageGridAlbumView.prototype.getAddImageButtonStyleAttributes = function () {
                return {
                    "width": "80px",
                    "height": "80px",
                    "object-fit": "cover",
                    "margin-left": "4px",
                    "margin-top": "4px"
                };
            };
            KASImageGridAlbumView.GRID_ALBUM_VIEW_RENDER_STYLE = "GRID_ALBUM_VIEW_RENDER_STYLE";
            return KASImageGridAlbumView;
        }(UI.KASInputView));
        UI.KASImageGridAlbumView = KASImageGridAlbumView;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
/// <reference path="./KASInputView.ts" />
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        var KASPhoneNumberInputView = /** @class */ (function (_super) {
            __extends(KASPhoneNumberInputView, _super);
            function KASPhoneNumberInputView(header, countryPhoneCode, phoneNumber) {
                var _this = _super.call(this, header) || this;
                _this.countryPhoneCode = 0;
                _this.phoneNumber = "";
                _this.countryPhoneCodesList = [];
                _this.phoneNumberInput = null;
                _this.countryPhoneCode = countryPhoneCode;
                _this.phoneNumber = phoneNumber;
                _this.countryPhoneCodesList = KASClient.KASCountryPhoneCode.getAllCountryPhoneCodes();
                return _this;
            }
            KASPhoneNumberInputView.prototype.getSelectedCountryCode = function () {
                return this.countryPhoneCode;
            };
            KASPhoneNumberInputView.prototype.getPhoneNumber = function () {
                return this.phoneNumber;
            };
            KASPhoneNumberInputView.prototype.setPhoneNumber = function (phoneNumber) {
                this.phoneNumber = phoneNumber;
                this.phoneNumberInput.value = this.phoneNumber;
            };
            KASPhoneNumberInputView.prototype.getInputView = function () {
                var phoneNumberInputViewContainerAttrs = {
                    "display": "flex",
                };
                var phoneNumberInputViewContainer = KASClient.UI.getElement("div", phoneNumberInputViewContainerAttrs);
                var countryPhoneCodeContainerAttrs = {
                    "width": "80px",
                    "border-bottom": "1px solid #e0e3e7",
                    "display": "flex",
                    "justify-content": "space-around"
                };
                var countryPhoneCodeContainer = KASClient.UI.getElement("div", countryPhoneCodeContainerAttrs);
                var countryCodeInputAttrs = {
                    "color": "#32495f",
                    "font-size": KASClient.UI.getScaledFontSize("16px")
                };
                var countryPhoneCodeInput = KASClient.UI.getLabel("", countryCodeInputAttrs);
                countryPhoneCodeInput.id = "countryPhoneCodeInputDiv";
                if (this.countryPhoneCode > 0) {
                    countryPhoneCodeInput.innerHTML = KASClient.KASCountryPhoneCode.getFormattedCountryPhoneCodeForCountry(this.countryPhoneCode, false);
                }
                else {
                    countryPhoneCodeInput.innerText = "+91";
                    this.countryPhoneCode = 91;
                }
                countryPhoneCodeContainer.onclick = function () {
                    var countryPhoneCodeSelectionPopup = KASClient.UI.getAlertDialogWithDiv(this.getCountryCodeDropdown(), true, null);
                    countryPhoneCodeSelectionPopup.id = "countryPhoneCodeSelectionPopup";
                    countryPhoneCodeSelectionPopup.style.display = "block";
                    this.setBasePageAccessibilityHidden(true);
                    KASClient.UI.addElement(countryPhoneCodeSelectionPopup, document.body);
                    KASClient.Internal.screenChanged("");
                    countryPhoneCodeSelectionPopup.onclick = function () {
                        var viewTapped = (event.target);
                        var dropDownView = this.countryCodeDropDown.getView();
                        if (!dropDownView.contains(viewTapped)) {
                            countryPhoneCodeSelectionPopup.remove();
                            this.setBasePageAccessibilityHidden(false);
                            KASClient.Internal.screenChanged("");
                        }
                    }.bind(this);
                }.bind(this);
                KASClient.UI.addElement(countryPhoneCodeInput, countryPhoneCodeContainer);
                var dropDownOpenButton = KASClient.UI.getBase64Image(KASClient.UI.Assets.dropDownExpand, { "width": "10px", "margin": "auto 0", "object-fit": "contain" });
                UI.setAccessibilityBasic(dropDownOpenButton, true);
                UI.setAccessibilityBasic(countryPhoneCodeContainer, false, UI.KASFormAccessibilityRole.Text, KASClient.Internal.getKASClientString("CountryCodeAccessibilityLabel", "+" + this.countryPhoneCode));
                KASClient.UI.addElement(dropDownOpenButton, countryPhoneCodeContainer);
                KASClient.UI.addElement(countryPhoneCodeContainer, phoneNumberInputViewContainer);
                var phoneNumberInputAttrs = {
                    "margin-left": "10px",
                    "-webkit-appearance": "none",
                    "border-radius": "0px",
                    "border": "none",
                    "border-bottom": "solid 1px #006ff1",
                    "margin-bottom": "0px",
                    "margin-top": "0px",
                    "width": "100%",
                    "color": "#32495f",
                    "font-size": KASClient.UI.getScaledFontSize("18px"),
                    "padding": "0px"
                };
                this.phoneNumberInput = document.createElement("input");
                KASClient.UI.addCSS(this.phoneNumberInput, phoneNumberInputAttrs);
                this.phoneNumberInput.type = "tel";
                this.phoneNumberInput.maxLength = 32;
                this.phoneNumberInput.value = this.phoneNumber;
                this.phoneNumberInput.oninput = function () {
                    if (!KASClient.isEmptyString(this.phoneNumberInput.value)) {
                        this.phoneNumber = this.phoneNumberInput.value;
                    }
                    else {
                        this.phoneNumber = "";
                    }
                    if (this.onChangeCallback) {
                        this.onChangeCallback(new KASClient.KASPhoneNumber(this.countryPhoneCode, this.phoneNumber));
                    }
                }.bind(this);
                this.phoneNumberInput.onfocus = function () {
                    KASClient.UI.addCSS(this.phoneNumberInput, { "border-bottom": "solid 1.5px #00a1ff" });
                    if (this.onFocusCallback) {
                        this.onFocusCallback(new KASClient.KASPhoneNumber(this.countryPhoneCode, this.phoneNumber));
                    }
                }.bind(this, this.phoneNumberInput);
                this.phoneNumberInput.onblur = function () {
                    if (this.onBlurCallback) {
                        this.onBlurCallback(new KASClient.KASPhoneNumber(this.countryPhoneCode, this.phoneNumber));
                    }
                }.bind(this);
                UI.setAccessibilityBasic(this.phoneNumberInput, false, UI.KASFormAccessibilityRole.None, KASClient.Internal.getKASClientString("PhoneNumberAccessibilityLabel"));
                KASClient.UI.addElement(this.phoneNumberInput, phoneNumberInputViewContainer);
                return phoneNumberInputViewContainer;
            };
            KASPhoneNumberInputView.prototype.setBasePageAccessibilityHidden = function (hidden) {
                for (var i = 0; i < document.body.childElementCount; i++) {
                    UI.setAccessibilityBasic(document.body.children.item(i), hidden);
                }
            };
            KASPhoneNumberInputView.prototype.countryPhoneCodeSelected = function (index, optionText, isUnSelect) {
                this.countryPhoneCode = this.countryPhoneCodesList[index];
                var countryPhoneCodeInputDiv = document.getElementById("countryPhoneCodeInputDiv");
                countryPhoneCodeInputDiv.innerText = KASClient.KASCountryPhoneCode.getFormattedCountryPhoneCodeForCountry(this.countryPhoneCode, false);
                UI.setAccessibilityBasic(countryPhoneCodeInputDiv.parentElement, false, UI.KASFormAccessibilityRole.Text, KASClient.Internal.getKASClientString("CountryCodeAccessibilityLabel", "+" + this.countryPhoneCode));
                var countryPhoneCodeSelectionPopup = document.getElementById("countryPhoneCodeSelectionPopup");
                countryPhoneCodeSelectionPopup.remove();
                this.setBasePageAccessibilityHidden(false);
                KASClient.Internal.screenChanged("");
                if (this.onChangeCallback) {
                    this.onChangeCallback(new KASClient.KASPhoneNumber(this.countryPhoneCode, this.phoneNumber));
                }
                if (this.onBlurCallback) {
                    this.onBlurCallback(new KASClient.KASPhoneNumber(this.countryPhoneCode, this.phoneNumber));
                }
            };
            KASPhoneNumberInputView.prototype.getCountryCodeDropdown = function () {
                var headerView = UI.getLabel(KASClient.Internal.getKASClientString("CountryCodeDropdownTitle"), {
                    "padding-bottom": "9px",
                    "padding-left": "12px",
                    "padding-top": "8px",
                    "font-size": "12px",
                    "color": "#727d88",
                    "height": "14px"
                });
                this.countryCodeDropDown = new KASClient.UI.KASFormDropDown(new KASClient.UI.KASDropDownModel(KASClient.KASCountryPhoneCode.getAllFormattedCountryPhoneCodes(), [], false, false), headerView);
                this.countryCodeDropDown.rowSelectCallBack = function (index, optionText, isUnSelect) {
                    this.countryPhoneCodeSelected(index, optionText, isUnSelect);
                }.bind(this);
                return this.countryCodeDropDown.getView();
            };
            return KASPhoneNumberInputView;
        }(UI.KASInputView));
        UI.KASPhoneNumberInputView = KASPhoneNumberInputView;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        var KASTextInputView = /** @class */ (function (_super) {
            __extends(KASTextInputView, _super);
            function KASTextInputView(title, inputText, placeholder, inputFontSize, titleAttributes) {
                if (titleAttributes === void 0) { titleAttributes = null; }
                var _this = _super.call(this, "") || this;
                _this.inputView = null;
                _this.inputText = null;
                _this.title = "";
                _this.placeholder = "";
                _this.inputFontSize = 20;
                _this.titleAttributes = null;
                _this.maxLength = -1;
                _this.inputChangeCallback = null;
                _this.onFocusCallback = null;
                _this.onBlurCallback = null;
                _this.title = title;
                _this.inputText = inputText;
                _this.placeholder = placeholder;
                _this.inputFontSize = inputFontSize;
                _this.titleAttributes = titleAttributes;
                return _this;
            }
            KASTextInputView.prototype.getInputView = function () {
                var view = KASClient.UI.getElement("div", { "display": "flex", "flex-direction": "column" });
                var attributes = this.titleAttributes ? this.titleAttributes : {
                    "color": "#000000",
                    "font-size": KASClient.UI.getScaledFontSize("12px"),
                    "font-weight": "500"
                };
                var titleView = KASClient.UI.getLabel(this.title, attributes);
                var titleId = "titleId" + new Date().getTime();
                KASClient.UI.setId(titleView, titleId);
                KASClient.UI.setAccessibilityBasic(titleView, false, KASClient.UI.KASFormAccessibilityRole.Text);
                KASClient.UI.addElement(titleView, view);
                var inputViewAttributes = {
                    "font-size": KASClient.UI.getScaledFontSize(this.inputFontSize + "px"),
                    "margin-top": "16px",
                    "margin-bottom": "16px",
                    "padding-bottom": "8px",
                    "color": "#32485f",
                    "border-bottom": "solid .5px #d4d8db"
                };
                if (this.maxLength > 0) {
                    inputViewAttributes["max-length"] = this.maxLength;
                }
                this.inputView = KASClient.UI.getContentEditableSpan(this.inputText, this.placeholder, inputViewAttributes, function () {
                    if (this.inputChangeCallback) {
                        this.inputChangeCallback();
                    }
                }.bind(this));
                this.inputView.onfocus = function () {
                    KASClient.UI.addCSS(this.inputView, { "border-bottom": "solid 1.5px #00a1ff" });
                    if (this.onFocusCallback)
                        this.onFocusCallback();
                }.bind(this);
                this.inputView.onblur = function () {
                    KASClient.UI.addCSS(this.inputView, { "border-bottom": "solid .5px #d4d8db" });
                    if (this.onBlurCallback)
                        this.onBlurCallback();
                }.bind(this);
                KASClient.UI.setAccessibilityBasic(this.inputView, false, KASClient.UI.KASFormAccessibilityRole.TextBox);
                KASClient.UI.setAccessibilityAttribute(this.inputView, KASClient.UI.KASFormAccessibilityKey.LabelledBy, titleId);
                KASClient.UI.addElement(this.inputView, view);
                return view;
            };
            KASTextInputView.prototype.getInputText = function () {
                return this.inputView.innerText;
            };
            KASTextInputView.prototype.setInputText = function (text) {
                this.inputView.innerText = text;
            };
            KASTextInputView.prototype.setFocus = function (focus) {
                if (focus) {
                    this.inputView.focus();
                }
                else {
                    this.inputView.blur();
                }
            };
            KASTextInputView.prototype.setMaxLength = function (length) {
                this.maxLength = length;
            };
            KASTextInputView.prototype.setCSSAttribute = function (attribute, value) {
                this.inputView.style[attribute] = value;
            };
            return KASTextInputView;
        }(UI.KASInputView));
        UI.KASTextInputView = KASTextInputView;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
/// <reference path="./KASInputView.ts" />
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        var KASTimeInputView = /** @class */ (function (_super) {
            __extends(KASTimeInputView, _super);
            /**
             *
             * @param header Header text of input view
             * @param Default Time in minutes, In case of null place will be shown
             * @param placeHolder Placeholder text, In case of null current time will be shown
             */
            function KASTimeInputView(header, time, placeHolder, timeChangeCallback, minTime, defaultTime) {
                if (placeHolder === void 0) { placeHolder = null; }
                if (timeChangeCallback === void 0) { timeChangeCallback = null; }
                var _this = _super.call(this, header) || this;
                _this.hour = null;
                _this.minute = null;
                _this.placeHolder = null;
                _this.use24HourFormat = false;
                time = time % 1440;
                _this.hour = parseInt("" + time / 24);
                _this.minute = time % 60;
                _this.placeHolder = placeHolder;
                _this.timeChangeCallback = timeChangeCallback;
                _this.minTime = minTime;
                _this.defaultTime = defaultTime;
                return _this;
            }
            KASTimeInputView.prototype.getInputView = function () {
                var inputView = KASClient.UI.getElement("div", {
                    "padding-bottom": "8px",
                    "border-bottom": "0.5px solid #6f7e8f",
                    "display": "flex",
                    "flex-direction": "column"
                });
                var timeText;
                if (this.hour != null && this.minute != null) {
                    timeText = this.getTimeString(this.hour, this.minute);
                }
                else if (this.placeHolder != null) {
                    timeText = this.placeHolder;
                }
                else {
                    var date = new Date();
                    timeText = this.getTimeString(date.getHours(), date.getMinutes());
                }
                var timeTextLabel = KASClient.UI.getLabel(timeText, {
                    "flex": "1",
                    "font-size": KASClient.UI.getScaledFontSize("16px"),
                    "color": "#006ff1",
                });
                KASClient.UI.setAccessibilityBasic(timeTextLabel, false, KASClient.UI.KASFormAccessibilityRole.Button);
                this.timePicker = KASClient.UI.getElement("input", {
                    "-webkit-appearance": "none",
                    "border": "none",
                    "background": "transparent",
                    "color": "transparent",
                    "width": "1px",
                    "height": "1px"
                });
                this.timePicker.type = "time";
                KASClient.UI.setAccessibilityBasic(this.timePicker, true);
                this.timePicker.onchange = function () {
                    if (isNaN(this.timePicker.valueAsNumber)) {
                        this.timePicker.valueAsNumber = new Date().getTime();
                    }
                    var inMin = this.timePicker.valueAsNumber / 60000;
                    this.time = parseInt("" + inMin / 60);
                    this.minute = inMin % 60;
                    KASClient.UI.setText(timeTextLabel, this.getTimeString(this.time, this.minute));
                    if (this.timeChangeCallback) {
                        this.timeChangeCallback(this.timePicker.valueAsNumber - new Date().getTime());
                    }
                }.bind(this);
                timeTextLabel.onclick = function () {
                    if (KASClient.getPlatform() == KASClient.Platform.Android) {
                        this.timePicker.click();
                    }
                    else {
                        this.timePicker.focus();
                    }
                }.bind(this);
                var dueDateView = KASClient.UI.getHorizontalDiv([timeTextLabel, this.timePicker]);
                KASClient.UI.addElement(dueDateView, inputView);
                return inputView;
            };
            KASTimeInputView.prototype.getTimeString = function (hour, minute) {
                var inMin = this.minTime / 60000;
                var minHour = parseInt("" + inMin / 60);
                var minMin = inMin % 60;
                inMin = this.defaultTime / 60000;
                var defaultHour = parseInt("" + inMin / 60);
                var defaultMin = inMin % 60;
                if (hour < minHour || (hour === minHour && minute < minMin)) {
                    hour = defaultHour;
                    minute = defaultMin;
                }
                return KASClient.toStringTimeObject(hour + ":" + minute);
            };
            KASTimeInputView.prototype.getTime = function () {
                var selectedTime = this.defaultTime;
                if (!isNaN(this.timePicker.valueAsNumber) && this.timePicker.valueAsNumber > this.minTime) {
                    selectedTime = this.timePicker.valueAsNumber;
                }
                return selectedTime;
            };
            return KASTimeInputView;
        }(UI.KASInputView));
        UI.KASTimeInputView = KASTimeInputView;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        var KASAlbumView = /** @class */ (function (_super) {
            __extends(KASAlbumView, _super);
            function KASAlbumView() {
                var _this = _super.call(this) || this;
                _this.imageLocalPaths = null;
                _this.attachments = [];
                _this.containsDocumentAttachments = false;
                _this.albumViewDiv = null;
                _this.slides = [];
                _this.photoIndexLabel = null;
                _this.openDocumentButtonContainer = null;
                _this.docTypeIcon = null;
                _this.currentIndex = 0;
                _this.gradientView = null;
                _this.showingThumbnail = false;
                _this.swipeCallBack = function (direction) { this.onSwipe(direction); }.bind(_this);
                _this.view.style.position = "relative";
                if (KASClient.isRenderedForWebApp()) {
                    _this.view.style.height = "inherit";
                }
                _this.albumViewDiv = KASClient.UI.getElement("div", _this.getAlbumViewDivAttributes());
                _this.gradientView = KASClient.UI.getDiv({
                    "background": "linear-gradient(rgba(0,0,0,0), rgba(0,0,0,0.6))",
                    "height": _this.getGradientViewHeight(),
                    "bottom": "0px",
                    "left": "0px",
                    "width": "100%",
                    "position": "absolute"
                });
                KASClient.UI.addSwipeGesture(_this.albumViewDiv, _this.swipeCallBack);
                _this.openDocumentButtonContainer = KASClient.UI.getDiv({
                    "height": "64px",
                    "bottom": "0px",
                    "left": "0px",
                    "width": "100%",
                    "position": "absolute",
                    "display": "none"
                });
                var openDocumentButton = KASClient.UI.getDiv({
                    "border": "1px solid #0078d4",
                    "border-radius": "9999px",
                    "padding": "8px 16px 8px 16px",
                    "background-color": "#FFFFFF",
                    "position": "absolute",
                    "bottom": "12px",
                    "left": "calc(50% - 60px)",
                    "align-items": "center",
                    "justify-content": "center"
                });
                var openDocumentLabel = KASClient.UI.getLabel(KASClient.Internal.getKASClientString("Open Document"), {
                    "color": "#0078d4",
                    "text-align": "center",
                    "font-size": KASClient.UI.getScaledFontSize("14px"),
                    "font-weight": MEDIUM_FONT_WEIGHT
                });
                KASClient.UI.addElement(openDocumentLabel, openDocumentButton);
                openDocumentButton.onclick = function () {
                    if (this.attachments != null && this.attachments.length > 0 && this.currentIndex < this.attachments.length) {
                        KASClient.App.openAttachmentImmersiveView(this.attachments[this.currentIndex]);
                    }
                    event.stopPropagation();
                }.bind(_this);
                KASClient.UI.addElement(openDocumentButton, _this.openDocumentButtonContainer);
                _this.docTypeIcon = KASClient.UI.getBase64Image(KASClient.UI.getAttachmentIconBase64("pdf"), {
                    "height": "36px",
                    "bottom": "12px",
                    "left": "12px",
                    "width": "36px",
                    "position": "absolute",
                    "display": "none"
                });
                KASClient.UI.addElement(_this.albumViewDiv, _this.view);
                return _this;
            }
            KASAlbumView.prototype.refreshView = function () {
                KASClient.UI.removeElement(this.blurView, this.view);
                for (var i = 0; i < this.slides.length; i++) {
                    KASClient.UI.removeElement(this.slides[i], this.albumViewDiv);
                }
                this.slides = [];
                this.currentIndex = 0;
                this.populateImagesForLocalPaths(this.imageLocalPaths);
            };
            KASAlbumView.prototype.showViewForLocalImages = function () {
                this.populateImagesForLocalPaths(this.imageLocalPaths);
            };
            KASAlbumView.prototype.showThumbnail = function () {
                if (!KASClient.isEmptyString(this.thumbnailBase64)) {
                    this.showingThumbnail = true;
                    var slide = this.getSlideWithImageSrc(KASClient.UI.getBase64Src(this.thumbnailBase64), this.getSlideImageProperties());
                    KASClient.UI.setAccessibilityBasic(slide, true);
                    KASClient.UI.addElement(slide, this.albumViewDiv);
                }
            };
            KASAlbumView.prototype.showTapToDownloadView = function () {
                this.addTapToDownloadButtonToDiv(this.view);
            };
            KASAlbumView.prototype.hideTapToDownloadView = function () {
                KASClient.UI.removeElement(this.blurView, this.view);
            };
            KASAlbumView.prototype.popualatePhotoIndexLabel = function () {
                if (this.slides.length > 1) {
                    this.photoIndexLabel.style.display = "block";
                    this.photoIndexLabel.innerText = (this.currentIndex + 1).toLocaleString() + " / " + this.slides.length.toLocaleString();
                    KASClient.UI.setAccessibilityBasic(this.photoIndexLabel, false, KASClient.UI.KASFormAccessibilityRole.Text, KASClient.Internal.getKASClientString("X_of_Y_Images", (this.currentIndex + 1).toLocaleString(), this.slides.length.toLocaleString()));
                }
                else {
                    this.photoIndexLabel.style.display = "none";
                    KASClient.UI.setAccessibilityBasic(this.photoIndexLabel, true);
                }
            };
            KASAlbumView.prototype.populateImagesForLocalPaths = function (localPaths) {
                this.showingThumbnail = false;
                KASClient.UI.clearElement(this.albumViewDiv);
                KASClient.addCSS(this.gradientView, { "height": this.getGradientViewHeight() });
                this.photoIndexLabel = KASClient.UI.getDiv({
                    "font-size": KASClient.UI.getScaledFontSize("14px"),
                    "bottom": "10px",
                    "right": "15px",
                    "position": "absolute",
                    "color": "white"
                });
                for (var i = 0; i < localPaths.length; i++) {
                    var imageProperties = this.getSlideImageProperties();
                    if (this.attachments != null && this.attachments.length > 0) {
                        if (this.attachments[i].type == KASClient.KASAttachmentType.Document) {
                            if (KASClient.isEmptyString(this.attachments[i].thumbnail)) {
                                imageProperties = this.getSlideThumbnailImageProperties();
                            }
                            else {
                                imageProperties = this.getDocumentSlideImageProperties();
                            }
                        }
                    }
                    var slide = this.getSlideWithImageSrc(localPaths[i], imageProperties);
                    this.slides.push(slide);
                    KASClient.UI.addElement(slide, this.albumViewDiv);
                }
                if (localPaths.length > 1) {
                    var prev = KASClient.UI.getBase64Image(UI.Assets.leftArrowAlbum, this.getPrevBtnAttributes());
                    prev.onclick = function () { event.stopPropagation(); this.plusSlides(-1); }.bind(this);
                    KASClient.UI.setAccessibilityBasic(prev, false, UI.KASFormAccessibilityRole.Button, KASClient.Internal.getKASClientString("AlbumPrevButtonAccessibilityText"));
                    var next = KASClient.UI.getBase64Image(UI.Assets.rightArrowAlbum, this.getNextBtnAttributes());
                    next.onclick = function () { event.stopPropagation(); this.plusSlides(1); }.bind(this);
                    KASClient.UI.setAccessibilityBasic(next, false, UI.KASFormAccessibilityRole.Button, KASClient.Internal.getKASClientString("AlbumNextButtonAccessibilityText"));
                    KASClient.UI.addElement(prev, this.albumViewDiv);
                    KASClient.UI.addElement(next, this.albumViewDiv);
                    KASClient.UI.addElement(this.gradientView, this.albumViewDiv);
                }
                else if (localPaths.length == 1 && this.attachments != null && this.attachments.length > 0 &&
                    this.attachments[0].type == KASClient.KASAttachmentType.Document) {
                    KASClient.UI.addElement(this.gradientView, this.albumViewDiv);
                }
                if (this.tapEnabled) {
                    this.view.onclick = function () {
                        if (this.onImageTappedCallback)
                            this.onImageTappedCallback(this.currentIndex);
                    }.bind(this);
                }
                if (this.slides.length > 0 && this.shouldShowRemoveButton) {
                    this.addRemoveImageButton();
                }
                KASClient.UI.addElement(this.photoIndexLabel, this.albumViewDiv);
                KASClient.UI.addElement(this.openDocumentButtonContainer, this.albumViewDiv);
                KASClient.UI.addElement(this.docTypeIcon, this.albumViewDiv);
                KASClient.UI.addElement(this.albumViewDiv, this.view);
                this.showSlide(this.currentIndex);
            };
            KASAlbumView.prototype.onSwipe = function (direction) {
                var shiftBy = 0;
                if (direction == 'r')
                    shiftBy = -1;
                else if (direction == 'l')
                    shiftBy = 1;
                this.plusSlides(shiftBy);
            };
            KASAlbumView.prototype.getSlideWithImageSrc = function (src, imageAttributes) {
                var slide = KASClient.UI.getElement("div", { "display": "flex", "width": "100%", "overflow": "hidden", "align-items": "center", "justify-content": "center" });
                var image = KASClient.UI.getElement("img", imageAttributes);
                image.src = src;
                if (this.tapEnabled && this.onImageTappedCallback && !this.showingThumbnail) {
                    KASClient.UI.setAccessibilityBasic(image, false, UI.KASFormAccessibilityRole.Image, KASClient.Internal.getKASClientString("TapToOpenText"));
                }
                else {
                    KASClient.UI.setAccessibilityBasic(image, false, UI.KASFormAccessibilityRole.Image, " ");
                }
                KASClient.UI.addElement(image, slide);
                return slide;
            };
            KASAlbumView.prototype.showSlide = function (slideIndex) {
                if (this.slides.length < 1)
                    return;
                // for circular flow of slides
                if (slideIndex >= this.slides.length)
                    slideIndex = 0;
                if (slideIndex < 0)
                    slideIndex = this.slides.length - 1;
                for (var i = 0; i < this.slides.length; i++) {
                    this.slides[i].style.display = "none";
                }
                if (slideIndex < this.slides.length) {
                    this.slides[slideIndex].style.display = "flex";
                    this.currentIndex = slideIndex;
                }
                this.popualatePhotoIndexLabel();
                if (this.attachments != null && this.attachments.length > 0) {
                    if (this.attachments[this.currentIndex].type == KASClient.KASAttachmentType.Document) {
                        this.openDocumentButtonContainer.style.display = "flex";
                        KASClient.addCSS(this.gradientView, { "height": "64px" });
                        var localPath = this.attachments[this.currentIndex].localPath;
                        var thumbnail = this.attachments[this.currentIndex].thumbnail;
                        if (!KASClient.isEmptyString(localPath) && KASClient.UI.isPDFDocument(localPath) && !KASClient.isEmptyString(thumbnail)) {
                            this.docTypeIcon.src = KASClient.UI.getBase64Src(KASClient.UI.getAttachmentIconBase64("pdf"));
                            KASClient.UI.addCSS(this.docTypeIcon, { "display": "block" });
                        }
                        else {
                            KASClient.UI.addCSS(this.docTypeIcon, { "display": "none" });
                        }
                    }
                    else {
                        this.openDocumentButtonContainer.style.display = "none";
                        KASClient.UI.addCSS(this.docTypeIcon, { "display": "none" });
                    }
                }
            };
            KASAlbumView.prototype.plusSlides = function (n) {
                this.showSlide(this.currentIndex + n);
            };
            KASAlbumView.prototype.getPrevNextBtnAttributes = function () {
                return {
                    "position": "absolute",
                    "object-fit": "contain",
                    "top": "calc(50% - 28px)",
                    "width": "30px",
                    "height": "55px",
                };
            };
            KASAlbumView.prototype.getNextBtnAttributes = function () {
                var attr = this.getPrevNextBtnAttributes();
                attr["right"] = "0";
                return attr;
            };
            KASAlbumView.prototype.getPrevBtnAttributes = function () {
                var attr = this.getPrevNextBtnAttributes();
                attr["left"] = "0";
                return attr;
            };
            KASAlbumView.prototype.getNumberTextAttributes = function () {
                return {
                    "color": "white",
                    "text-shadow": "0px 2px 2px black",
                    "font-size": KASClient.UI.getScaledFontSize("12px"),
                    "padding": "8px 12px",
                    "position": "absolute",
                    "top": "0"
                };
            };
            KASAlbumView.prototype.getAlbumViewDivAttributes = function () {
                return {
                    "display": "flex",
                    "background-color": "#fefefe",
                    "padding": "0",
                    "position": "relative",
                    "width": "100%",
                    "height": "100%"
                };
            };
            KASAlbumView.prototype.getSlideImageProperties = function () {
                return {
                    "width": "100%",
                    "height": "100%",
                    "object-fit": "cover"
                };
            };
            KASAlbumView.prototype.getDocumentSlideImageProperties = function () {
                return {
                    "width": "100%",
                    "height": "100%",
                    "object-fit": "contain"
                };
            };
            KASAlbumView.prototype.getSlideThumbnailImageProperties = function () {
                return {
                    "width": "72px",
                    "height": "72px"
                };
            };
            KASAlbumView.prototype.addRemoveImageButton = function () {
                var removeImgBtn = KASClient.UI.getBase64Image(UI.Assets.crossButtonBlack, {
                    "position": "absolute",
                    "right": "13px",
                    "top": "13px",
                    "width": "14px",
                    "height": "14px",
                    "padding": "5px" // to increase tap area
                });
                UI.setAccessibilityBasic(removeImgBtn, false, UI.KASFormAccessibilityRole.Button, KASClient.Internal.getKASClientString("RemoveAttachmentFormatText", "Image") + "." + KASClient.Internal.getKASClientString("TapToRemoveText", "Image"));
                KASClient.UI.addElement(removeImgBtn, this.albumViewDiv);
                removeImgBtn.onclick = function () {
                    var indexToRemove = this.currentIndex;
                    if (this.removeImageCallback)
                        this.removeImageCallback(indexToRemove);
                }.bind(this);
            };
            KASAlbumView.prototype.getGradientViewHeight = function () {
                if (this.containsDocumentAttachments) {
                    return "64px";
                }
                return "40px";
            };
            return KASAlbumView;
        }(UI.KASAttachmentView));
        UI.KASAlbumView = KASAlbumView;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        var KASAlbumViewHandler = /** @class */ (function () {
            function KASAlbumViewHandler(albumViewModel) {
                this.model = albumViewModel;
                this.view = new UI.KASAlbumView();
                this.view.containsDocumentAttachments = this.model.containsDocumentAttachments;
                this.view.retryButtonCallback = function () { this.retryButtonTapped(); }.bind(this);
                this.view.removeImageCallback = function (i) { this.imageRemoved(i); }.bind(this);
                this.view.tapEnabled = this.model.enableOnTap;
                this.view.shouldShowRemoveButton = this.model.showRemoveButton;
                this.view.onImageTappedCallback = function (i) { this.onImageTappedAtIndex(i); }.bind(this);
                this.view.thumbnailBase64 = this.model.thumbnailBase64; // thumbnail should be populated before this object is created
            }
            KASAlbumViewHandler.prototype.addImageObjects = function (imageObjects) {
                this.model.imageObjects.push.apply(this.model.imageObjects, imageObjects);
                this.refreshAlbumView();
            };
            KASAlbumViewHandler.prototype.addImageLocalPaths = function (imageLocalPaths) {
                this.model.imageLocalPaths.push.apply(this.model.imageLocalPaths, imageLocalPaths);
                this.refreshAlbumView();
            };
            KASAlbumViewHandler.prototype.removeLocalPaths = function (indices) {
                if (this.shouldProcessGenericAttachments()) {
                    this.model.attachments = this.model.attachments.filter(function (el, i) { return indices.indexOf(i) < 0; });
                }
                else {
                    if (!this.model.hasStaticContent) {
                        this.model.imageObjects = this.model.imageObjects.filter(function (el, i) { return indices.indexOf(i) < 0; });
                    }
                    else {
                        this.model.imageObjects = this.model.imageObjects.filter(function (el, i) { return indices.indexOf(i) < 0; });
                    }
                }
                this.refreshData(this.model);
                this.refreshAlbumView();
            };
            KASAlbumViewHandler.prototype.refreshAlbumView = function () {
                this.refreshData(this.model);
                this.view.refreshView();
            };
            KASAlbumViewHandler.prototype.populateLocalImagePathsInModel = function (albumViewModel) {
                if (!this.model.hasStaticContent) {
                    this.model.imageLocalPaths = [];
                    if ((albumViewModel.imageObjects == null || albumViewModel.imageObjects.length == 0) &&
                        albumViewModel.attachments != null && albumViewModel.attachments.length > 0) {
                        for (var i = 0; i < albumViewModel.attachments.length; i++) {
                            var attachment = albumViewModel.attachments[i];
                            if (attachment.type == KASClient.KASAttachmentType.Document) {
                                if (!KASClient.isEmptyString(attachment.thumbnail)) {
                                    this.model.imageLocalPaths.push(KASClient.UI.getBase64Src(attachment.thumbnail));
                                }
                                else if (!KASClient.isEmptyString(attachment.localPath)) {
                                    var fileExt = attachment.localPath.split('.').pop().toLowerCase();
                                    this.model.imageLocalPaths.push(KASClient.UI.getBase64Src(KASClient.UI.getAttachmentIconBase64(fileExt)));
                                }
                            }
                            else {
                                this.model.imageLocalPaths.push(this.model.attachments[i].localPath);
                            }
                        }
                    }
                    else {
                        for (var i = 0; i < albumViewModel.imageObjects.length; i++) {
                            this.model.imageLocalPaths.push(this.model.imageObjects[i].localPath);
                        }
                    }
                }
            };
            KASAlbumViewHandler.prototype.refreshData = function (model) {
                this.populateLocalImagePathsInModel(model);
                this.view.imageLocalPaths = this.model.imageLocalPaths;
                this.view.attachments = this.model.attachments;
            };
            KASAlbumViewHandler.prototype.getAlbumView = function () {
                this.refreshData(this.model);
                if (this.model.allLocalPathsAvailable) {
                    this.view.showViewForLocalImages();
                    if (!this.model.hasStaticContent) {
                        if (this.model.isOutgoing) {
                            if (this.model.allServerPathsAvailable && this.model.messageSendStatus != 2) {
                            }
                            else {
                                if (this.model.showLoadingWhileUploads)
                                    this.view.showLoadingIndicator();
                            }
                        }
                        else {
                        }
                    }
                }
                else {
                    if (!this.model.isOutgoing) {
                        this.view.showThumbnail();
                        if (this.model.isAutoDownloadEnabled) {
                            this.onDownloadTriggered();
                        }
                        else {
                            // read isDownloading from native
                            if (this.model.isDownloading) {
                                this.onDownloadTriggered();
                            }
                            else {
                                this.view.showTapToDownloadView();
                            }
                        }
                    }
                }
                return this.view.getView();
            };
            KASAlbumViewHandler.prototype.getAttachmentsWithoutLocalPath = function () {
                var objs = [];
                for (var i = 0; i < this.model.imageObjects.length; i++) {
                    var obj = this.model.imageObjects[i];
                    if (!KASClient.KASAttachment.hasLocalPath(obj) && KASClient.KASAttachment.hasServerPath(obj)) {
                        objs.push(obj.attachmentId);
                    }
                }
                return objs;
            };
            KASAlbumViewHandler.prototype.onDownloadFinished = function (downloadedAttachment, error) {
                if (error) {
                    this.view.showRetryButton();
                }
                else {
                    KASClient.logToReportNative("Logging from onDownloadFinished, serverPath - " + downloadedAttachment.serverPath + ", localPath - " + downloadedAttachment.localPath);
                    for (var i = 0; i < this.model.imageObjects.length; i++) {
                        var imageObject = this.model.imageObjects[i];
                        if (imageObject.serverPath == downloadedAttachment.serverPath) {
                            imageObject.localPath = downloadedAttachment.localPath; // TEST
                            break;
                        }
                    }
                    // if all downloaded, remove loading indicator
                    if (this.allLocalPathsExist()) {
                        this.model.allLocalPathsAvailable = true;
                        this.refreshData(this.model);
                        this.view.refreshView();
                        if (this.downloadFinishedCallback) {
                            this.downloadFinishedCallback();
                        }
                    }
                }
            };
            KASAlbumViewHandler.prototype.allLocalPathsExist = function () {
                var allExists = true;
                if (this.shouldProcessGenericAttachments()) {
                    for (var i = 0; i < this.model.attachments.length; i++) {
                        var attachment = this.model.attachments[i];
                        if (attachment.localPath == "") {
                            allExists = false;
                            break;
                        }
                    }
                }
                else {
                    for (var i = 0; i < this.model.imageObjects.length; i++) {
                        var imageObject = this.model.imageObjects[i];
                        if (imageObject.localPath == "") {
                            allExists = false;
                            break;
                        }
                    }
                }
                return allExists;
            };
            KASAlbumViewHandler.prototype.onUploadFinished = function () {
            };
            KASAlbumViewHandler.prototype.onUploadFailed = function () {
            };
            KASAlbumViewHandler.prototype.onDownloadStopped = function () {
                if (this.shouldProcessGenericAttachments()) {
                    this.model.attachments.forEach(function (attachment) {
                        KASClient.App.cancelAttachmentDownloadAsync(attachment, null);
                    });
                }
                else {
                    this.model.imageObjects.forEach(function (element) {
                        KASClient.App.cancelAttachmentDownloadAsync(element, null);
                    });
                }
            };
            KASAlbumViewHandler.prototype.onDownloadFailed = function () {
                this.view.showRetryButton();
            };
            KASAlbumViewHandler.prototype.retryButtonTapped = function () {
                this.onDownloadTriggered();
            };
            KASAlbumViewHandler.prototype.imageRemoved = function (index) {
                this.removeLocalPaths([index]);
                if (this.view.imageLocalPaths.length > 1)
                    this.view.showSlide(index - 1);
                if (this.removeImageFromAlbumCallback) {
                    this.removeImageFromAlbumCallback(index);
                }
            };
            KASAlbumViewHandler.prototype.onDownloadTriggered = function () {
                KASClient.App.hasStorageAccessForAttachmentType(KASClient.KASAttachmentType.Image, function (hasAccess, error) {
                    if (hasAccess) {
                        this.view.showLoadingIndicator();
                        this.startDownloadForImagesForAttachment(null);
                    }
                }.bind(this));
            };
            KASAlbumViewHandler.prototype.onImageTappedAtIndex = function (imgIndex) {
                if (this.shouldProcessGenericAttachments()) {
                    KASClient.App.openImmersiveViewForAttachmentList(this.view.attachments, imgIndex);
                }
                else {
                    KASClient.App.showImageImmersiveView(this.view.imageLocalPaths, imgIndex);
                }
            };
            KASAlbumViewHandler.prototype.startDownloadForImagesForAttachment = function (callback) {
                var downloadCallBack = callback;
                if (callback == null || callback == undefined) {
                    downloadCallBack = function (downloadedAttachment, error) {
                        this.onDownloadFinished(downloadedAttachment, error);
                    }.bind(this);
                }
                if (this.shouldProcessGenericAttachments()) {
                    this.model.attachments.forEach(function (attachment) {
                        if (attachment.localPath == "" && attachment.serverPath != "") {
                            KASClient.App.downloadAttachmentAsync(attachment, downloadCallBack);
                        }
                    });
                }
                else {
                    this.model.imageObjects.forEach(function (element) {
                        if (element.localPath == "" && element.serverPath != "") {
                            KASClient.App.downloadAttachmentAsync(element, downloadCallBack);
                        }
                    });
                }
            };
            KASAlbumViewHandler.prototype.shouldProcessGenericAttachments = function () {
                // KASAlbumView's datasource can be either imageObjects or attachments(images+documents).
                // If imageObjects is initialized then we give priority to that so that
                // existing flows are unaffected. 
                return ((this.model.imageObjects == null || this.model.imageObjects.length == 0) &&
                    this.model.attachments != null && this.model.attachments.length > 0);
            };
            return KASAlbumViewHandler;
        }());
        UI.KASAlbumViewHandler = KASAlbumViewHandler;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
/// <reference path="../KASAttachmentViewModel.ts" />
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        var KASAlbumViewModel = /** @class */ (function (_super) {
            __extends(KASAlbumViewModel, _super);
            function KASAlbumViewModel() {
                var _this = _super.call(this) || this;
                _this.imageLocalPaths = [];
                _this.imageObjects = [];
                _this.thumbnailBase64 = "";
                _this.shouldBlurThumbnail = false;
                // If attachments are provided then the imageObjects parameter above will not be processed. 
                // Should eventually setup a more clearer interface for this widget.
                _this.attachments = [];
                _this.containsDocumentAttachments = false;
                return _this;
            }
            return KASAlbumViewModel;
        }(UI.KASAttachmentViewModel));
        UI.KASAlbumViewModel = KASAlbumViewModel;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        var KASAudioView = /** @class */ (function (_super) {
            __extends(KASAudioView, _super);
            function KASAudioView(audio) {
                var _this = _super.call(this) || this;
                _this.audioObj = null;
                _this.audioDiv = null;
                _this.thumbnailView = null;
                _this.view.style.position = "relative";
                _this.audioObj = audio;
                _this.thumbnailView = new UI.KASAttachmentThumbnailView();
                return _this;
            }
            KASAudioView.prototype.refreshView = function () {
                this.populateView(this.audioObj);
            };
            KASAudioView.prototype.showViewForAudio = function () {
                this.populateView(this.audioObj);
            };
            KASAudioView.prototype.showTapToDownloadView = function () {
                KASClient.UI.clearElement(this.thumbnailView.containerDiv);
                this.thumbnailView.containerDiv.style.height = "40px";
                this.addTapToDownloadButtonToDiv(this.thumbnailView.containerDiv);
            };
            KASAudioView.prototype.showLoadingIndicator = function () {
                KASClient.UI.clearElement(this.thumbnailView.containerDiv);
                this.thumbnailView.containerDiv.style.height = "25px";
                this.addLoadingIndicatorToDiv(this.thumbnailView.containerDiv);
            };
            KASAudioView.prototype.showRetryButton = function () {
                KASClient.UI.clearElement(this.thumbnailView.containerDiv);
                this.thumbnailView.containerDiv.style.height = "40px";
                this.addRetryButtonToDiv(this.thumbnailView.containerDiv);
            };
            KASAudioView.prototype.populateView = function (obj) {
                if (this.tapEnabled) {
                    this.thumbnailView.onTappedCallback = this.onTappedCallback;
                }
                if (this.shouldShowRemoveButton) {
                    this.thumbnailView.removeBtnCallback = this.removeBtnCallback;
                }
                KASClient.UI.clearElement(this.view);
                this.audioDiv = this.thumbnailView.getView(obj.fileName, obj.type, obj.size);
                var playBtn = KASClient.UI.getBase64Image(UI.Assets.audioPlay, { "width": "35px", "height": "35px", "display": "block", "margin": "auto" });
                if (this.tapEnabled) {
                    this.thumbnailView.containerDiv.style.paddingTop = "5px";
                    KASClient.UI.addElement(playBtn, this.thumbnailView.containerDiv);
                }
                if (this.shouldShowRemoveButton) {
                    this.addRemoveButton();
                }
                KASClient.UI.addElement(this.audioDiv, this.view);
            };
            KASAudioView.prototype.getLoadingViewAttributes = function (pictureUrl) {
                var attr = _super.prototype.getLoadingViewAttributes.call(this, pictureUrl);
                attr["width"] = "25px";
                attr["height"] = "25px";
                return attr;
            };
            KASAudioView.prototype.addRemoveButton = function () {
                var btn = KASClient.UI.getBase64Image(UI.Assets.crossButtonBlack, {
                    "position": "absolute",
                    "right": "-6px",
                    "top": "-6px",
                    "width": "16px",
                    "height": "16px"
                });
                KASClient.UI.addElement(btn, this.audioDiv);
                UI.setAccessibilityBasic(btn, false, UI.KASFormAccessibilityRole.Button, KASClient.Internal.getKASClientString("RemoveText") + " - " + KASClient.Internal.getKASClientString("TapToRemoveText", KASClient.Internal.getKASClientString("KASAttachmentAudioText")));
                if (this.removeBtnCallback) {
                    btn.onclick = this.removeBtnCallback;
                }
            };
            KASAudioView.prototype.getBlurViewAttributes = function () {
                var attr = _super.prototype.getBlurViewAttributes.call(this);
                attr["margin"] = "0";
                return attr;
            };
            KASAudioView.prototype.getAudioPlayerView = function () {
                var player = KASClient.UI.getElement("audio", { "width": "100%" });
                player.controls = true;
                player.src = this.audioObj.localPath;
                player.onclick = function () {
                    event.stopPropagation();
                };
                return player;
            };
            KASAudioView.prototype.showAudioPlayer = function () {
                var player = this.getAudioPlayerView();
                player.play();
                KASClient.UI.clearElement(this.thumbnailView.containerDiv);
                KASClient.UI.addElement(player, this.thumbnailView.containerDiv);
            };
            return KASAudioView;
        }(UI.KASAttachmentView));
        UI.KASAudioView = KASAudioView;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        var KASAudioViewHandler = /** @class */ (function () {
            function KASAudioViewHandler(audioViewModel) {
                this.model = audioViewModel;
                this.view = new UI.KASAudioView(this.model.audioObj);
                this.view.retryButtonCallback = function () { this.retryButtonTapped(); }.bind(this);
                this.view.onTappedCallback = function () { this.onaudioTapped(); }.bind(this);
                this.view.shouldShowRemoveButton = this.model.showRemoveButton;
                this.view.removeBtnCallback = function () { this.audioRemoved(); }.bind(this);
                this.view.tapEnabled = this.model.enableOnTap;
            }
            KASAudioViewHandler.prototype.refreshaudioView = function () {
                this.view.audioObj = this.model.audioObj;
                this.view.refreshView();
            };
            KASAudioViewHandler.prototype.getAudioView = function () {
                this.view.audioObj = this.model.audioObj;
                this.view.showViewForAudio();
                if (KASClient.KASAttachment.hasLocalPath(this.model.audioObj)) {
                    if (!this.model.hasStaticContent) {
                        if (this.model.isOutgoing) {
                            if (KASClient.KASAttachment.hasLocalPath(this.model.audioObj) && this.model.messageSendStatus != 2) {
                            }
                            else {
                                this.view.showLoadingIndicator();
                            }
                        }
                        else {
                        }
                    }
                }
                else {
                    if (!this.model.isOutgoing) {
                        if (this.model.isAutoDownloadEnabled) {
                            this.onDownloadTriggered();
                        }
                        else {
                            if (this.model.isDownloading) {
                                this.onDownloadTriggered();
                            }
                            else {
                                this.view.showTapToDownloadView();
                            }
                        }
                    }
                }
                return this.view.getView();
            };
            KASAudioViewHandler.prototype.audioRemoved = function () {
                this.model.audioObj = null;
                this.view.audioObj = null;
                if (this.audioRemovedCallback) {
                    this.audioRemovedCallback();
                }
            };
            KASAudioViewHandler.prototype.onDownloadFinished = function (downloadedAttachment, error) {
                if (error) {
                }
                else {
                    var attachmentShown = this.model.audioObj;
                    if (attachmentShown.serverPath == downloadedAttachment.serverPath) {
                        attachmentShown.localPath = downloadedAttachment.localPath;
                    }
                    // if all downloaded, remove loading indicator
                    if (this.allLocalPathsExist()) {
                        this.model.allLocalPathsAvailable = true;
                        this.view.audioObj = this.model.audioObj;
                        this.view.refreshView();
                        if (this.downloadFinishedCallback) {
                            this.downloadFinishedCallback();
                        }
                    }
                }
            };
            // should use array of missing local paths ?
            KASAudioViewHandler.prototype.allLocalPathsExist = function () {
                return KASClient.KASAttachment.hasLocalPath(this.model.audioObj);
            };
            KASAudioViewHandler.prototype.onUploadFinished = function () {
            };
            KASAudioViewHandler.prototype.onUploadFailed = function () {
            };
            KASAudioViewHandler.prototype.onDownloadStopped = function () {
                KASClient.App.cancelAttachmentDownloadAsync(this.model.audioObj, null);
            };
            KASAudioViewHandler.prototype.onDownloadFailed = function () {
                this.view.showRetryButton();
            };
            KASAudioViewHandler.prototype.onaudioTapped = function () {
                var docTapped = this.model.audioObj;
                if (KASClient.KASAttachment.hasLocalPath(docTapped)) {
                    this.view.onTappedCallback = null;
                    this.view.showAudioPlayer();
                }
                else {
                    this.onDownloadTriggered();
                }
            };
            KASAudioViewHandler.prototype.retryButtonTapped = function () {
                this.onDownloadTriggered();
            };
            KASAudioViewHandler.prototype.onDownloadTriggered = function () {
                KASClient.App.hasStorageAccessForAttachmentType(KASClient.KASAttachmentType.Audio, function (hasAccess, error) {
                    if (hasAccess) {
                        this.view.showLoadingIndicator();
                        this.startDownloadForaudio(null);
                    }
                }.bind(this));
            };
            KASAudioViewHandler.prototype.startDownloadForaudio = function (callback) {
                var downloadCallBack = callback;
                if (callback == null) {
                    downloadCallBack = function (downloadedAttachment, error) {
                        this.onDownloadFinished(downloadedAttachment, error);
                    }.bind(this);
                }
                if (!KASClient.KASAttachment.hasLocalPath(this.model.audioObj)) {
                    KASClient.App.downloadAttachmentAsync(this.model.audioObj, downloadCallBack);
                }
            };
            return KASAudioViewHandler;
        }());
        UI.KASAudioViewHandler = KASAudioViewHandler;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        var KASAudioViewModel = /** @class */ (function (_super) {
            __extends(KASAudioViewModel, _super);
            function KASAudioViewModel() {
                var _this = _super.call(this) || this;
                _this.audioObj = null;
                return _this;
            }
            return KASAudioViewModel;
        }(UI.KASAttachmentViewModel));
        UI.KASAudioViewModel = KASAudioViewModel;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        var KASDocumentView = /** @class */ (function (_super) {
            __extends(KASDocumentView, _super);
            function KASDocumentView(documentObj2) {
                var _this = _super.call(this) || this;
                _this.documentObj = null;
                _this.documentDiv = null;
                _this.thumbnailView = null;
                _this.view.style.position = "relative";
                _this.documentObj = documentObj2;
                _this.thumbnailView = new UI.KASAttachmentThumbnailView();
                return _this;
            }
            KASDocumentView.prototype.refreshView = function () {
                this.populateView(this.documentObj);
            };
            KASDocumentView.prototype.showViewForDocument = function () {
                this.populateView(this.documentObj);
            };
            KASDocumentView.prototype.showTapToDownloadView = function () {
                this.addTapToDownloadButtonToDiv(this.view);
            };
            KASDocumentView.prototype.populateView = function (obj) {
                if (this.tapEnabled) {
                    this.thumbnailView.onTappedCallback = this.onTappedCallback;
                }
                if (this.shouldShowRemoveButton) {
                    this.thumbnailView.removeBtnCallback = this.removeBtnCallback;
                }
                KASClient.UI.clearElement(this.view);
                this.documentDiv = this.thumbnailView.getView(obj.fileName, obj.type, obj.size);
                if (this.shouldShowRemoveButton) {
                    this.addRemoveButton();
                }
                KASClient.UI.addElement(this.documentDiv, this.view);
            };
            KASDocumentView.prototype.getLoadingViewAttributes = function (pictureUrl) {
                var attr = _super.prototype.getLoadingViewAttributes.call(this, pictureUrl);
                attr["width"] = "25px";
                attr["height"] = "25px";
                return attr;
            };
            KASDocumentView.prototype.addRemoveButton = function () {
                var btn = KASClient.UI.getBase64Image(UI.Assets.crossButtonBlack, {
                    "position": "absolute",
                    "right": "-6px",
                    "top": "-6px",
                    "width": "16px",
                    "height": "16px"
                });
                KASClient.UI.addElement(btn, this.documentDiv);
                if (this.removeBtnCallback) {
                    UI.setAccessibilityBasic(btn, false, UI.KASFormAccessibilityRole.Button, KASClient.Internal.getKASClientString("RemoveText") + " - " + KASClient.Internal.getKASClientString("TapToRemoveText", KASClient.Internal.getKASClientString("KASAttachmentDocumentText")));
                    btn.onclick = this.removeBtnCallback;
                }
            };
            KASDocumentView.prototype.getBlurViewAttributes = function () {
                var attr = _super.prototype.getBlurViewAttributes.call(this);
                attr["margin"] = "0";
                return attr;
            };
            return KASDocumentView;
        }(UI.KASAttachmentView));
        UI.KASDocumentView = KASDocumentView;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        var KASDocumentViewHandler = /** @class */ (function () {
            function KASDocumentViewHandler(documentViewModel) {
                this.model = documentViewModel;
                this.view = new UI.KASDocumentView(this.model.documentObj);
                this.view.retryButtonCallback = function () { this.retryButtonTapped(); }.bind(this);
                this.view.onTappedCallback = function () { this.onDocumentTapped(); }.bind(this);
                this.view.shouldShowRemoveButton = this.model.showRemoveButton;
                this.view.removeBtnCallback = function () { this.documentRemoved(); }.bind(this);
                this.view.tapEnabled = this.model.enableOnTap;
            }
            KASDocumentViewHandler.prototype.refreshDocumentView = function () {
                this.view.documentObj = this.model.documentObj;
                this.view.refreshView();
            };
            KASDocumentViewHandler.prototype.documentRemoved = function () {
                if (this.documentRemovedCallback) {
                    this.documentRemovedCallback(this.model.documentObj);
                }
                this.model.documentObj = null;
                this.view.documentObj = null;
            };
            KASDocumentViewHandler.prototype.getDocumentView = function () {
                this.view.documentObj = this.model.documentObj;
                this.view.showViewForDocument();
                if (KASClient.KASAttachment.hasLocalPath(this.model.documentObj)) {
                    if (!this.model.hasStaticContent) {
                        if (this.model.isOutgoing) {
                            if (KASClient.KASAttachment.hasLocalPath(this.model.documentObj) && this.model.messageSendStatus != 2) {
                            }
                            else {
                                this.view.showLoadingIndicator();
                            }
                        }
                        else {
                        }
                    }
                }
                else {
                    if (!this.model.isOutgoing) {
                        if (this.model.isAutoDownloadEnabled) {
                            this.onDownloadTriggered();
                        }
                        else {
                            if (this.model.isDownloading) {
                                this.onDownloadTriggered();
                            }
                            else {
                                this.view.showTapToDownloadView();
                            }
                        }
                    }
                }
                return this.view.getView();
            };
            KASDocumentViewHandler.prototype.onDownloadFinished = function (downloadedAttachment, error) {
                if (error) {
                    this.onDownloadFailed();
                }
                else {
                    var attachmentShown = this.model.documentObj;
                    if (attachmentShown.serverPath == downloadedAttachment.serverPath) {
                        attachmentShown.localPath = downloadedAttachment.localPath;
                    }
                    // if all downloaded, remove loading indicator
                    if (this.allLocalPathsExist()) {
                        this.view.documentObj = this.model.documentObj;
                        this.model.allLocalPathsAvailable = true;
                        this.view.refreshView();
                        if (this.downloadFinishedCallback) {
                            this.downloadFinishedCallback();
                        }
                    }
                }
            };
            KASDocumentViewHandler.prototype.allLocalPathsExist = function () {
                return KASClient.KASAttachment.hasLocalPath(this.model.documentObj);
            };
            KASDocumentViewHandler.prototype.onUploadFinished = function () {
            };
            KASDocumentViewHandler.prototype.onUploadFailed = function () {
            };
            KASDocumentViewHandler.prototype.onDownloadStopped = function () {
                KASClient.App.cancelAttachmentDownloadAsync(this.model.documentObj, null);
                this.view.showTapToDownloadView();
            };
            KASDocumentViewHandler.prototype.onDownloadFailed = function () {
                this.view.showRetryButton();
            };
            KASDocumentViewHandler.prototype.onDocumentTapped = function () {
                var docTapped = this.model.documentObj;
                if (KASClient.KASAttachment.hasLocalPath(docTapped))
                    KASClient.App.openAttachmentImmersiveView(this.model.documentObj);
                else {
                    this.onDownloadTriggered();
                }
            };
            KASDocumentViewHandler.prototype.retryButtonTapped = function () {
                this.onDownloadTriggered();
            };
            KASDocumentViewHandler.prototype.onDownloadTriggered = function () {
                KASClient.App.hasStorageAccessForAttachmentType(KASClient.KASAttachmentType.Document, function (hasAccess, error) {
                    if (hasAccess) {
                        this.view.showLoadingIndicator();
                        this.startDownloadForDocument(null);
                    }
                }.bind(this));
            };
            KASDocumentViewHandler.prototype.startDownloadForDocument = function (callback) {
                var downloadCallBack = callback;
                if (callback == null) {
                    downloadCallBack = function (downloadedAttachment, error) {
                        this.onDownloadFinished(downloadedAttachment, error);
                    }.bind(this);
                }
                if (!KASClient.KASAttachment.hasLocalPath(this.model.documentObj)) {
                    KASClient.App.downloadAttachmentAsync(this.model.documentObj, downloadCallBack);
                }
            };
            return KASDocumentViewHandler;
        }());
        UI.KASDocumentViewHandler = KASDocumentViewHandler;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        var KASDocumentViewModel = /** @class */ (function (_super) {
            __extends(KASDocumentViewModel, _super);
            function KASDocumentViewModel() {
                var _this = _super.call(this) || this;
                _this.documentObj = null;
                return _this;
            }
            return KASDocumentViewModel;
        }(UI.KASAttachmentViewModel));
        UI.KASDocumentViewModel = KASDocumentViewModel;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        var KASDropDownModel = /** @class */ (function () {
            function KASDropDownModel(options, selectedOptionIndexes, isSearchEnabled, isMultiSelect) {
                if (isSearchEnabled === void 0) { isSearchEnabled = false; }
                if (isMultiSelect === void 0) { isMultiSelect = false; }
                this.optionsAsStrings = [];
                this.isSearchEnabled = false;
                this.selectedOptionIndexes = [];
                this.isMutliSelect = false;
                this.optionsAsStrings = options;
                this.isSearchEnabled = isSearchEnabled;
                this.selectedOptionIndexes = selectedOptionIndexes;
                this.isMutliSelect = isMultiSelect;
            }
            return KASDropDownModel;
        }());
        UI.KASDropDownModel = KASDropDownModel;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        var KASDropDownOptionsInputView = /** @class */ (function () {
            function KASDropDownOptionsInputView(placeHolder, delimiter) {
                if (delimiter === void 0) { delimiter = ","; }
                this.optionsListLI = []; // li's
                this.options = null;
                this.placeHolderText = placeHolder;
                this.optionsDelimiter = delimiter;
                this.containerView = UI.getElement("div", { "height": "auto", "margin": "0", "width": "100%" });
                this.containerView.onclick = function () {
                    this.onContainerViewTapped();
                }.bind(this);
            }
            KASDropDownOptionsInputView.prototype.getView = function () {
                if (this.options != null && this.options != undefined) {
                    this.populateEditView();
                    for (var i = 0; i < this.options.length; i++) {
                        this.appendOptionRowForText(this.options[i].text);
                    }
                }
                else {
                    this.showDefaultView();
                }
                return this.containerView;
            };
            KASDropDownOptionsInputView.prototype.showDefaultView = function () {
                UI.removeElement(this.optionsListOL, this.containerView);
                this.placeHolderLabel = UI.getLabel(this.placeHolderText, {
                    "padding-top": "10px",
                    "color": "#98a3af",
                    "font-size": KASClient.UI.getScaledFontSize("15px")
                });
                UI.setAccessibilityBasic(this.placeHolderLabel, false, UI.KASFormAccessibilityRole.TextBox);
                UI.addElement(this.placeHolderLabel, this.containerView);
            };
            KASDropDownOptionsInputView.prototype.onContainerViewTapped = function () {
                if (!this.optionsListOL)
                    this.populateEditView();
                if (this.optionsListOL.getElementsByTagName("li").length == 0)
                    this.showEmptyOptionsList();
            };
            KASDropDownOptionsInputView.prototype.populateEditView = function () {
                UI.removeElement(this.placeHolderLabel, this.containerView);
                this.optionsListOL = UI.getElement('ol', { "-webkit-user-select": "text", "min-height": "150px" });
                this.optionsListOL.contentEditable = "true";
                // Fix for Bug 2008611 - contenteditable=true is not editable in Oreo in talkbalk mode
                UI.addElement(this.optionsListOL, this.containerView);
                UI.addClickEvent(this.optionsListOL, function () {
                    this.focus();
                });
            };
            KASDropDownOptionsInputView.prototype.showEmptyOptionsList = function () {
                this.optionsListLI = [];
                this.appendOptionRowForText(" ");
                setTimeout(function () {
                    this.optionsListOL.focus();
                }.bind(this), 100);
            };
            KASDropDownOptionsInputView.prototype.appendOptionRowForText = function (option) {
                var li = UI.getElement('li', { "font-size": KASClient.UI.getScaledFontSize("16px"), "color": "#32485f" });
                li.innerText = option;
                this.optionsListLI.push(li);
                UI.addElement(li, this.optionsListOL);
            };
            KASDropDownOptionsInputView.prototype.getOptions = function () {
                var options = [];
                if (this.optionsListOL) {
                    var optionsLI = this.optionsListOL.getElementsByTagName("li");
                    for (var i = 0; i < optionsLI.length; i++) {
                        var optionText = optionsLI[i].innerText.trim();
                        if (optionText) {
                            var option = new KASClient.KASQuestionOption();
                            option.id = options.length;
                            option.text = optionText;
                            options.push(option);
                        }
                    }
                }
                return options;
            };
            return KASDropDownOptionsInputView;
        }());
        UI.KASDropDownOptionsInputView = KASDropDownOptionsInputView;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        var KASDropDownRow = /** @class */ (function () {
            function KASDropDownRow(text, index, isSelected) {
                if (isSelected === void 0) { isSelected = false; }
                this.text = "";
                this.isSelected = false;
                this.optionView = null;
                this.selectImage = null;
                this.view = null;
                this.index = index;
                var views = [];
                this.text = text;
                this.isSelected = isSelected;
                var textLabel = UI.getDiv({
                    "padding-left": "16px",
                    "width": "80%",
                    "font-size": KASClient.getScaledFontSize("16px"),
                    "color": "#32485f",
                    "padding-top": "14px",
                    "padding-bottom": "15px"
                });
                textLabel.innerText = text;
                views.push(textLabel);
                this.populateSelectImage();
                if (this.isSelected) {
                    views.push(this.selectImage);
                }
                this.optionView = UI.getHorizontalDiv(views, { "width": "100%", "border": "1px solid #f5f5f5" });
                this.optionView.onclick = function () {
                    this.onOptionTapped();
                }.bind(this);
                this.setRowAccessibility();
                this.view = this.optionView;
            }
            KASDropDownRow.prototype.onOptionTapped = function () {
                this.onSelectCallBack(this.index);
            };
            KASDropDownRow.prototype.getView = function () {
                return this.optionView;
            };
            KASDropDownRow.prototype.getLabelAttributes = function () {
                var attributes = {
                    "height": "100%",
                    "width": "80%",
                    "margin": "0",
                    "display": "flex",
                    "padding-left": "20px",
                    "flex-direction": "row",
                    "line-height": "100%"
                };
                return attributes;
            };
            KASDropDownRow.prototype.showSelectedState = function () {
                if (!this.isSelected) {
                    this.isSelected = !this.isSelected;
                    this.optionView.style.background = "#f2f9ff";
                    this.setRowAccessibility();
                    UI.addElement(this.selectImage, this.optionView);
                }
            };
            KASDropDownRow.prototype.showUnselectedState = function () {
                if (this.isSelected) {
                    this.isSelected = !this.isSelected;
                    this.optionView.style.background = "white";
                    this.setRowAccessibility();
                    UI.removeElement(this.selectImage, this.view);
                }
            };
            KASDropDownRow.prototype.setRowAccessibility = function () {
                UI.setAccessibilityBasic(this.optionView, false, UI.KASFormAccessibilityRole.Option);
                UI.setAccessibilityAttribute(this.optionView, UI.KASFormAccessibilityKey.Selected, "" + this.isSelected);
            };
            KASDropDownRow.prototype.populateSelectImage = function () {
                this.selectImage = UI.getBase64Image(UI.Assets.dropDownTick, { "height": "18px", "width": "18px", "object-fit": "contain", "padding-right": "15px", "margin": "0" });
            };
            return KASDropDownRow;
        }());
        UI.KASDropDownRow = KASDropDownRow;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        var KASFormDropDown = /** @class */ (function () {
            function KASFormDropDown(dropDownModel, headerView, footerView) {
                if (headerView === void 0) { headerView = null; }
                if (footerView === void 0) { footerView = null; }
                this.dropDownModel = null;
                this.rowSelectCallBack = null;
                this.dropDownOptionsContainerView = null;
                this.view = null;
                this.headerView = null;
                this.footerView = null;
                this.dropDownModel = dropDownModel;
                this.headerView = headerView;
                this.footerView = footerView;
                this.refreshFooter();
            }
            KASFormDropDown.prototype.getView = function () {
                if (this.view == null) {
                    this.view = UI.getDiv(this.getViewAttributes());
                    if (this.headerView != null) {
                        UI.addElement(this.headerView, this.view);
                    }
                    else {
                        UI.addElement(this.getHeaderView(), this.view);
                    }
                    if (this.dropDownModel.isSearchEnabled) {
                        UI.addElement(this.getSearchBar(), this.view);
                    }
                    UI.addElement(this.getDropDown(), this.view);
                    if (this.footerView != null) {
                        UI.addElement(this.footerView, this.view);
                    }
                }
                return this.view;
            };
            KASFormDropDown.prototype.getHeaderView = function () {
                var headerView = UI.getLabel(KASClient.Internal.getKASClientString("KASDropDownSelectText"), {
                    "padding-bottom": "9px",
                    "padding-left": "12px",
                    "padding-top": "8px",
                    "font-size": KASClient.getScaledFontSize("12px"),
                    "color": "#727d88",
                    "height": "14px"
                });
                return headerView;
            };
            KASFormDropDown.prototype.getSearchBar = function () {
                var searchTextBox = UI.getElement('input', {});
                return searchTextBox;
            };
            KASFormDropDown.prototype.getDropDown = function () {
                var options = this.dropDownModel.optionsAsStrings;
                var selectedOptions = this.dropDownModel.selectedOptionIndexes;
                this.listElements = [];
                this.dropDownOptionsContainerView = UI.getDiv({ "height": "120px", "overflow-y": "scroll", "flex": "1 1 auto" });
                KASClient.UI.setAccessibilityBasic(this.dropDownOptionsContainerView, false, UI.KASFormAccessibilityRole.ListBox);
                for (var i = 0; i < options.length; i++) {
                    var row = new UI.KASDropDownRow(options[i], i, selectedOptions.indexOf(i) >= 0);
                    row.onSelectCallBack = function (i) { this.onOptionSelected(i); }.bind(this);
                    this.listElements.push(row);
                    UI.addElement(row.getView(), this.dropDownOptionsContainerView);
                }
                return this.dropDownOptionsContainerView;
            };
            KASFormDropDown.prototype.getViewAttributes = function () {
                var attributes = {
                    "height": "80%",
                    "background-color": "white",
                    "display": "flex",
                    "flex-flow": "column",
                    "position": "relative",
                    "margin": "10% 10% 10% 10%"
                };
                return attributes;
            };
            KASFormDropDown.prototype.onOptionSelected = function (index) {
                var alreadySelectedRowIndexes = this.dropDownModel.selectedOptionIndexes;
                var selectedRow = this.listElements[index];
                if (selectedRow.isSelected) {
                    this.dropDownModel.selectedOptionIndexes.splice(this.dropDownModel.selectedOptionIndexes.indexOf(index), 1);
                    selectedRow.showUnselectedState();
                    KASClient.App.readTalkBackMessage(selectedRow.getView().textContent + "." + KASClient.Internal.getKASClientString("Unselected"));
                }
                else {
                    if (!this.dropDownModel.isMutliSelect) {
                        this.unselectRows(alreadySelectedRowIndexes);
                        this.dropDownModel.selectedOptionIndexes = [];
                    }
                    this.dropDownModel.selectedOptionIndexes.push(index);
                    selectedRow.showSelectedState();
                    KASClient.App.readTalkBackMessage(selectedRow.getView().textContent + "." + KASClient.Internal.getKASClientString("Selected"));
                }
                this.refreshFooter();
                if (this.rowSelectCallBack) {
                    this.rowSelectCallBack(index, this.dropDownModel.optionsAsStrings[index], !selectedRow.isSelected);
                }
            };
            KASFormDropDown.prototype.resetSelections = function () {
                this.unselectRows(this.dropDownModel.selectedOptionIndexes);
                this.dropDownModel.selectedOptionIndexes = [];
            };
            KASFormDropDown.prototype.unselectRows = function (rows) {
                for (var i = 0; i < rows.length; i++) {
                    var row = this.listElements[rows[i]];
                    row.showUnselectedState();
                }
            };
            KASFormDropDown.prototype.getSelectedOptions = function () {
                return this.dropDownModel.selectedOptionIndexes;
            };
            KASFormDropDown.prototype.refreshFooter = function () {
                if (!this.footerView) {
                    return;
                }
                if (!this.dropDownModel.selectedOptionIndexes || this.dropDownModel.selectedOptionIndexes.length === 0) {
                    this.footerView.style.display = "none";
                    KASClient.UI.setAccessibilityAttribute(this.footerView, UI.KASFormAccessibilityKey.Hidden, "true");
                }
                else {
                    this.footerView.style.display = "block";
                    KASClient.UI.setAccessibilityAttribute(this.footerView, UI.KASFormAccessibilityKey.Hidden, "false");
                }
            };
            return KASFormDropDown;
        }());
        UI.KASFormDropDown = KASFormDropDown;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        var KASVideoView = /** @class */ (function (_super) {
            __extends(KASVideoView, _super);
            function KASVideoView() {
                var _this = _super.call(this) || this;
                _this.videoContainer = null;
                _this.showingThumbnail = false;
                _this.view.style.position = "relative";
                _this.videoContainer = KASClient.UI.getElement("div", _this.getVideoContainerAttributes());
                KASClient.UI.addElement(_this.videoContainer, _this.view);
                return _this;
            }
            KASVideoView.prototype.refreshView = function () {
                KASClient.UI.removeElement(this.blurView, this.view);
                KASClient.UI.clearElement(this.videoContainer);
                this.loadVideoWithLocalPath(this.videoLocalPath);
            };
            KASVideoView.prototype.showViewForLocalVideo = function () {
                this.loadVideoWithLocalPath(this.videoLocalPath);
            };
            KASVideoView.prototype.showThumbnail = function () {
                if (!KASClient.isEmptyString(this.thumbnailBase64)) {
                    this.showingThumbnail = true;
                    var image = KASClient.UI.getBase64Image(this.thumbnailBase64, { "width": "100%", "height": "100%", "object-fit": "cover" });
                    KASClient.UI.addElement(image, this.videoContainer);
                }
            };
            KASVideoView.prototype.showTapToDownloadView = function () {
                this.addTapToDownloadButtonToDiv(this.view);
            };
            KASVideoView.prototype.hideTapToDownloadView = function () {
                KASClient.UI.removeElement(this.blurView, this.view);
            };
            KASVideoView.prototype.loadVideoWithLocalPath = function (localPath) {
                this.showingThumbnail = false;
                KASClient.UI.clearElement(this.videoContainer);
                if (this.tapEnabled) {
                    this.view.onclick = function () {
                        if (this.onVideoTappedCallback)
                            this.onVideoTappedCallback();
                    }.bind(this);
                }
                if (!KASClient.isEmptyString(this.thumbnailBase64)) {
                    var videoThumbnail = KASClient.UI.getImage(KASClient.UI.getBase64Src(this.thumbnailBase64), { "width": "100%" });
                    KASClient.UI.addElement(videoThumbnail, this.videoContainer);
                }
                var videoPlayIcon = KASClient.UI.getBase64Image(KASClient.UI.Assets.videoPlayIcon, { "position": "absolute", "width": "50px", "height": "50px", "left": "calc(50% - 25px)", "top": "calc(50% - 25px)", "background-color": "#d3d3d3", "border-radius": "50%" });
                KASClient.UI.addElement(videoPlayIcon, this.videoContainer);
            };
            KASVideoView.prototype.getVideoContainerAttributes = function () {
                return {
                    "display": "flex",
                    "background-color": "#d3d3d3",
                    "padding": "0",
                    "position": "relative",
                    "width": "100%",
                    "height": "100%"
                };
            };
            return KASVideoView;
        }(UI.KASAttachmentView));
        UI.KASVideoView = KASVideoView;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        var KASVideoViewHandler = /** @class */ (function () {
            function KASVideoViewHandler(videoViewModel) {
                this.model = videoViewModel;
                this.view = new UI.KASVideoView();
                this.view.retryButtonCallback = function () { this.retryButtonTapped(); }.bind(this);
                // Currently video playing is taken care of native player. So tap event is required on video view to 
                // launch native video player. This can be driven through the model when other options like Azure
                // Media Player or HTML5Video+http_source_path combination is used.
                this.view.tapEnabled = true;
                this.view.onVideoTappedCallback = function () { this.onVideoTapped(); }.bind(this);
                this.view.shouldShowRemoveButton = this.model.showRemoveButton;
                this.view.thumbnailBase64 = this.model.thumbnailBase64; // thumbnail should be populated before this object is created
                this.view.videoStreamingPath = this.model.videoStreamingPath;
            }
            KASVideoViewHandler.prototype.setVideoLocalPathInModel = function (videoViewModel) {
                if (!this.model.hasStaticContent) {
                    this.model.videoLocalPath = this.model.videoObject.localPath;
                }
                this.model.thumbnailBase64 = this.model.videoObject.thumbnail;
            };
            KASVideoViewHandler.prototype.refreshData = function (model) {
                this.setVideoLocalPathInModel(model);
                this.view.videoLocalPath = this.model.videoLocalPath;
                this.view.thumbnailBase64 = this.model.thumbnailBase64;
            };
            KASVideoViewHandler.prototype.getVideoView = function () {
                this.refreshData(this.model);
                if (this.model.allLocalPathsAvailable) {
                    this.view.showViewForLocalVideo();
                    if (!this.model.hasStaticContent) {
                        if (this.model.isOutgoing) {
                            if (this.model.allServerPathsAvailable && this.model.messageSendStatus != 2) {
                                // video upload complete. do nothing.
                            }
                            else {
                                if (this.model.showLoadingWhileUploads)
                                    this.view.showLoadingIndicator();
                            }
                        }
                    }
                }
                else {
                    if (!this.model.isOutgoing) {
                        this.view.showThumbnail();
                        if (this.model.isAutoDownloadEnabled) {
                            this.onDownloadTriggered();
                        }
                        else {
                            // read isDownloading from native
                            if (this.model.isDownloading) {
                                this.onDownloadTriggered();
                            }
                            else {
                                this.view.showTapToDownloadView();
                            }
                        }
                    }
                }
                return this.view.getView();
            };
            KASVideoViewHandler.prototype.onDownloadFinished = function (downloadedAttachment, error) {
                if (error) {
                    this.view.showRetryButton();
                }
                else {
                    KASClient.logToReportNative("Logging from onDownloadFinished, serverPath - " + downloadedAttachment.serverPath + ", localPath - " + downloadedAttachment.localPath);
                    this.model.videoObject.localPath = downloadedAttachment.localPath;
                    this.model.videoObject.thumbnail = downloadedAttachment.thumbnail;
                    this.model.allLocalPathsAvailable = true;
                    this.refreshData(this.model);
                    this.view.refreshView();
                    if (this.downloadFinishedCallback) {
                        this.downloadFinishedCallback();
                    }
                }
            };
            KASVideoViewHandler.prototype.onUploadFinished = function () {
            };
            KASVideoViewHandler.prototype.onUploadFailed = function () {
            };
            KASVideoViewHandler.prototype.onDownloadStopped = function () {
                KASClient.App.cancelAttachmentDownloadAsync(this.model.videoObject, null);
            };
            KASVideoViewHandler.prototype.onDownloadFailed = function () {
                this.view.showRetryButton();
            };
            KASVideoViewHandler.prototype.retryButtonTapped = function () {
                this.onDownloadTriggered();
            };
            KASVideoViewHandler.prototype.onDownloadTriggered = function () {
                KASClient.App.hasStorageAccessForAttachmentType(KASClient.KASAttachmentType.Video, function (hasAccess, error) {
                    if (hasAccess) {
                        this.view.showLoadingIndicator();
                        this.startVideoDownloadForAttachment(null);
                    }
                }.bind(this));
            };
            KASVideoViewHandler.prototype.startVideoDownloadForAttachment = function (callback) {
                var downloadCallBack = callback;
                if (callback == null || callback == undefined) {
                    downloadCallBack = function (downloadedAttachment, error) {
                        this.onDownloadFinished(downloadedAttachment, error);
                    }.bind(this);
                }
                if (this.model.videoObject.localPath == "" && this.model.videoObject.serverPath != "") {
                    KASClient.App.downloadAttachmentAsync(this.model.videoObject, downloadCallBack);
                }
            };
            KASVideoViewHandler.prototype.onVideoTapped = function () {
                KASClient.App.openAttachmentImmersiveView(this.model.videoObject);
            };
            return KASVideoViewHandler;
        }());
        UI.KASVideoViewHandler = KASVideoViewHandler;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
/// <reference path="../KASAttachmentViewModel.ts" />
var KASClient;
(function (KASClient) {
    var UI;
    (function (UI) {
        var KASVideoViewModel = /** @class */ (function (_super) {
            __extends(KASVideoViewModel, _super);
            function KASVideoViewModel() {
                var _this = _super.call(this) || this;
                _this.videoLocalPath = "";
                _this.videoStreamingPath = "";
                _this.thumbnailBase64 = "";
                _this.shouldBlurThumbnail = false;
                return _this;
            }
            return KASVideoViewModel;
        }(UI.KASAttachmentViewModel));
        UI.KASVideoViewModel = KASVideoViewModel;
    })(UI = KASClient.UI || (KASClient.UI = {}));
})(KASClient || (KASClient = {}));
